"Changes in change set Default"!'From VisualWorksÂ® Personal Use Edition, 8.3 of July 28, 2017 on May 19, 2020 at 9:50:16 PM'!CodeComponent type: #package named: '(none)' ownerNamed: 'Root.Smalltalk.Kernel.Undeclared' static: #N change: #added!CodeComponent type: #package named: '(none)' ownerNamed: 'Root.Smalltalk.Kernel.Undeclared' static: #PitchClassDo change: #added!CodeComponent type: #package named: '(none)' ownerNamed: 'Root.Smalltalk.Kernel.Undeclared' static: #statusBar change: #added!CodeComponent type: #package named: '(none)' ownerNamed: 'Root.Smalltalk.Kernel.Undeclared' static: #transcriptView change: #added!CodeComponent type: #package named: '(none)' ownerNamed: 'Root.Smalltalk.Kernel.Undeclared' static: #Ostinato change: #added!CodeComponent create: #parcel named: 'Siren'!Parcel loadParcelFrom: (OS.LogicalFilename fromComponents: #('/' 'Content' 'Code' 'Smalltalk' 'Siren9' 'Siren9.0j.pcl'))!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.PitchClassChord' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.VirtualSound' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.DisplayList' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.EventListEditor' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.PitchClass' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Position' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.SirenExternalInterface' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.HierarchyLayoutManager' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.PitchTimeController' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.DisplayVisual' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.FunctionView' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Spectrum' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.ChromaticScale' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.ComponentSound' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Sharpness' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.ActionEvent' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.PlayList' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.DeviceModel' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Lapse' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Chroma' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.FloatSound' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.ChordNameEditor' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.MeasureDuration' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.SoundVoice' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.ScheduleRecord' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.PortAudioInterface' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.SplineFunction' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.ScoreView' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.MIDIPacket' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.DataSet' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.SHARCSample' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.MIDIPitch' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.MIDIFileVoice' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Peal' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.MIDIPF70' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Arpeggio' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.PentatonicScale' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.LPCSound' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.OSCPort' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Meter' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.DisplayListSubcanvas' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.SoundFile' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.EventListPanel' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.MIDIFB01' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.AbstractOSCPacket' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.DBLoudness' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.SpeciesTrainingTool' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.STreeAccessor' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.HertzPitch' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.DisplayListEditor' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.RatioDuration' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.FunctionController' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.ConditionalDuration' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Directionality' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.PField' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.SEventQueue' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.FFTWInterface' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.MIDIVoice' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Amplitude' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.FunctionEvent' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Chronos' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.DynamicCloud' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.TypedOSCMessage' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.SoundFileViewer' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Swell' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.DisplayListController' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.SuperColliderVoice' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.NeapolitanMinor' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.MSecondDuration' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.HauerSteffensView' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.SelectionCloud' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.PitchClassFlat' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.MelodicMinorScale' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Timer' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.DynamicSelectionCloud' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.ChromaticInterval' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.EditorModel' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.FourierSummation' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.PitchClassSharp' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.TagSetTool' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Scale' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.OSCByteConvertor' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.PitchClassAltered' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.EventListTreeItem' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.DiatonicInterval' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Length' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.LibSndFileInterface' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.EventScheduler' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.TimeSequenceLayoutManager' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.ExtDynamicSelectionCloud' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.PositionTimeLayoutManager' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Triad' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.NumericalMagnitude' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.TimeSequenceController' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.DisplayItem' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.SoundView' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.FunctionGraph' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.NeapolitanMajor' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.ModeMember' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.MusicMagnitude' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.HungarianMinor' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.DisplayListView' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Function' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Cluster' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.NominalMagnitude' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.CsoundVoice' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.SoundEvent' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.LPCFrame' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.SecondDuration' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Roll' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.DoubleHarmonic' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.EventAssociation' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.MusicalDescendingInterval' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.SoundController' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.SymbolicPitch' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.TimeSequenceView' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.IndentedListLayoutManager' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.PitchTimeLayoutManager' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.MIDIDump' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.OSCMessage' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Chord' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.ListOfNotes' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.SoundEditor' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.DisplayListTracker' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.LPCView' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.SampledSound' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.MIDIPort' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.PitchClassDoubleSharp' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.MIDIVelocity' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.CompositeSound' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.AbstractEvent' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.USecondDuration' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.PhraseView' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.IndentedTreeLayoutManager' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.OSCBundle' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.DisplayRectangle' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Duration' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.MajorScale' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.SoundCanvas' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.PortMIDIPort' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.EventModifier' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Spatialization' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Signature' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.LPCEditor' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.SirenUtility' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.EventListTreeEditor' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.SHARCInstrument' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.MIDIDevice' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.PitchTimeView' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.PortModel' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.CmusicVoice' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.MusicEvent' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Track' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.EventGenerator' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.SmartAudioPort' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.DurationEvent' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.CmixVoice' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.PitchClassDoubleFlat' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Ergon' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.DisplayString' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Analysis' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.SirenSession' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.StructureAccessor' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.ExponentialFunction' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.LinearFunction' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.ZPoint' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.DisplayLine' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Voice' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.PseudoMinorScale' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.RatioMagnitude' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.LayoutManager' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.SoundPort' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Positus' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.DisplayPolyline' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.GapSound' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.SpectrumView' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.OSCVoice' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.RatioLoudness' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.MusicalInterval' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Sound' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.IntervalMagnitude' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Oriental' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.PortMidiInterface' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.EventList' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.EventListText' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.EventListFileViewer' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.RatioPitch' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.NotelistVoice' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.DataSetTool' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Tools.ListWorkBook' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Trill' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Ostinato' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.HarmonicMinorScale' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.SymbolicLoudness' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.PitchClassNatural' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Tag' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.PortAudioPort' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.MusicModel' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Cloud' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.AnalysisList' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Pitch' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.Rubato' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren.PositionTimeView' change: #added!CodeComponent type: #parcel named: 'Siren' objectNamed: 'Root.Smalltalk.Siren' change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #@ change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #= change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #allNotesInScale: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #analyseIn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #asPlayableObject change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #bestTonalityInIsolatedCase change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #beTransposedBy: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #chordNotesAmong: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #commonTonalitiesWith: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #computeAllNotes change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #computeDiminished change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #computeEleventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #computeFifth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #computeNinth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #computePossibleTonalities change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #computeRoot change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #computeSeventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #computeSixth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #computeThird change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #computeThirteenth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #containsNote: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #defaultOctave change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #fondamental change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #format change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #fromNotes: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #fromNotes:root: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #fromString: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #hasA: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #hasADiminishedFifth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #hasADiminishedSeventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #hasAMajorSeventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #hasAMinorSeventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #hasAnAugmentedFifth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #hasNoFifth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #hasNoSeventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #initAnalyse change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #intervalBetweenRoots: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #inTessitura: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #isAlterate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #isDiminished change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #isDominant change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #isHalfDiminished change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #isMajor change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #isMinor change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #isSuspended change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #lapse: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #matchWith: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #name change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #natural change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #nextIn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #nonChordNotesAmong: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #notes change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #notes:contains: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #notesString change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #notesWithinOctave change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #octave: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #possibleScales change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #possibleTonalities change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #possibleTonalitiesInScaleClass: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #quotedPrintOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #resetNotes change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #root change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #root: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #rootInTessitura: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #rootPitchClass change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #standardPossibleTonalities change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #startBeat:duration: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #startTime:duration: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #storeOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #structure change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #structure: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #structureFromNotes:root: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #structureHasEitherOf: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #structureHasNeitherOf: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #structureString change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #theFifth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #theFourth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #theOctave change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #theSeventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #theThird change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #theTonic change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #tonalitesCommunesAvec: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #tonalitesCommunesAvec:et: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: false selector: #transposeOf: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: true selector: #allChordsFromListOfNotes: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: true selector: #commonTonalities change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: true selector: #examples change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: true selector: #exampleShort change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: true selector: #holdsworth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: true selector: #new change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: true selector: #newFromNotes: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: true selector: #newFromNotesNames: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: true selector: #newFromString: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: true selector: #openEditor change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: true selector: #reallyAllChordsFromListOfNotes: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassChord' meta: true selector: #root:structure: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.VirtualSound' meta: false selector: #cue: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.VirtualSound' meta: false selector: #getReal change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.VirtualSound' meta: false selector: #isVirtual change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.VirtualSound' meta: false selector: #mapSampleIndex: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.VirtualSound' meta: false selector: #realSound change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.VirtualSound' meta: false selector: #sampleAt:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.VirtualSound' meta: false selector: #source change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.VirtualSound' meta: false selector: #source: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.VirtualSound' meta: false selector: #start: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.VirtualSound' meta: false selector: #stop: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.VirtualSound' meta: true selector: #exampleView change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.VirtualSound' meta: true selector: #from:cue: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #add: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #add:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #add:atPath: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #addAll: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #addComponent: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #addWrapper: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #bounds change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #color change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #computePreferredBounds change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #display change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #displayNonCached change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #displayOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #displayPostScriptOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #do: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #extent change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #flatten change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #hasItems change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #isEmpty change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #itemsFromX:toX: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #itemsIntersecting: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #itemsWithin: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #itemsWithin:of: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #itemWithin:of: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #modelsFromX:toX: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #nodeAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #nodeFor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #offset change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #offset: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #preferredBounds change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #printCompleteOn:depth: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #printCompletePostScriptOn:depth: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #printPostScriptOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #scaledBy: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #translateBy: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: false selector: #wrapperClass change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: true selector: #exampleHierarchical change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: true selector: #gridExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: true selector: #gridExampleX:byY: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: true selector: #polylineExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: true selector: #polylineExampleHuge change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: true selector: #polylinesX:byY: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: true selector: #polylinesX:byY:items: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: true selector: #postScriptExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: true selector: #randomExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: true selector: #rectangleExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: true selector: #rectanglesX:byY: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: true selector: #stringExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: true selector: #stringsX:byY: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayList' meta: true selector: #visualsX:byY: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListEditor' meta: false selector: #add: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListEditor' meta: false selector: #ampl change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListEditor' meta: false selector: #ampl: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListEditor' meta: false selector: #defaultEvent change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListEditor' meta: false selector: #defaultEvent: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListEditor' meta: false selector: #displayList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListEditor' meta: false selector: #doInspect change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListEditor' meta: false selector: #eraseList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListEditor' meta: false selector: #eventList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListEditor' meta: false selector: #eventList: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListEditor' meta: false selector: #group: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListEditor' meta: false selector: #items change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListEditor' meta: false selector: #link:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListEditor' meta: false selector: #play change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListEditor' meta: false selector: #release change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListEditor' meta: false selector: #remove: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListEditor' meta: false selector: #select: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListEditor' meta: false selector: #startStop change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #@ change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #alterate:toReach: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #alterateBelow:toReach: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #augmentedEleventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #augmentedFifth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #augmentedFourth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #augmentedNinth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #augmentedSecond change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #augmentedUnison change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #chordFromString: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #chordFromTokens: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #chromaticScale change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #copy change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #descendingNumberOfSemiTonesBetween: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #descendingSemiTonesToNatural change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #diminishedFifth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #diminishedNinth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #diminishedSecond change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #diminishedSeventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #diminishedThirteenth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #doubleFlat change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #doubleSharp change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #downAndUpOctaves: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #eleventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #fifth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #flatFifth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #flatNinth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #flatThirteenth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #fourth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #harmonicMinorScale change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #intervalBetween: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #intervalTypeBetween: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #intervalTypeModuloOctaveBetween: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #inTessitura: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #isDoubleFlat change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #isDoubleSharp change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #isFlat change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #isNatural change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #isSharp change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #majorNinth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #majorScale change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #majorSecond change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #majorSeventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #majorSixth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #majorThird change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #majorThirteenth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #majorTriad change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #melodicMinorScale change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #minorNinth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #minorScale change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #minorSecond change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #minorSeventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #minorSixth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #minorThird change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #minorThirteenth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #minorTriad change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #nameInScale: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #natural change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #ninth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #nthFollowing: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #nthPreceding: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #numberOfSemiTonesBetween: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #octave change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #octave: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #perfectEleventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #perfectFifth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #perfectFourth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #pitchBetween:and: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #pitchClass change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #pitchEqual: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #pseudoMinorScale change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #representBinaryOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #second change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #semiToneCount change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #seventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #sixth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #smallestIntervalBetween: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #storeOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #the:octavesBeginningFrom: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #thirteenth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #transposeOf: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: false selector: #unison change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #A change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #allNotesButDoubles change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #allPlausibleRootNotes change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #allPlausibleRootsForMajorScales change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #allPlausibleRootsForMinorScales change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #altoRange change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #altoRangeInScale: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #B change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #baseRange change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #baseRangeInScale: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #C change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #chordExamples change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #closestEnharmonic change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #D change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #do change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #E change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #englishOrFrench change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #F change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #fa change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #flatNotes change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #flatOrdering change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #fromSemiTones: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #G change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #initializeAllNaturalNotes change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #initializeClass change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #initializeDoubleFlat change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #initializeFrenchNames change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #initializeGlobals change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #la change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #majorScaleExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #melodicMinorScaleExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #mi change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #minorScaleExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #naturalNotes change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #nFirstFlats: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #nFirstSharps: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #noteNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #pitchInTessituraExamples change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #re change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #sharpflatAlgebraExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #sharpNotes change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #sharpOrdering change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #si change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #sol change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #sopranoRange change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #sopranoRangeInScale: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #tenorRange change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClass' meta: true selector: #tenorRangeInScale: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Rubato' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Rubato' meta: true selector: #example change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Cloud' meta: false selector: #density: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Cloud' meta: false selector: #eventList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Cloud' meta: false selector: #eventList0 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Cloud' meta: true selector: #dictionaryExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Cloud' meta: true selector: #dur:pitch:ampl: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Cloud' meta: true selector: #dur:pitch:ampl:voice: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Cloud' meta: true selector: #dur:pitch:ampl:voice:density: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Cloud' meta: true selector: #dur:voice:density: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Cloud' meta: true selector: #example1 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Cloud' meta: true selector: #fromDictionary: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Cloud' meta: true selector: #randomExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Cloud' meta: true selector: #randomExample2 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HierarchyLayoutManager' meta: false selector: #accessor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HierarchyLayoutManager' meta: false selector: #addItem:atNode:in: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HierarchyLayoutManager' meta: false selector: #addItem1:atNode:in: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HierarchyLayoutManager' meta: false selector: #displayPositionFor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HierarchyLayoutManager' meta: false selector: #generateDisplayList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HierarchyLayoutManager' meta: false selector: #xStep: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HierarchyLayoutManager' meta: false selector: #yStep: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchTimeController' meta: false selector: #selectFromPoint:toPoint: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayVisual' meta: false selector: #bounds change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayVisual' meta: false selector: #displayOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayVisual' meta: false selector: #displayPostScriptOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayVisual' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayVisual' meta: false selector: #storeOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayVisual' meta: false selector: #visual change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayVisual' meta: false selector: #visual: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayVisual' meta: true selector: #convertMusicConstants change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayVisual' meta: true selector: #displayMusicConstants change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayVisual' meta: true selector: #model:visual:offset: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayVisual' meta: true selector: #storeMusicConstants change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayVisual' meta: true selector: #visual: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayVisual' meta: true selector: #visual:offset: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayVisual' meta: true selector: #visual:origin: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayVisual' meta: true selector: #visualExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #aScale change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #aScale: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #bounds: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #colors change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #colors: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #defaultControllerClass change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #displayExtent change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #displayGridsOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #displayOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #displayOnImage change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #dontNormalize: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #hRange change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #hRange: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #initializeCacheing change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #initializeCacheingSmall change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #initializeCacheSized:by: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #lineWidth: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #model change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #modelAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #modelAt:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #models change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #models: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #normalize: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #normalizeArray: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #setModel: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #setPixmap change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #source change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #updateBetween:and:with:on: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #vRange change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: false selector: #vRange: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: true selector: #componentOnFunction:color:normalize:x:y: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: true selector: #componentOnFunctions:withColors:normalize:x:y: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: true selector: #componentOnFunctions:withColors:x:y: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: true selector: #defaultColors change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: true selector: #example change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: true selector: #expSegExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: true selector: #fileExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: true selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: true selector: #inset change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: true selector: #lineWidth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: true selector: #lineWidth: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: true selector: #linSegExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: true selector: #multiFunctionExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: true selector: #onFunction: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: true selector: #onFunction:normalize: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: true selector: #onFunction:x:y: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: true selector: #onFunctions: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: true selector: #onFunctions:normalize: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: true selector: #onFunctions:withColors:normalize:x:y: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: true selector: #onFunctions:withColors:x:y: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: true selector: #onFunctions:x:y: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: true selector: #openOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: true selector: #smallFileExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: true selector: #smallMultiFunctionExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionView' meta: true selector: #smallOnFunction: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #at:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #complex change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #compute change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #compute0 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #D change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #D: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #display change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #frame: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #frame:do: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #frame:imagAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #frame:imagAt:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #frame:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #frame:realAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #frame:realAt:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #interpolateFrame: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #N change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #N: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #real change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #setData change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #setWindow: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #sound change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #sound: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #stepSize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #stepSize: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #timewarpBy: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #updateRange change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #window change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #window: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #windowSize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: false selector: #windowSize: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: true selector: #fileExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Spectrum' meta: true selector: #sweepExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChromaticScale' meta: true selector: #intervalList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ComponentSound' meta: false selector: #includes: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ComponentSound' meta: false selector: #offset change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ComponentSound' meta: false selector: #offset: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ComponentSound' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ComponentSound' meta: false selector: #sound change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ComponentSound' meta: false selector: #sound: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ComponentSound' meta: false selector: #start change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ComponentSound' meta: false selector: #start: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ComponentSound' meta: false selector: #stop change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ComponentSound' meta: false selector: #stop: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ComponentSound' meta: true selector: #on:from:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ComponentSound' meta: true selector: #on:start:stop: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ComponentSound' meta: true selector: #on:start:stop:offset: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Sharpness' meta: false selector: #species change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Sharpness' meta: true selector: #example change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ActionEvent' meta: false selector: #action change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ActionEvent' meta: false selector: #action: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ActionEvent' meta: false selector: #play change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ActionEvent' meta: false selector: #playAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ActionEvent' meta: true selector: #dur:action: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ActionEvent' meta: true selector: #dur:block: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ActionEvent' meta: true selector: #eventExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ActionEvent' meta: true selector: #listExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ActionEvent' meta: true selector: #playExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PlayList' meta: false selector: #addList: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PlayList' meta: false selector: #addTrack: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PlayList' meta: false selector: #addTrack:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PlayList' meta: false selector: #all change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PlayList' meta: false selector: #all: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PlayList' meta: false selector: #allArtists change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PlayList' meta: false selector: #allTracks change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PlayList' meta: false selector: #allTracksInto: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PlayList' meta: false selector: #asSymbol change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PlayList' meta: false selector: #at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PlayList' meta: false selector: #fullName change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PlayList' meta: false selector: #id change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PlayList' meta: false selector: #id: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PlayList' meta: false selector: #isEmpty change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PlayList' meta: false selector: #key change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PlayList' meta: false selector: #key: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PlayList' meta: false selector: #parent change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PlayList' meta: false selector: #parent: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PlayList' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PlayList' meta: false selector: #removeListNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PlayList' meta: false selector: #size change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PlayList' meta: false selector: #size: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PlayList' meta: false selector: #tracks change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PlayList' meta: false selector: #tracks: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PlayList' meta: true selector: #fromDictionary:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DeviceModel' meta: false selector: #debug change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DeviceModel' meta: false selector: #debug: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DeviceModel' meta: false selector: #in change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DeviceModel' meta: false selector: #in: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DeviceModel' meta: false selector: #name change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DeviceModel' meta: false selector: #name: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DeviceModel' meta: false selector: #out change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DeviceModel' meta: false selector: #out: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DeviceModel' meta: false selector: #port change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DeviceModel' meta: false selector: #port: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DeviceModel' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DeviceModel' meta: false selector: #rate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DeviceModel' meta: false selector: #rate: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DeviceModel' meta: false selector: #stream change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DeviceModel' meta: false selector: #stream: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FloatSound' meta: false selector: #format change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FloatSound' meta: false selector: #intSampleAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FloatSound' meta: false selector: #intSampleAt:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FloatSound' meta: false selector: #privateSampleAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FloatSound' meta: false selector: #privateSampleAt:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FloatSound' meta: false selector: #sampleSize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FloatSound' meta: true selector: #fileExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FloatSound' meta: true selector: #formatSymbol change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FloatSound' meta: true selector: #maxSample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FloatSound' meta: true selector: #minSample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: false selector: #chord change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: false selector: #doHalfDim7 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: false selector: #doMaj change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: false selector: #doMaj7 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: false selector: #doMin7 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: false selector: #eleventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: false selector: #fifth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: false selector: #ninth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: false selector: #noteNames change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: false selector: #pitchClass change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: false selector: #pitchClassIndex change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: false selector: #pitchClassIndexChanged change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: false selector: #root change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: false selector: #seventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: false selector: #structure change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: false selector: #structureChanged change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: false selector: #third change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: false selector: #thirteenth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: true selector: #eleventhMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: true selector: #fifthMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: true selector: #ninthMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: true selector: #rootMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: true selector: #seventhMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: true selector: #thirdMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: true selector: #thirteenthMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChordNameEditor' meta: true selector: #windowSpec change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MeasureDuration' meta: false selector: #species change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MeasureDuration' meta: false selector: #units change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundVoice' meta: false selector: #playEvent:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundVoice' meta: true selector: #default change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ScheduleRecord' meta: false selector: #clear change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ScheduleRecord' meta: false selector: #isActive change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ScheduleRecord' meta: false selector: #loop change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ScheduleRecord' meta: false selector: #loop: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ScheduleRecord' meta: false selector: #next change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ScheduleRecord' meta: false selector: #next: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ScheduleRecord' meta: false selector: #previous change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ScheduleRecord' meta: false selector: #previous: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ScheduleRecord' meta: false selector: #start change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ScheduleRecord' meta: false selector: #stop change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #Callback change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #CallbackFcn change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #cbProcess change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #cbProcess: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #ioSemaphore change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #ioSemaphore: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #OEoop change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #pa_close change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #pa_dev_in: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #pa_dev_out: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #pa_dev_rate: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #pa_get_name: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #pa_get_name:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #pa_in_device change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #pa_in_rate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #pa_initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #pa_num_devices change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #pa_num_in change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #pa_num_out change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #pa_open_p:with:with:with:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #pa_open_s:with:with:with:with:with:with:with:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #pa_out_device change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #pa_out_rate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #pa_play:with:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #pa_play:with:with:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #pa_start change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #pa_stop change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: false selector: #pa_terminate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: true selector: #const: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: true selector: #example0 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: true selector: #example2 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioInterface' meta: true selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #ampl change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #ampl: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #channel change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #command change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #data change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #data: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #duration change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #duration: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #key change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #key: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #length change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #length: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #pitch change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #pitch: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #print:on: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #second: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #setPitch:dur:loudness: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #status: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #third: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #time change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #time: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #vel change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #vel: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #voice change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: false selector: #voice: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: true selector: #bytesFor14BitValue: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: true selector: #fromBytes: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: true selector: #fromInt:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: true selector: #new change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: true selector: #new: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPacket' meta: true selector: #setPitch:dur:loudness: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #addAlbum: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #addList:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #addPlaylist: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #addRelationsFor:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #addTrack: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #albums change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #albums: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #appVersion change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #appVersion: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #artists change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #buildTagsTree change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #date change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #date: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #features change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #features: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #fileNotFound change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #filterDegenerate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #filterNumbers change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #fixAbbreviations change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #flushTags change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #folder change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #folder: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #free change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #genreHistogram change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #groupAlbums change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #groupArtists change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #groupPlayLists change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #isAlphaNumeric: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #isSeparator: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #learnTags: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #loadPlayLists change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #loadTracks change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #majVersion change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #majVersion: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #minVersion change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #minVersion: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #notInPlaylists change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #parseElement:depth:index: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #parseNames change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #parseTokens: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #persID change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #persID: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #playlists change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #playlists: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #printElement:on: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #printElement:on:depth: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #printElement0:on: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #printOn0: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #printTags: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #read: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #readStrings: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #root change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #scanTokens:in: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #scanWords:from:to:in: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #splitTags change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #tags change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #tracks change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #tracks: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: false selector: #tree change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: true selector: #defaultDataSet change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: true selector: #defaultDataSetName change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: true selector: #example1 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: true selector: #example2 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: true selector: #flushDataSet change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: true selector: #isSeparator: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: true selector: #loadFiles: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: true selector: #loadList:in:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: true selector: #new change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: true selector: #new: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSet' meta: true selector: #tags change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SplineFunction' meta: false selector: #at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SplineFunction' meta: false selector: #computeCurve change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SplineFunction' meta: true selector: #default change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SplineFunction' meta: true selector: #splineExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SplineFunction' meta: true selector: #splineViewExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCSample' meta: false selector: #addLast: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCSample' meta: false selector: #ampl change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCSample' meta: false selector: #ampl: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCSample' meta: false selector: #asSumOfSines change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCSample' meta: false selector: #asWavetable: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCSample' meta: false selector: #centroid change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCSample' meta: false selector: #centroid: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCSample' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCSample' meta: false selector: #key change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCSample' meta: false selector: #key: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCSample' meta: false selector: #name change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCSample' meta: false selector: #name: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCSample' meta: false selector: #nHarm change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCSample' meta: false selector: #nHarm: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCSample' meta: false selector: #noPitch change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCSample' meta: false selector: #noPitch: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCSample' meta: false selector: #pitch change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCSample' meta: false selector: #pitch: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCSample' meta: false selector: #rePitch change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCSample' meta: false selector: #rePitch: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCSample' meta: false selector: #transformAmp: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCSample' meta: true selector: #in:descr: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPitch' meta: false selector: #asFracMIDI change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPitch' meta: false selector: #asFracSymbol change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPitch' meta: false selector: #asHertz change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPitch' meta: false selector: #asHz change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPitch' meta: false selector: #asMIDI change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPitch' meta: false selector: #asSymbol change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPitch' meta: false selector: #mostGeneral change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPitch' meta: false selector: #species change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPitch' meta: false selector: #units change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPitch' meta: true selector: #ddMsgName change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPitch' meta: true selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIFileVoice' meta: false selector: #close change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIFileVoice' meta: false selector: #defaultEventClass change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIFileVoice' meta: false selector: #eventList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIFileVoice' meta: false selector: #getVarLen change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIFileVoice' meta: false selector: #readMThd change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIFileVoice' meta: false selector: #readMTrk change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIFileVoice' meta: false selector: #readOnto: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIFileVoice' meta: false selector: #readTrackOnto: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIFileVoice' meta: false selector: #tempo change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIFileVoice' meta: false selector: #tempo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIFileVoice' meta: true selector: #midiFileExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIFileVoice' meta: true selector: #newOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Peal' meta: false selector: #at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Peal' meta: false selector: #at:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Peal' meta: false selector: #change change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Peal' meta: false selector: #changeOrder:bounds: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Peal' meta: false selector: #currentChange change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Peal' meta: false selector: #eventList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Peal' meta: false selector: #finished change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Peal' meta: false selector: #indexOfElement: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Peal' meta: false selector: #play change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Peal' meta: false selector: #playOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Peal' meta: false selector: #playOn:durations:meter:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Peal' meta: false selector: #playOn0:durations:meter:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Peal' meta: false selector: #setBase: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Peal' meta: false selector: #size change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Peal' meta: false selector: #swap:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Peal' meta: true selector: #new: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Peal' meta: true selector: #pealExample1 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Peal' meta: true selector: #upon: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Arpeggio' meta: false selector: #delay: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Arpeggio' meta: false selector: #edit change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Arpeggio' meta: false selector: #eventList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Arpeggio' meta: false selector: #play change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Arpeggio' meta: false selector: #setDelays change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Arpeggio' meta: true selector: #on:delay: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PentatonicScale' meta: true selector: #allIntervals change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PentatonicScale' meta: true selector: #intervalList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #addFrame: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #filename change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #filename: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #filesize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #filesize: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #float:from: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #floatAt:put:in: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #frameAt:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #frames change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #frames: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #frate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #frate: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #gatherStatistics change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #long:from: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #longAt:put:in: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #nframes change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #nframes: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #npoles change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #npoles: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #smooth:into: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #smoothAvg:into: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #smoothPitch change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #smoothRunning:into: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #srate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #srate: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #storeFile change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #storeOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: false selector: #writePitch: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCSound' meta: true selector: #fromFile: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCPort' meta: false selector: #init: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCPort' meta: false selector: #portNumber: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCPort' meta: false selector: #send: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCPort' meta: true selector: #cslHost change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCPort' meta: true selector: #default change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCPort' meta: true selector: #defaultIP change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCPort' meta: true selector: #defaultIP: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCPort' meta: true selector: #defaultPort change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCPort' meta: true selector: #defaultPort: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCPort' meta: true selector: #defaultSCOSCPort change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCPort' meta: true selector: #demo change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCPort' meta: true selector: #demo2 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCPort' meta: true selector: #localhost change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCPort' meta: true selector: #scHost change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCPort' meta: true selector: #sendFreq change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCPort' meta: true selector: #sendStart change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCPort' meta: true selector: #sendStop change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCPort' meta: true selector: #to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCPort' meta: true selector: #to:port: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCPort' meta: true selector: #toHostName: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCPort' meta: true selector: #toHostName:portNumber: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCPort' meta: true selector: #toLocalhostPortNumber: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListSubcanvas' meta: false selector: #createDisplayListView change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListSubcanvas' meta: false selector: #hZoom change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListSubcanvas' meta: false selector: #nextPage change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListSubcanvas' meta: false selector: #prevPage change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListSubcanvas' meta: false selector: #setComponent: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListSubcanvas' meta: false selector: #setDisplayList: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListSubcanvas' meta: false selector: #vZoom change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListSubcanvas' meta: false selector: #zoomChanged change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListSubcanvas' meta: false selector: #zoomTo1 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListSubcanvas' meta: false selector: #zoomToLast change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListSubcanvas' meta: true selector: #onList: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListSubcanvas' meta: true selector: #openOnList: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListSubcanvas' meta: true selector: #windowSpec change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListSubcanvas' meta: true selector: #windowSpec4Square change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListSubcanvas' meta: true selector: #windowSpecLeftBottom change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListPanel' meta: false selector: #editorView change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListPanel' meta: false selector: #scoreView change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListPanel' meta: false selector: #textView change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListPanel' meta: true selector: #windowSpec change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIFB01' meta: false selector: #play:on: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractOSCPacket' meta: false selector: #init change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractOSCPacket' meta: false selector: #oscBytes change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractOSCPacket' meta: false selector: #oscSize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractOSCPacket' meta: false selector: #toOSCBytes: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioDuration' meta: false selector: #asMS change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioDuration' meta: false selector: #asMsec change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioDuration' meta: false selector: #asSec change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioDuration' meta: false selector: #asUsec change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioDuration' meta: false selector: #asUseconds change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioDuration' meta: false selector: #mostGeneral change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioDuration' meta: false selector: #printOn0: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioDuration' meta: false selector: #quotientFromInteger: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioDuration' meta: false selector: #species change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioDuration' meta: false selector: #units change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioDuration' meta: true selector: #ddMsgName change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SpeciesTrainingTool' meta: true selector: #addSrcTokens: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SpeciesTrainingTool' meta: true selector: #addSrcTokens:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SpeciesTrainingTool' meta: true selector: #confusionStatsSummaryFor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SpeciesTrainingTool' meta: true selector: #copyPlayList: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SpeciesTrainingTool' meta: true selector: #copyPlayList:in: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SpeciesTrainingTool' meta: true selector: #copySelectionFrom:in:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SpeciesTrainingTool' meta: true selector: #cvsTranslate:toXML: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SpeciesTrainingTool' meta: true selector: #eventStatsFor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SpeciesTrainingTool' meta: true selector: #removeDupFiles:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SpeciesTrainingTool' meta: true selector: #removeDupFiles0:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SpeciesTrainingTool' meta: true selector: #tokenStatsFor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.STreeAccessor' meta: false selector: #childAccessor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.STreeAccessor' meta: false selector: #childrenOf: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.STreeAccessor' meta: false selector: #isTerminal: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.STreeAccessor' meta: false selector: #leavesOf: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.STreeAccessor' meta: false selector: #terminalQuery: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.STreeAccessor' meta: false selector: #treeAccessor change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.STreeAccessor' meta: true selector: #subject:terminalQuery:childAccessor:itemGenerator: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HertzPitch' meta: false selector: #asFracMIDI change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HertzPitch' meta: false selector: #asFracSymbol change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HertzPitch' meta: false selector: #asHertz change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HertzPitch' meta: false selector: #asHz change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HertzPitch' meta: false selector: #asMIDI change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HertzPitch' meta: false selector: #asSymbol change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HertzPitch' meta: false selector: #printOn0: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HertzPitch' meta: false selector: #species change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HertzPitch' meta: false selector: #units change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HertzPitch' meta: true selector: #ddMsgName change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DBLoudness' meta: false selector: #asMIDI change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DBLoudness' meta: false selector: #asRatio change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DBLoudness' meta: false selector: #differenceFromDynamic: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DBLoudness' meta: false selector: #differenceFromVelocity: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DBLoudness' meta: false selector: #positiveDB change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DBLoudness' meta: false selector: #productFromDynamic: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DBLoudness' meta: false selector: #productFromVelocity: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DBLoudness' meta: false selector: #quotientFromDynamic: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DBLoudness' meta: false selector: #quotientFromVelocity: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DBLoudness' meta: false selector: #species change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DBLoudness' meta: false selector: #sumFromDynamic: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DBLoudness' meta: false selector: #units change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DBLoudness' meta: true selector: #ddMsgName change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ConditionalDuration' meta: false selector: #- change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ConditionalDuration' meta: false selector: #* change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ConditionalDuration' meta: false selector: #/ change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ConditionalDuration' meta: false selector: #+ change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ConditionalDuration' meta: false selector: #mostGeneral change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ConditionalDuration' meta: false selector: #species change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ConditionalDuration' meta: false selector: #update:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ConditionalDuration' meta: false selector: #valueAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ConditionalDuration' meta: false selector: #wait change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ConditionalDuration' meta: false selector: #waitUntil: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ConditionalDuration' meta: true selector: #example change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ConditionalDuration' meta: true selector: #exampleWithRands change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ConditionalDuration' meta: true selector: #on:until: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ConditionalDuration' meta: true selector: #randomBetween:and: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ConditionalDuration' meta: true selector: #until: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionController' meta: false selector: #addFunction change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionController' meta: false selector: #addPoint: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionController' meta: false selector: #clearFunction change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionController' meta: false selector: #doInspect change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionController' meta: false selector: #dragPoint: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionController' meta: false selector: #enterFunction change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionController' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionController' meta: false selector: #initializeMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionController' meta: false selector: #model change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionController' meta: false selector: #mouseMovedEvent: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionController' meta: false selector: #redButtonActivity change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionController' meta: false selector: #redraw change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionController' meta: false selector: #rubberBandLinesBetween:and:and: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionController' meta: false selector: #selectAtPoint: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionController' meta: false selector: #selectModel: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionController' meta: false selector: #setAScale change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListEditor' meta: false selector: #displayList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListEditor' meta: false selector: #doDisplay change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListEditor' meta: false selector: #doEdit change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListEditor' meta: false selector: #doFile change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListEditor' meta: false selector: #doInspect change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListEditor' meta: false selector: #doZoom change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListEditor' meta: false selector: #list change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListEditor' meta: false selector: #list: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListEditor' meta: false selector: #moveSelectionTo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListEditor' meta: false selector: #release change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListEditor' meta: false selector: #update:with:from: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListEditor' meta: true selector: #on: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #channels change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #channels: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #close change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #fileFormat change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #fileFormat: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #format change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #mode: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #name change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #name: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #open change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #openForReading change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #rate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #rate: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #readSamples change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #readSamples: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #sampleFormat change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #sampleFormat: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #samples change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #saveSound: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #size change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #size: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #sizeInSamples change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #sound change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: false selector: #sound: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: true selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: true selector: #named: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: true selector: #openFileNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: true selector: #readFileNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: true selector: #readFileNamed:answer: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFile' meta: true selector: #releaseFileIndex: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PField' meta: false selector: #field change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PField' meta: false selector: #field: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PField' meta: false selector: #name change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PField' meta: false selector: #name: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PField' meta: true selector: #field:value: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PField' meta: true selector: #field:value:name: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SEventQueue' meta: false selector: #add: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SEventQueue' meta: false selector: #add:loop: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SEventQueue' meta: false selector: #asOrderedCollection change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SEventQueue' meta: false selector: #detect: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SEventQueue' meta: false selector: #do: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SEventQueue' meta: false selector: #includes: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SEventQueue' meta: false selector: #isEmpty change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SEventQueue' meta: false selector: #itemNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SEventQueue' meta: false selector: #locateSlotFor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SEventQueue' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SEventQueue' meta: false selector: #ready: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SEventQueue' meta: false selector: #removeAllSuchThat: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SEventQueue' meta: false selector: #removeFirst change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SEventQueue' meta: false selector: #size change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SEventQueue' meta: true selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SEventQueue' meta: true selector: #nextRecord change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FFTWInterface' meta: false selector: #fftw_float_to_short: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FFTWInterface' meta: false selector: #fftw_forward_transform change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FFTWInterface' meta: false selector: #fftw_initialize:with:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FFTWInterface' meta: false selector: #fftw_mag_spectrum: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FFTWInterface' meta: false selector: #fftw_phas_spectrum: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FFTWInterface' meta: false selector: #fftw_reverse_transform change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FFTWInterface' meta: false selector: #fftw_short_to_float: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FFTWInterface' meta: true selector: #example change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVoice' meta: false selector: #close change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVoice' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVoice' meta: false selector: #number change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVoice' meta: false selector: #play: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVoice' meta: false selector: #playEvent:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVoice' meta: false selector: #reset change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVoice' meta: true selector: #default change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVoice' meta: true selector: #defaultOutInterface change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVoice' meta: true selector: #flushDefault change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVoice' meta: true selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVoice' meta: true selector: #named:onDevice:channel: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVoice' meta: true selector: #new change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVoice' meta: true selector: #on: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVoice' meta: true selector: #on:channel: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVoice' meta: true selector: #randomExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVoice' meta: true selector: #randomExample2 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVoice' meta: true selector: #randomWalk:pitch:dur:amp: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVoice' meta: true selector: #scaleExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVoice' meta: true selector: #voiceInspect change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Amplitude' meta: true selector: #color change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Amplitude' meta: true selector: #example change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Amplitude' meta: true selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Amplitude' meta: true selector: #initializeGenerality change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Amplitude' meta: true selector: #mostGeneral change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Amplitude' meta: true selector: #propertyName change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Amplitude' meta: true selector: #relativeMember change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Amplitude' meta: true selector: #species change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Amplitude' meta: true selector: #value: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionEvent' meta: false selector: #delta change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionEvent' meta: false selector: #delta: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionEvent' meta: false selector: #function change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionEvent' meta: false selector: #function: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionEvent' meta: false selector: #interval change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionEvent' meta: false selector: #interval: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionEvent' meta: false selector: #nextTime: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionEvent' meta: false selector: #play change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionEvent' meta: false selector: #playOn:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionEvent' meta: false selector: #scheduleAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionEvent' meta: false selector: #value change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionEvent' meta: true selector: #new change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DynamicCloud' meta: false selector: #eventList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DynamicCloud' meta: true selector: #crescendoExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DynamicCloud' meta: true selector: #example1 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DynamicCloud' meta: true selector: #example4 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DynamicCloud' meta: true selector: #focusExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DynamicCloud' meta: true selector: #randomExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TypedOSCMessage' meta: false selector: #argumentsToOSCBytes: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TypedOSCMessage' meta: false selector: #typesToOSC: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TypedOSCMessage' meta: true selector: #changeFreq change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TypedOSCMessage' meta: true selector: #scDecreaseVolume change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TypedOSCMessage' meta: true selector: #scIncreaseVolume change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TypedOSCMessage' meta: true selector: #scRun change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TypedOSCMessage' meta: true selector: #scStop change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TypedOSCMessage' meta: true selector: #start change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFileViewer' meta: false selector: #deleteFile change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFileViewer' meta: false selector: #editFile change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFileViewer' meta: false selector: #loadFile change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFileViewer' meta: false selector: #makeS7 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFileViewer' meta: false selector: #playFile change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFileViewer' meta: false selector: #printBlurbFor:on: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFileViewer' meta: true selector: #isInterestedInFile: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFileViewer' meta: true selector: #tabLabel change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundFileViewer' meta: true selector: #windowSpec change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DynamicSelectionCloud' meta: false selector: #eventList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DynamicSelectionCloud' meta: true selector: #example1 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DynamicSelectionCloud' meta: true selector: #example2 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DynamicSelectionCloud' meta: true selector: #randomExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #again change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #blueButtonActivity change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #copyItem change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #cutItem change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #doInspect change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #dragSelection: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #flattenItems change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #groupItems change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #initializeMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #inspectDisplayList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #inspectEditor change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #inspectModel change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #mouseMovedEvent: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #optionsDialog change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #pasteFromBuffer change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #pasteItem change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #redButtonActivity change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #redButtonPressedAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #redButtonPressedEvent: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #redButtonReleasedEvent: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #redraw change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #redrawView change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #selectAtPoint: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #selectEvent: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #selectFromPoint:toPoint: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #selection change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #selection: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #selectionTracker change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #selectRangeWhile: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #undo change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #ungroupItems change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #yellowButtonActivity0 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #zoom change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #zoomInPoint change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #zoomOutPoint change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: false selector: #zoomTo1 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListController' meta: true selector: #defaultEditMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SuperColliderVoice' meta: false selector: #endLine change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SuperColliderVoice' meta: false selector: #space change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SuperColliderVoice' meta: false selector: #writeFooter change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SuperColliderVoice' meta: false selector: #writeHeader change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SuperColliderVoice' meta: true selector: #defaultPMap change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SuperColliderVoice' meta: true selector: #pMapForPanner change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SuperColliderVoice' meta: true selector: #randomExampleToFileAndEdit change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SuperColliderVoice' meta: true selector: #randomExampleToFileNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NeapolitanMinor' meta: true selector: #intervalList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MSecondDuration' meta: false selector: #asMseconds change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MSecondDuration' meta: false selector: #asSeconds change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MSecondDuration' meta: false selector: #asUseconds change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MSecondDuration' meta: false selector: #units change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MSecondDuration' meta: true selector: #ddMsgName change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChromaticInterval' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChromaticInterval' meta: true selector: #examples change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ChromaticInterval' meta: true selector: #semiTones: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HauerSteffensView' meta: false selector: #clef:at:bottom:form: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HauerSteffensView' meta: false selector: #drawStaff change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HauerSteffensView' meta: false selector: #initForm change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HauerSteffensView' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HauerSteffensView' meta: false selector: #zoom: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HauerSteffensView' meta: true selector: #defaultCacheExtent change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HauerSteffensView' meta: true selector: #inset change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HauerSteffensView' meta: true selector: #label change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HauerSteffensView' meta: true selector: #randomExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HauerSteffensView' meta: true selector: #randomSWSSExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Swell' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Swell' meta: true selector: #example change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassFlat' meta: false selector: #alterate:toReach: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassFlat' meta: false selector: #alterateBelow:toReach: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassFlat' meta: false selector: #closestEnharmonic change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassFlat' meta: false selector: #flat change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassFlat' meta: false selector: #flat: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassFlat' meta: false selector: #isFlat change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassFlat' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassFlat' meta: false selector: #representBinaryOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassFlat' meta: false selector: #semiToneCount change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassFlat' meta: false selector: #semiTonesToNatural change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassFlat' meta: false selector: #sharp change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassFlat' meta: false selector: #storeOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MelodicMinorScale' meta: false selector: #costForPitch: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MelodicMinorScale' meta: false selector: #enharmonicScale change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MelodicMinorScale' meta: true selector: #allIntervals change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MelodicMinorScale' meta: true selector: #intervalList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Timer' meta: false selector: #accumulator change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Timer' meta: false selector: #accumulator: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Timer' meta: false selector: #interval change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Timer' meta: false selector: #interval: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Timer' meta: false selector: #lastUpdate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Timer' meta: false selector: #lastUpdate: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Timer' meta: false selector: #name change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Timer' meta: false selector: #name: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Timer' meta: false selector: #play change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Timer' meta: false selector: #reset change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Timer' meta: false selector: #restart change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Timer' meta: false selector: #running change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Timer' meta: false selector: #running: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Timer' meta: false selector: #scheduleAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Timer' meta: false selector: #start change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Timer' meta: false selector: #startTime change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Timer' meta: false selector: #startTime: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Timer' meta: false selector: #stop change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FourierSummation' meta: false selector: #add: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FourierSummation' meta: false selector: #at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FourierSummation' meta: false selector: #computeCurve change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FourierSummation' meta: false selector: #computeValueAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FourierSummation' meta: false selector: #initialize: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FourierSummation' meta: true selector: #default change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FourierSummation' meta: true selector: #fourierExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FourierSummation' meta: true selector: #fourierViewExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FourierSummation' meta: true selector: #from: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SelectionCloud' meta: false selector: #eventList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SelectionCloud' meta: false selector: #eventListWithDensityFunction change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SelectionCloud' meta: true selector: #example1 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SelectionCloud' meta: true selector: #exampleRand change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SelectionCloud' meta: true selector: #randomExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EditorModel' meta: false selector: #copyBuffer change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EditorModel' meta: false selector: #copyBuffer: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EditorModel' meta: false selector: #select: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EditorModel' meta: false selector: #selection change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EditorModel' meta: false selector: #view: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Core.Association' meta: false selector: #, change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Core.Association' meta: false selector: #isAssociation change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassSharp' meta: false selector: #alterate:toReach: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassSharp' meta: false selector: #alterateBelow:toReach: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassSharp' meta: false selector: #closestEnharmonic change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassSharp' meta: false selector: #flat change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassSharp' meta: false selector: #isSharp change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassSharp' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassSharp' meta: false selector: #representBinaryOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassSharp' meta: false selector: #semiToneCount change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassSharp' meta: false selector: #semiTonesToNatural change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassSharp' meta: false selector: #sharp change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassSharp' meta: false selector: #sharp: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassSharp' meta: false selector: #storeOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TagSetTool' meta: false selector: #childrenFor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TagSetTool' meta: false selector: #childrenOf: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TagSetTool' meta: false selector: #nodeSelected change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TagSetTool' meta: false selector: #postOpenWith: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #= change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #allNotes change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #arpeggioFrom:poly:interval: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #ascendingFromOctave: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #asPitchesInOctave: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #chordFromNotes: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #closestPitchClassTo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #computeNotes change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #containsAllOfTheseNotes: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #containsNote: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #costForPitch: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #decendingFromOctave: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #degreDeAccord: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #degreeOfNote: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #diatonicNotesFrom:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #enharmonicScale change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #flatNotesInSignature change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #following:by: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #generateChordsPoly: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #generateChordsPoly:inOctave: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #hash change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #indexDe: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #intervalList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #isMajor change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #isMinor change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #isValid change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #leadingNote change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #noteAfter: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #noteBefore: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #notes change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #numberOfFlats change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #numberOfSharps change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #octave: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #pitchClassFor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #reverseNotes change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #root change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #root: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #scaleToneTriads change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #sharpNotesInSignature change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #storeOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #tonic change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: false selector: #transposeOf: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: true selector: #askScale change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: true selector: #example change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: true selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: true selector: #intervalList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: true selector: #root: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: true selector: #standardScales change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Scale' meta: true selector: #warn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCByteConvertor' meta: false selector: #contents change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCByteConvertor' meta: false selector: #init change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCByteConvertor' meta: false selector: #next:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCByteConvertor' meta: false selector: #nextPut: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCByteConvertor' meta: false selector: #nextPutAll: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCByteConvertor' meta: false selector: #nextPutType: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCByteConvertor' meta: false selector: #position change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCByteConvertor' meta: true selector: #new change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassAltered' meta: false selector: #following change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassAltered' meta: false selector: #isNatural change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassAltered' meta: false selector: #name change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassAltered' meta: false selector: #natural change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassAltered' meta: false selector: #natural: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassAltered' meta: false selector: #nom change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassAltered' meta: false selector: #preceding change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListTreeItem' meta: false selector: #children change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListTreeItem' meta: false selector: #hasChildren change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListTreeItem' meta: false selector: #lists: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DiatonicInterval' meta: false selector: #ascending: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DiatonicInterval' meta: false selector: #bottomIfTopIs: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DiatonicInterval' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DiatonicInterval' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DiatonicInterval' meta: false selector: #topIfBottomIs: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DiatonicInterval' meta: true selector: #ascending change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DiatonicInterval' meta: true selector: #descending change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DiatonicInterval' meta: true selector: #new change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Length' meta: false selector: #species change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Length' meta: true selector: #example change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LibSndFileInterface' meta: false selector: #lsf_close: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LibSndFileInterface' meta: false selector: #lsf_create:with:with:with:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LibSndFileInterface' meta: false selector: #lsf_get_channels: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LibSndFileInterface' meta: false selector: #lsf_get_format: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LibSndFileInterface' meta: false selector: #lsf_get_frames: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LibSndFileInterface' meta: false selector: #lsf_get_rate: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LibSndFileInterface' meta: false selector: #lsf_open:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LibSndFileInterface' meta: false selector: #lsf_read_Fsamples:with:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LibSndFileInterface' meta: false selector: #lsf_read_Isamples:with:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LibSndFileInterface' meta: false selector: #lsf_seek:with:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LibSndFileInterface' meta: false selector: #lsf_write_Fsamples:with:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LibSndFileInterface' meta: false selector: #lsf_write_Isamples:with:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LibSndFileInterface' meta: true selector: #const: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LibSndFileInterface' meta: true selector: #example1: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LibSndFileInterface' meta: true selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #addClient: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #addClient:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #addClient:at:loop: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #addClient:in: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #addClient:in:loop: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #addClient:loop: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #addTimer: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #addTimer:interval: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #callNextAppointment change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #clientNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #clients change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #clock change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #delay change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #delay: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #dontWait change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #flush change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #interrupt change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #isRunning change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #processEvent:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #release change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #removeClient: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #removeClientNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #removeTimer: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #removeTimerNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #resetClock change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #run change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #run: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #timerNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #timers change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #update: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: false selector: #wait change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: true selector: #addClient: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: true selector: #addClient:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: true selector: #addClient:in: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: true selector: #addClient:in:loop: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: true selector: #addTimer: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: true selector: #addTimer:interval: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: true selector: #clients change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: true selector: #clock change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: true selector: #default change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: true selector: #flush change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: true selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: true selector: #instance change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: true selector: #interrupt change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: true selector: #isRunning change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: true selector: #release change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: true selector: #resetClock change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: true selector: #run change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: true selector: #scheduleExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: true selector: #scheduleExample2 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: true selector: #timerExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventScheduler' meta: true selector: #timers change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceLayoutManager' meta: false selector: #addItem:atNode:in: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceLayoutManager' meta: false selector: #displayPointFor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceLayoutManager' meta: false selector: #timeOffset: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceLayoutManager' meta: false selector: #timeScale: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: false selector: #- change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: false selector: #, change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: false selector: #* change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: false selector: #/ change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: false selector: #+ change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: false selector: #< change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: false selector: #= change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: false selector: #adaptToNumber:andSend: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: false selector: #coerceTo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: false selector: #ddMsgName change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: false selector: #hash change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: false selector: #isImmediate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: false selector: #isMusicMagnitude change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: false selector: #msec change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: false selector: #printOn:parens: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: false selector: #printString change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: false selector: #printStringParens: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: false selector: #printValue change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: false selector: #species change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: false selector: #storeOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: false selector: #units change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: false selector: #usec change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: false selector: #value change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: false selector: #value: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: true selector: #color change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: true selector: #propertyName change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: true selector: #relativeMember change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicMagnitude' meta: true selector: #value: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PositionTimeLayoutManager' meta: false selector: #displayPointFor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Triad' meta: false selector: #notes: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Triad' meta: false selector: #type change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Triad' meta: false selector: #type: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NumericalMagnitude' meta: false selector: #adaptInteger: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NumericalMagnitude' meta: false selector: #adaptToInteger change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceController' meta: false selector: #doInspect change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceController' meta: false selector: #group change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceController' meta: false selector: #initializeMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceController' meta: false selector: #pan change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceController' meta: false selector: #play change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceController' meta: false selector: #readList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceController' meta: false selector: #selectFromPoint:toPoint: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceController' meta: false selector: #storeList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceController' meta: true selector: #defaultEditMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayItem' meta: false selector: #asVisualComponent change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayItem' meta: false selector: #color change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayItem' meta: false selector: #color: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayItem' meta: false selector: #computePreferredBounds change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayItem' meta: false selector: #container: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayItem' meta: false selector: #copy change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayItem' meta: false selector: #displayOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayItem' meta: false selector: #displayPostScriptOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayItem' meta: false selector: #extent change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayItem' meta: false selector: #extent: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayItem' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayItem' meta: false selector: #isDisplayItem change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayItem' meta: false selector: #offset change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayItem' meta: false selector: #offset: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayItem' meta: false selector: #preferredBounds change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayItem' meta: false selector: #preferredExtent change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayItem' meta: false selector: #printCompleteOn:depth: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayItem' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayItem' meta: false selector: #scaleBy: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayItem' meta: false selector: #scaledBy: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayItem' meta: false selector: #translateBy: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayItem' meta: true selector: #model:offset: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayItem' meta: true selector: #offset: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #bounds: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #defaultControllerClass change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #displayMarkersOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #displayOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #displayOnGC: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #displayPosition: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #eraseMarkerAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #invalidate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #markerColor change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #preferredBounds change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #redraw change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #sampleForX: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #scale change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #scale: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #scrollableExtent change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #selectBetween:and: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #showMarkerAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #sound change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #sound: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #step change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #step: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #text change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #viewExtent change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #visibleExtent change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: false selector: #xForSample: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: true selector: #componentOnSound: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: true selector: #componentOnSoundNoFrills: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: true selector: #example1 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: true selector: #example2 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: true selector: #exampleLong change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: true selector: #exampleRamp change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: true selector: #openOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundView' meta: true selector: #soundViewOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionGraph' meta: false selector: #at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionGraph' meta: false selector: #operandL: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionGraph' meta: false selector: #operandR: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionGraph' meta: false selector: #operation change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionGraph' meta: false selector: #operation: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionGraph' meta: true selector: #example change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.FunctionGraph' meta: true selector: #opL:opR:operation: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NeapolitanMajor' meta: true selector: #intervalList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ExtDynamicSelectionCloud' meta: false selector: #eventList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ExtDynamicSelectionCloud' meta: false selector: #list: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ExtDynamicSelectionCloud' meta: true selector: #chordExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Core.Object' meta: false selector: #isAssociation change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HungarianMinor' meta: true selector: #exemple change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HungarianMinor' meta: true selector: #intervalList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #background: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #backgroundColor change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #bounds: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #cache: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #component change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #defaultControllerClass change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #displayList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #displayList: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #displayOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #displaySelectionOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #foregroundColor change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #initializeCache change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #initializeWithGrid:color: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #inset: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #invalidate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #list change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #pageOffset change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #pageOffset: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #pixmap: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #preferredBounds change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #release change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #scrollableExtent change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #setModel: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #transformPoint: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #visibleExtent change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: false selector: #zoom: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: true selector: #backgroundColor change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: true selector: #classListExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: true selector: #classTreeExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: true selector: #colorClassListExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: true selector: #componentOnList: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: true selector: #componentOnList:withGrid:inColor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: true selector: #constants change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: true selector: #constants: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: true selector: #defaultCacheExtent change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: true selector: #exampleHierarchical change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: true selector: #foregroundColor change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: true selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: true selector: #inset change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: true selector: #on: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: true selector: #open4SquareOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListView' meta: true selector: #openOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #- change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #* change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #/ change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #+ change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #add: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #at:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #atX: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #averagedTo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #data change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #data: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #dataClass change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #detect:ifNone: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #do: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #domain change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #domain: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #duration change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #edit change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #edit: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #freeData change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #hasPointNear: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #indexOfPointNearestX: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #initialize: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #isEmpty change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #maxTo:win: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #nextXMoreThan:from: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #nextXMoreThan:from:step: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #offset: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #pointAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #pointAt:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #points change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #range change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #range: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #realPointAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #sampleAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #sampledTo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #scale change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #scale: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #selection change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #size change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #smoothed change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #storeOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #updateRange change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: false selector: #updateSelector change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: true selector: #averagedFunctionFileExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: true selector: #default change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: true selector: #defaultSize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: true selector: #exponentialADSR1 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: true selector: #exponentialADSR2 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: true selector: #fileExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: true selector: #from: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: true selector: #fromFile: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: true selector: #functionFileExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: true selector: #functionPlayExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: true selector: #functionViewExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: true selector: #linearADSR1 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: true selector: #linearADSR2 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: true selector: #maxedFunctionFileExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: true selector: #new change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: true selector: #ofSize: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: true selector: #randomOfSize:from:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: true selector: #randomViewExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: true selector: #randomViewExample2 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: true selector: #randomWalkSize:from:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: true selector: #readFloatsFrom: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: true selector: #spline change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Function' meta: true selector: #sumOfSines change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Cluster' meta: false selector: #eventList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Cluster' meta: true selector: #dur:list:ampl: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Cluster' meta: true selector: #dur:list:ampl:voice: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Cluster' meta: true selector: #dur:pitchSet:ampl:voice: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Cluster' meta: true selector: #example1 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Cluster' meta: true selector: #example2 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NominalMagnitude' meta: true selector: #nameMap change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CsoundVoice' meta: false selector: #writeFooter change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CsoundVoice' meta: false selector: #writeHeader change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CsoundVoice' meta: true selector: #defaultPMap change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CsoundVoice' meta: true selector: #randomExampleToFileAndEdit change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CsoundVoice' meta: true selector: #randomExampleToFileNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEvent' meta: false selector: #sound change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEvent' meta: false selector: #sound: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEvent' meta: true selector: #example change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEvent' meta: true selector: #exampleLoops change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEvent' meta: true selector: #sound: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCFrame' meta: false selector: #coefficients change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCFrame' meta: false selector: #coefficients: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCFrame' meta: false selector: #err change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCFrame' meta: false selector: #err: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCFrame' meta: false selector: #npoles change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCFrame' meta: false selector: #npoles: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCFrame' meta: false selector: #pitch change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCFrame' meta: false selector: #pitch: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCFrame' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCFrame' meta: false selector: #rmsO change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCFrame' meta: false selector: #rmsO: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCFrame' meta: false selector: #rmsR change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCFrame' meta: false selector: #rmsR: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCFrame' meta: false selector: #srate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCFrame' meta: false selector: #srate: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SecondDuration' meta: false selector: #adaptToFloat change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SecondDuration' meta: false selector: #asBeat change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SecondDuration' meta: false selector: #asMS change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SecondDuration' meta: false selector: #asMsec change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SecondDuration' meta: false selector: #asMseconds change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SecondDuration' meta: false selector: #asRatio change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SecondDuration' meta: false selector: #asSec change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SecondDuration' meta: false selector: #asSeconds change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SecondDuration' meta: false selector: #asUsec change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SecondDuration' meta: false selector: #asUseconds change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SecondDuration' meta: false selector: #mostGeneral change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SecondDuration' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SecondDuration' meta: false selector: #species change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SecondDuration' meta: false selector: #units change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SecondDuration' meta: false selector: #wait change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SecondDuration' meta: true selector: #ddMsgName change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Roll' meta: false selector: #duration change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Roll' meta: false selector: #eventList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Roll' meta: false selector: #length:rhythm:note: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Roll' meta: false selector: #number:rhythm:note: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Roll' meta: true selector: #length:rhythm:note: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Roll' meta: true selector: #number:rhythm:note: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Roll' meta: true selector: #rollExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DoubleHarmonic' meta: true selector: #intervalList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventAssociation' meta: false selector: #, change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventAssociation' meta: false selector: #< change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventAssociation' meta: false selector: #= change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventAssociation' meta: false selector: #event change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventAssociation' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventAssociation' meta: false selector: #start change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventAssociation' meta: false selector: #start: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventAssociation' meta: false selector: #stop change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventAssociation' meta: false selector: #time change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Chord' meta: false selector: #arity: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Chord' meta: false selector: #duration: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Chord' meta: false selector: #eventList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Chord' meta: false selector: #inversion: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Chord' meta: false selector: #majorTetrad change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Chord' meta: false selector: #majorTriad change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Chord' meta: false selector: #minorTetrad change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Chord' meta: false selector: #minorTriad change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Chord' meta: false selector: #root: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Chord' meta: false selector: #type: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Chord' meta: true selector: #example change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Chord' meta: true selector: #majorTetradOn:inversion: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Chord' meta: true selector: #majorTriadOn:inversion: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Chord' meta: true selector: #minorTetradOn:inversion: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Chord' meta: true selector: #minorTriadOn:inversion: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundController' meta: false selector: #clearMarkers: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundController' meta: false selector: #copy change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundController' meta: false selector: #cut change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundController' meta: false selector: #doInspect change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundController' meta: false selector: #exitEvent: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundController' meta: false selector: #fadeIn change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundController' meta: false selector: #fadeOut change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundController' meta: false selector: #file: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundController' meta: false selector: #inspect: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundController' meta: false selector: #menu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundController' meta: false selector: #mouseMovedEvent: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundController' meta: false selector: #newCopy: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundController' meta: false selector: #paste change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundController' meta: false selector: #play: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundController' meta: false selector: #playAll change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundController' meta: false selector: #playSelection change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundController' meta: false selector: #redButtonActivity change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundController' meta: false selector: #redButtonPressedEvent: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundController' meta: false selector: #reset change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundController' meta: false selector: #save change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundController' meta: false selector: #selectMarkerAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundController' meta: false selector: #setHscale change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundController' meta: false selector: #setVscale change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundController' meta: false selector: #spawn change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicPitch' meta: false selector: #- change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicPitch' meta: false selector: #+ change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicPitch' meta: false selector: #accidental change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicPitch' meta: false selector: #asFracMIDI change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicPitch' meta: false selector: #asHertz change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicPitch' meta: false selector: #asHz change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicPitch' meta: false selector: #asMIDI change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicPitch' meta: false selector: #asSymbol change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicPitch' meta: false selector: #fracPitch change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicPitch' meta: false selector: #fracPitch: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicPitch' meta: false selector: #mostGeneral change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicPitch' meta: false selector: #printOn0: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicPitch' meta: false selector: #species change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicPitch' meta: false selector: #transposeBy: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicPitch' meta: false selector: #units change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicPitch' meta: true selector: #ddMsgName change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicPitch' meta: true selector: #fromFracMIDI: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicPitch' meta: true selector: #fromMIDI: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicPitch' meta: true selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #cachedPixmap change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #clefColor change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #clefColor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #clefForm change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #clefWidth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #defaultControllerClass change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #displayOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #displayOnImage change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #formXFromTime: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #generateItemFor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #headColor change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #headColor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #highlightFrom:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #highlightTime: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #itemFor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #layoutManager change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #reallyDisplayOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #timeFromX: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #update: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #xColor change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #xColor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #xScale change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #xScale: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #yColor change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #yColor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: false selector: #zoom: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: true selector: #defaultCacheExtent change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: true selector: #inset change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: true selector: #openOnEventList: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.TimeSequenceView' meta: true selector: #randomExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.IndentedListLayoutManager' meta: false selector: #displayPositionFor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.IndentedListLayoutManager' meta: false selector: #displayPositionFor1: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.IndentedListLayoutManager' meta: true selector: #colorListExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.IndentedListLayoutManager' meta: true selector: #listExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchTimeLayoutManager' meta: false selector: #displayPointFor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchTimeLayoutManager' meta: false selector: #pitchOffset: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchTimeLayoutManager' meta: false selector: #pitchScale: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDump' meta: false selector: #eventList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDump' meta: false selector: #eventList: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDump' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDump' meta: false selector: #live: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDump' meta: false selector: #update:with:from: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDump' meta: true selector: #example change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDump' meta: true selector: #exampleEditor change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDump' meta: true selector: #exampleList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDump' meta: true selector: #new change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCMessage' meta: false selector: #addressToOSCBytes: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCMessage' meta: false selector: #argumentsToOSCBytes: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCMessage' meta: false selector: #initAddress:arguments: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCMessage' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCMessage' meta: false selector: #toOSCBytes: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCMessage' meta: false selector: #typesToOSC: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCMessage' meta: true selector: #example1 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCMessage' meta: true selector: #example2 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCMessage' meta: true selector: #example3 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCMessage' meta: true selector: #for: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCMessage' meta: true selector: #for:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalDescendingInterval' meta: false selector: #ascending change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalDescendingInterval' meta: false selector: #bottomIfTopIs: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalDescendingInterval' meta: false selector: #descending change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalDescendingInterval' meta: false selector: #isAscending change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalDescendingInterval' meta: false selector: #isDescending change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalDescendingInterval' meta: false selector: #topIfBottomIs: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalDescendingInterval' meta: true selector: #example change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ListOfNotes' meta: false selector: #asTriad change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ListOfNotes' meta: false selector: #barycenter change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ListOfNotes' meta: false selector: #cipherIn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ListOfNotes' meta: false selector: #highest change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ListOfNotes' meta: false selector: #identityIndexOf: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ListOfNotes' meta: false selector: #lowest change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ListOfNotes' meta: false selector: #nextIdentityIndexOf:from:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ListOfNotes' meta: true selector: #example change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ListOfNotes' meta: true selector: #from: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #clearMarkers change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #copy change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #cut change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #file change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #list change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #mark: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #markChanged: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #markers change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #markers: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #newCopy change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #play change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #playAll change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #playSelection change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #reinitialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #select: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #selectedSound change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #selection1 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #selection1: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #selection2 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #selection2: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #selectionStart change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #selectionStop change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #setModel: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #setSelection: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #size change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #sound change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #sound: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #spawn change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: false selector: #view: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundEditor' meta: true selector: #new change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListTracker' meta: false selector: #mouseMovedEvent: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListTracker' meta: false selector: #redButtonPressedEvent: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayListTracker' meta: false selector: #trackSelectionFor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCView' meta: false selector: #displayOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCView' meta: false selector: #draw:into:color:scale:dots: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCView' meta: false selector: #editor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #allocateData change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #at:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #autoCorrelationBetween:and:length: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #average change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #channels change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #channels: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #computeEnvelope: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #computePeakEnvelope change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #computeRMSEnvelope change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #copy change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #copyAllButSamples change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #copyFrom:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #cueNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #cutFrom:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #do: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #edit change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #envelope change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #envelope: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #errorBetween:and: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #extractChannel:into: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #fadeInOver: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #fadeOutOver: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #file change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #firstIndex change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #firstIndex: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #floatSampleAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #floatSampleAt:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #floatsFrom:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #format change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #format: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #frameRate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #from:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #fromSample:toSample: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #getData change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #hasFile change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #hasGaps change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #interpolatedWindowAt:width: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #intSampleAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #intSampleAt:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #isComposite change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #isEmpty change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #isVirtual change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #longFormat change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #mapSampleIndex: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #max change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #mergeChannel:from: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #name change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #name: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #nextBufferInto:frames:channels:format:startingAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #offsetBy: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #offsetFrom:to:by: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #paste:from:to:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #peakEnvelope change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #peaksFrom:to:into: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #play change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #printSamples change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #printSamplesOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #privateSampleAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #privateSampleAt:in:bigEndian: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #privateSampleAt:in:put:bigEndian: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #privateSampleAt:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #rate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #rate: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #readEnvelope: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #readSamplesFrom: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #realSound change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #rmsEnvelope change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #rmsFrom:to:into: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #rmsTo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #sampleAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #sampleAt:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #sampledFrom:to:into: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #sampledTo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #sampleMaxFrom:to:into: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #sampleRate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #samples change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #samples: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #samplesInMemory change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #samplesInMemory: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #sampleSize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #scaleBy: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #scaledBy: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #scaledByEnvelopeArray: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #scaledByFunction: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #scaledFrom:to:by: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #scaledFrom:to:byEnvelopeArray: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #scaledFrom:to:byFunction: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #scaleFrom:to:by: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #scaleSampleIndex: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #size change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #size: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #sizeInBytes change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #sizeInFrames change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #storeOnFileNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: false selector: #writeEnvelope: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #constantOfDur:value:rate:chans: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #default change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #duration:named:rate:channels:format: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #duration:rate:channels: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #duration:rate:channels:format: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #expSweepDur:rate:from:to:chans: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #formatSymbol change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #fromData:named:rate:channels:format: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #fromData:rate:channels:format: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #fromDblData:rate:channels:size: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #headerFromFile: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #immediateInspect change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #impulseOfDur:width:rate:chans: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #linearSweepDur:rate:from:to:chans: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #maxSample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #minSample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #named:size:format: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #named:size:rate:channels:format: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #named:size:rate:channels:format:data: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #pulseTrainDur:rate:freq:width:chans: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #pulseTrainDur:rate:freq:width:chans:zero: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #rampDur:rate:chans: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #rmsViewExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #sawtooth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #sawtoothDur:rate:freq:chans: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #sineDur:rate:freq:chans: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #size:format:channels: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #size:rate:channels: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #size:rate:channels:format: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #size:rate:format:channels: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #squareDur:rate:freq:chans: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #sweepDur:rate:from:to:chans: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #sweepExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SampledSound' meta: true selector: #sweepView change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #allNotesOff change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #allNotesOffVerbose change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #close change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #controlChange:controller:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #eventsAvailable change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #get: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #hasBuffer change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #hasClock change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #hasControllerCache change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #hasDurs change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #input change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #isActive change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #nextEventInto: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #nextMessage change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #open change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #openInput change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #openInput: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #openOutput change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #openOutput: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #pitchBend:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #play:dur:amp:voice: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #play:pitch:dur:amp:voice: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #playOff:pitch:amp:voice: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #playOn:pitch:amp:voice: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #programChange:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #put:length: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #readController: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #readControllersFrom:to:into: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #reader change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #readLoop change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #release change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #reset change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #resetInput change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #startControllerCaching change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #startMIDIEcho change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #startMIDIInput change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #stopControllerCaching change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #stopMIDIEcho change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #stopMIDIInput change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: false selector: #sysex: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #allNotesOff change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #cleanUp change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #concreteClass change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #dumpExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #examples change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #functionExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #initializeData change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #initializeMIDITables change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #scaleFrom:to:in: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #setAllInstrumentsTo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #setEnsemble: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #setEnsembleInOrder: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #setupDefaultGeneralMIDI change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #setupOrgan change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #setupTunedPercussion change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #setupWindOrchestra change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #showInput change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #testAllNotesOff change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #testANote change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #testARandomNote change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #testBend change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #testControlContinuous change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #testControllerCaching change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #testControllerCaching2 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #testControllerCachingFrom:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #testControllerRecording change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #testInput change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #testInputStop change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #testInspect change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #testMouseMIDI change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #testNoteOnOff change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #testOpenClose change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #testOutput change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #testProgramChange change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #testRandomPlayHighLevel:dur: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #testRandomPlayLowLevel:dur: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #testRollLowLevel:dur: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIPort' meta: true selector: #testSysex change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassDoubleSharp' meta: false selector: #alterate:toReach: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassDoubleSharp' meta: false selector: #alterateBelow:toReach: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassDoubleSharp' meta: false selector: #closestEnharmonic change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassDoubleSharp' meta: false selector: #flat change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassDoubleSharp' meta: false selector: #isDoubleSharp change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassDoubleSharp' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassDoubleSharp' meta: false selector: #representBinaryOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassDoubleSharp' meta: false selector: #semiToneCount change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassDoubleSharp' meta: false selector: #semiTonesToNatural change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassDoubleSharp' meta: false selector: #sharp change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassDoubleSharp' meta: false selector: #storeOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVelocity' meta: false selector: #asDB change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVelocity' meta: false selector: #asMIDI change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVelocity' meta: false selector: #asRatio change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVelocity' meta: false selector: #asSymbol change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVelocity' meta: false selector: #mostGeneral change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVelocity' meta: false selector: #printOn0: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVelocity' meta: false selector: #species change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVelocity' meta: false selector: #units change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVelocity' meta: false selector: #value: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVelocity' meta: true selector: #ddMsgName change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIVelocity' meta: true selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CompositeSound' meta: false selector: #isComposite change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CompositeSound' meta: false selector: #on: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CompositeSound' meta: false selector: #paste:from:to:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CompositeSound' meta: false selector: #rippleUpFrom:adding: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CompositeSound' meta: false selector: #sampleAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CompositeSound' meta: true selector: #exampleView change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CompositeSound' meta: true selector: #on:paste:from:to:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #, change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #= change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #at:ifAbsent: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #at:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #date change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #date: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #display:field:on: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #displayField:on: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #doesNotUnderstand: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #hasProperty: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #inspect change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #isEvent change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #isSound change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #name change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #open change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #propCheck change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #properties change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #release change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #respondsTo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #scheduleOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #species change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #storeOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #templateFields change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #version change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: false selector: #version: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: true selector: #eventInspectExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AbstractEvent' meta: true selector: #example change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.USecondDuration' meta: false selector: #asMseconds change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.USecondDuration' meta: false selector: #asSeconds change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.USecondDuration' meta: false selector: #asUseconds change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.USecondDuration' meta: false selector: #units change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PhraseView' meta: false selector: #generateItemFor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PhraseView' meta: false selector: #itemFor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PhraseView' meta: false selector: #itemFor0: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PhraseView' meta: true selector: #example change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.IndentedTreeLayoutManager' meta: false selector: #addItem:atNode:under:in: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.IndentedTreeLayoutManager' meta: false selector: #generateDisplayList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.IndentedTreeLayoutManager' meta: true selector: #listExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCBundle' meta: false selector: #init: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCBundle' meta: false selector: #init:time: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCBundle' meta: false selector: #timeTagToOSCBytes: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCBundle' meta: false selector: #toOSCBytes: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCBundle' meta: true selector: #asNTPMilliseconds: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCBundle' meta: true selector: #asSecondsSince1900: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCBundle' meta: true selector: #example1 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCBundle' meta: true selector: #example2 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCBundle' meta: true selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCBundle' meta: true selector: #timestampToOSC: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCBundle' meta: true selector: #with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCBundle' meta: true selector: #with:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayRectangle' meta: false selector: #displayOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayRectangle' meta: false selector: #displayPostScriptOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayRectangle' meta: false selector: #fill: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayRectangle' meta: false selector: #stroke: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayRectangle' meta: true selector: #rectangleExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Duration' meta: true selector: #color change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Duration' meta: true selector: #example change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Duration' meta: true selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Duration' meta: true selector: #initializeGeneralities change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Duration' meta: true selector: #mostGeneral change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Duration' meta: true selector: #propertyName change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Duration' meta: true selector: #relativeMember change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Duration' meta: true selector: #species change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Duration' meta: true selector: #value: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MajorScale' meta: false selector: #costForPitch: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MajorScale' meta: false selector: #enharmonicScale change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MajorScale' meta: true selector: #allIntervals change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MajorScale' meta: true selector: #intervalList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundCanvas' meta: false selector: #container: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundCanvas' meta: false selector: #createSoundView change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundCanvas' meta: false selector: #flushCoordinateCaches change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundCanvas' meta: false selector: #hZoom change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundCanvas' meta: false selector: #preferredBounds change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundCanvas' meta: false selector: #setComponent: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundCanvas' meta: false selector: #vZoom change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundCanvas' meta: false selector: #zoomToZero change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundCanvas' meta: true selector: #windowSpec change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMIDIPort' meta: false selector: #close change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMIDIPort' meta: false selector: #close: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMIDIPort' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMIDIPort' meta: false selector: #isActive change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMIDIPort' meta: false selector: #open change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMIDIPort' meta: false selector: #openInput: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMIDIPort' meta: false selector: #openOutput: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMIDIPort' meta: false selector: #playOff:amp:voice: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMIDIPort' meta: false selector: #playOff:pitch:amp:voice: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMIDIPort' meta: false selector: #playOn:amp:voice: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMIDIPort' meta: false selector: #playOn:pitch:amp:voice: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMIDIPort' meta: false selector: #put:data:length: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMIDIPort' meta: false selector: #put:length: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMIDIPort' meta: false selector: #readControllersFrom:to:into: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMIDIPort' meta: false selector: #readLoop change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMIDIPort' meta: false selector: #release change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMIDIPort' meta: false selector: #startControllerCaching change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMIDIPort' meta: false selector: #stopControllerCaching change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMIDIPort' meta: false selector: #terminate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMIDIPort' meta: true selector: #dump change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMIDIPort' meta: true selector: #initializeData change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMIDIPort' meta: true selector: #testANote change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventModifier' meta: false selector: #applyTo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventModifier' meta: false selector: #function change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventModifier' meta: false selector: #function: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventModifier' meta: false selector: #index change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventModifier' meta: false selector: #index: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventModifier' meta: false selector: #scale change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventModifier' meta: false selector: #scale: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventModifier' meta: false selector: #selector change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventModifier' meta: false selector: #selector: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventModifier' meta: false selector: #start change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventModifier' meta: false selector: #start: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventModifier' meta: false selector: #stop change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventModifier' meta: false selector: #stop: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventModifier' meta: false selector: #valueIn:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventModifier' meta: true selector: #function: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventModifier' meta: true selector: #new change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Signature' meta: false selector: #alterate: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Signature' meta: false selector: #flats change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Signature' meta: false selector: #flatsInRightOrder change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Signature' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Signature' meta: false selector: #isEmpty change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Signature' meta: false selector: #isLegal change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Signature' meta: false selector: #nbFlats: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Signature' meta: false selector: #nbSharps: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Signature' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Signature' meta: false selector: #reOrderSharpsAndFlats change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Signature' meta: false selector: #sharps change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Signature' meta: false selector: #sharps:flats: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Signature' meta: false selector: #sharpsInRightOrder change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Signature' meta: false selector: #storeOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Signature' meta: false selector: #tonality change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Signature' meta: true selector: #choseSignature change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Signature' meta: true selector: #example change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Signature' meta: true selector: #example2 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Signature' meta: true selector: #example3 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Signature' meta: true selector: #example4 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Signature' meta: true selector: #fromTonality: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Signature' meta: true selector: #new change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Signature' meta: true selector: #sharps:flats: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCEditor' meta: false selector: #closeWindow change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCEditor' meta: false selector: #overwritePitch change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCEditor' meta: false selector: #postBuildWith: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCEditor' meta: false selector: #redraw change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCEditor' meta: false selector: #save change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCEditor' meta: false selector: #showPitch change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCEditor' meta: false selector: #showResid change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCEditor' meta: false selector: #showRMS change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCEditor' meta: false selector: #showRunning change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCEditor' meta: false selector: #showSmoothed change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCEditor' meta: false selector: #showSmoothed2 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCEditor' meta: false selector: #sound: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCEditor' meta: false selector: #theLPCView change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCEditor' meta: true selector: #openOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LPCEditor' meta: true selector: #windowSpec change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #addDir:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #audiofileInsertsToUpdate:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #categoryList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #collectGenreHistogramsStartingAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #compareFileLists:and:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #convertAFInserts: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #convertEtDrScore: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #createS7: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #dataDir change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #defaultMIDIIn change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #defaultMIDIIn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #defaultMIDIOut change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #defaultMIDIOut: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #defaultOSCHost change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #defaultOSCHost: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #defaultOSCPort change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #defaultOSCPort: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #dropColumn1From:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #dropColumnsFrom:to:drop: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #dropColumnsFrom2:to:drop: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #dropTo2ColumnsFrom:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #dropToNumColumnsFrom:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #exploreRecommendationFor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #featureNameDictionary change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #fileBrokenNames:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #fileoutCategories change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #filterGenresFrom:to:keep: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #filterGenresFrom2:to:keep: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #findDir: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #findDir:tryHard: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #findFile: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #findFile:in: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #findFiles: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #findFiles:in:into: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #formNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #genreHistogram2Of:into: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #genreHistogramFrom: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #genreHistogramOf: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #genreHistogramOf:into: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #insertAsTable: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #insertToDel:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #insertToDel2:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #insertToUpdate:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #iso226Tables change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #ldaAsTable:toks: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #listS7: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #log: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #log:level: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #meLogData: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #meLogData0: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #meLogData2: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #mergeLines:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #musicConstants change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #nextName:type: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #pcaToConf: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #pcaToConf2: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #pcaToConf3: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #pcaToConf4: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #pcaToConf4b: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #pcaToConf5: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #pcaToConf6: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #pcaToConf6:title: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #playSoundFile: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #postLoad: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #printRatios change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #removeDblLines:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #renameFiles: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #scoreDir change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #scrambleFileLines change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #selectFileLines:to:base:every: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #soundDir change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #sqlAsSanity:from: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #sqlAsSanity2:from: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #sqlAsTable: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #sqlAsTable1: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #sqlAsTable2: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #sqlAsTable3: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #sqlAsTable4: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #sqlAsTable5: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #timingsTable: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #verbosity change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #verbosity: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #weightsToScale: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #writeSirenManual change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenUtility' meta: true selector: #writeSirenManualToHTML: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListTreeEditor' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListTreeEditor' meta: false selector: #listTree change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListTreeEditor' meta: false selector: #scoreView change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListTreeEditor' meta: true selector: #treeMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListTreeEditor' meta: true selector: #windowSpec change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCInstrument' meta: false selector: #asSpectrum change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCInstrument' meta: false selector: #directory change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCInstrument' meta: false selector: #directory: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCInstrument' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCInstrument' meta: false selector: #name change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCInstrument' meta: false selector: #name: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCInstrument' meta: false selector: #range change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCInstrument' meta: false selector: #range: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCInstrument' meta: false selector: #sampleNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCInstrument' meta: false selector: #samples change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCInstrument' meta: false selector: #samples: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCInstrument' meta: false selector: #sampleWithKey: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCInstrument' meta: true selector: #fromDir: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCInstrument' meta: true selector: #loadOrchDir: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SHARCInstrument' meta: true selector: #orchestra change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDevice' meta: false selector: #checkPort change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDevice' meta: false selector: #close change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDevice' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDevice' meta: false selector: #initialize: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDevice' meta: false selector: #mapAmplitude: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDevice' meta: false selector: #mapDuration: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDevice' meta: false selector: #mapPitch: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDevice' meta: false selector: #mapVoice: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDevice' meta: false selector: #play:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDevice' meta: false selector: #play:on: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDevice' meta: false selector: #port change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDevice' meta: false selector: #port: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDevice' meta: false selector: #stream change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDevice' meta: false selector: #stream: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDevice' meta: true selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDevice' meta: true selector: #new change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDevice' meta: true selector: #on: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDevice' meta: true selector: #playOnDevice change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MIDIDevice' meta: true selector: #scheduleExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Core.Dictionary' meta: false selector: #, change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchTimeView' meta: false selector: #defaultControllerClass change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchTimeView' meta: false selector: #generateItemFor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchTimeView' meta: false selector: #highlightFrom:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchTimeView' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchTimeView' meta: false selector: #itemFor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchTimeView' meta: false selector: #layoutManager change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchTimeView' meta: false selector: #pitchFromY: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchTimeView' meta: false selector: #zoom: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchTimeView' meta: true selector: #addButtonsOn:for:to:in: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchTimeView' meta: true selector: #label change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchTimeView' meta: true selector: #randomExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchTimeView' meta: true selector: #randomExampleLong change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: false selector: #critical: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: false selector: #device change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: false selector: #device: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: false selector: #in change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: false selector: #in: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: false selector: #name change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: false selector: #name: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: false selector: #out change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: false selector: #out: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: false selector: #status change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: false selector: #status: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: true selector: #blockSize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: true selector: #blockSize: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: true selector: #concreteClass change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: true selector: #default change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: true selector: #devices change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: true selector: #devices: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: true selector: #in change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: true selector: #in: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: true selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: true selector: #initializeData change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: true selector: #instance change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: true selector: #instance: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: true selector: #mutex change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: true selector: #new change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: true selector: #out change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: true selector: #out: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: true selector: #properties change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: true selector: #properties: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: true selector: #rate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: true selector: #rate: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: true selector: #release change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: true selector: #resetDevices change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: true selector: #sampleRate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortModel' meta: true selector: #sampleRate: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CmusicVoice' meta: false selector: #endLine change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CmusicVoice' meta: false selector: #writeFooter change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CmusicVoice' meta: false selector: #writeHeader change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CmusicVoice' meta: true selector: #defaultPMap change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CmusicVoice' meta: true selector: #randomExampleToFileAndEdit change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CmusicVoice' meta: true selector: #randomExampleToFileNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CmusicVoice' meta: true selector: #randomExampleToTranscript change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #< change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #<= change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #= change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #> change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #>= change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #alterate:toReach: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #alterateBelow:toReach: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #augmentedEleventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #augmentedFifth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #augmentedFourth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #augmentedNinth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #augmentedOctave change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #augmentedSecond change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #beDownAnOctave change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #beTransposedBy: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #beTransposedOneStepDown change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #beTransposedOneStepUp change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #beUpAnOctave change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #closestEnharmonic change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #diatonicStepsTo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #diminishedFifth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #diminishedNinth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #diminishedOctave change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #diminishedSeventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #diminishedThirteenth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #dottedEighth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #dottedFull change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #dottedHalf change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #dottedQuarter change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #downAndUpOctaves: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #downAnOctave change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #duration: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #eighth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #eighthInTriplet change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #eleventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #fifth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #flat change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #flatFifth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #flatNinth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #flatThirteenth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #following change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #fourth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #full change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #half change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #hash change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #intervalBetween: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #intervalTypeBetween: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #intervalTypeModuloOctaveBetween: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #inTessitura: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #isbetween:and: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #isDoubleFlat change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #isDoubleSharp change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #isFlat change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #isLeadingToneTo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #isLessThanA:from: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #isNatural change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #isNearerTo:than: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #isSharp change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #lowerLeadingToneInScale: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #majorNinth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #majorSecond change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #majorSeventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #majorSixth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #majorThird change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #majorThirteenth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #midiPitchEquals: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #minorNinth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #minorSecond change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #minorSeventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #minorSixth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #minorThird change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #minorThirteenth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #natural change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #newdiatonicStepsTo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #ninth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #nthFollowing: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #nthPreceding: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #oct change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #oct: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #octave change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #octave: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #olddiatonicStepsTo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #oldEquals: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #perfectEleventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #perfectFifth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #perfectFourth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #pitchClass change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #pitchClass: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #pitchEqual: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #preceding change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #quarter change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #quarterInTriplet change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #realIntervalTypeBetween: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #respectsBassTessitura change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #second change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #semiToneCount change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #semiTonesWith: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #setPitchTo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #seventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #sharp change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #sixteenth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #sixth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #storeOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #switchTo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #testIntervalsFrom:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #theNearestPitch: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #thirteenth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #transposeOf: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #unison change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #upAnOctave change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: false selector: #upperLeadingToneInScale: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: true selector: #altoRange change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: true selector: #altoRangeInScale: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: true selector: #baseRange change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: true selector: #baseRangeInScale: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: true selector: #examples change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: true selector: #from:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: true selector: #fromMidiPitch: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: true selector: #named: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: true selector: #octave:pc: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: true selector: #sopranoRange change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: true selector: #sopranoRangeInScale: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: true selector: #tenorRange change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentNote' meta: true selector: #tenorRangeInScale: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: false selector: #= change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: false selector: #ampl change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: false selector: #ampl: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: false selector: #amplitude change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: false selector: #amplitude: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: false selector: #loudness change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: false selector: #loudness: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: false selector: #pitch change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: false selector: #pitch: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: false selector: #playOn:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: false selector: #printTerseOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: false selector: #printVerboseOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: false selector: #readDataFrom:size: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: false selector: #storeDataOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: false selector: #storeOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: false selector: #transposeBy: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: false selector: #voice change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: false selector: #voice: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: true selector: #ampl:voice: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: true selector: #dur:ampl:voice: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: true selector: #dur:pitch: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: true selector: #dur:pitch:ampl: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: true selector: #dur:pitch:ampl:voice: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: true selector: #dur:pitch:voice: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: true selector: #dur:voice:ampl: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: true selector: #duration:pitch: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: true selector: #duration:pitch:ampl: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: true selector: #eventInspectExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: true selector: #example change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: true selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: true selector: #initializeEventDictionary change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: true selector: #pitch: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicEvent' meta: true selector: #pitch:ampl:voice: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #<= change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #addDate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #addDate: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #addPlaylist: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #album change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #album: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #artist change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #artist: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #bRate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #bRate: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #cleanFilename change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #comment change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #comment: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #dropVolume: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #escape: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #filename change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #filename: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #folder change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #folder: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #genre change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #genre: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #hasTags change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #hasTags: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #id change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #id: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #isEmpty change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #isTag change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #key change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #key: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #kind change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #kind: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #label: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #label:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #labels change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #loadTags change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #loadTags0 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #modDate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #modDate: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #name change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #name: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #parseAssociation: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #parseFilename: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #parseTags change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #parseTags: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #parseTags0: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #persID change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #persID: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #playlists change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #size change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #size: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #sRate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #sRate: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #title change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #title: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #track change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #track: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #tracks change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #type change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: false selector: #type: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: true selector: #fromLine: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Track' meta: true selector: #key:fromDictionary: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventGenerator' meta: false selector: #edit change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventGenerator' meta: false selector: #eventList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventGenerator' meta: false selector: #play change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventGenerator' meta: true selector: #all change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventGenerator' meta: true selector: #allPlaying change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventGenerator' meta: true selector: #named: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventGenerator' meta: true selector: #randomExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventGenerator' meta: true selector: #stopAll change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SmartAudioPort' meta: false selector: #callback change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SmartAudioPort' meta: false selector: #close change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SmartAudioPort' meta: false selector: #doIO change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SmartAudioPort' meta: false selector: #inChannels change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SmartAudioPort' meta: false selector: #inChannels: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SmartAudioPort' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SmartAudioPort' meta: false selector: #nextInBuffer change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SmartAudioPort' meta: false selector: #nextOutBuffer change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SmartAudioPort' meta: false selector: #open change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SmartAudioPort' meta: false selector: #outClients change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SmartAudioPort' meta: false selector: #play: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SmartAudioPort' meta: false selector: #record: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SmartAudioPort' meta: false selector: #setInputDevice change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SmartAudioPort' meta: false selector: #start: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SmartAudioPort' meta: true selector: #callback change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SmartAudioPort' meta: true selector: #new change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SmartAudioPort' meta: true selector: #testPlay change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SmartAudioPort' meta: true selector: #testRecord change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DurationEvent' meta: false selector: #= change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DurationEvent' meta: false selector: #ampl change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DurationEvent' meta: false selector: #dur change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DurationEvent' meta: false selector: #dur: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DurationEvent' meta: false selector: #duration change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DurationEvent' meta: false selector: #duration: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DurationEvent' meta: false selector: #index: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DurationEvent' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DurationEvent' meta: false selector: #isActive change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DurationEvent' meta: false selector: #nextTime: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DurationEvent' meta: false selector: #order change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DurationEvent' meta: false selector: #order: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DurationEvent' meta: false selector: #pitch change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DurationEvent' meta: false selector: #play change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DurationEvent' meta: false selector: #playAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DurationEvent' meta: false selector: #playOn:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DurationEvent' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DurationEvent' meta: false selector: #reset change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DurationEvent' meta: false selector: #scheduleAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DurationEvent' meta: false selector: #storeOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DurationEvent' meta: false selector: #voice change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DurationEvent' meta: false selector: #voice: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DurationEvent' meta: true selector: #dur:voice: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DurationEvent' meta: true selector: #eventInspectExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DurationEvent' meta: true selector: #example change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CmixVoice' meta: false selector: #endLine change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CmixVoice' meta: false selector: #playEvent:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CmixVoice' meta: false selector: #space change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CmixVoice' meta: false selector: #writeHeader change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CmixVoice' meta: true selector: #default change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CmixVoice' meta: true selector: #defaultPMap change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CmixVoice' meta: true selector: #randomExampleToFileAndEdit change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.CmixVoice' meta: true selector: #randomExampleToFileNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassDoubleFlat' meta: false selector: #alterate:toReach: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassDoubleFlat' meta: false selector: #alterateBelow:toReach: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassDoubleFlat' meta: false selector: #closestEnharmonic change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassDoubleFlat' meta: false selector: #flat change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassDoubleFlat' meta: false selector: #isDoubleFlat change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassDoubleFlat' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassDoubleFlat' meta: false selector: #representBinaryOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassDoubleFlat' meta: false selector: #semiToneCount change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassDoubleFlat' meta: false selector: #semiTonesToNatural change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassDoubleFlat' meta: false selector: #sharp change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassDoubleFlat' meta: false selector: #storeOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayString' meta: false selector: #bounds change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayString' meta: false selector: #displayOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayString' meta: false selector: #displayPostScriptOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayString' meta: false selector: #extent change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayString' meta: false selector: #font change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayString' meta: false selector: #font: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayString' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayString' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayString' meta: false selector: #string change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayString' meta: false selector: #string: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayString' meta: true selector: #new change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayString' meta: true selector: #string: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayString' meta: true selector: #string:offset: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayString' meta: true selector: #stringExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Analysis' meta: false selector: #degree change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Analysis' meta: false selector: #degree: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Analysis' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Analysis' meta: false selector: #romanDegree change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Analysis' meta: false selector: #scale change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Analysis' meta: false selector: #scale: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Analysis' meta: true selector: #examples change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #addItemsFrom:to:path: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #allOff change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #blockSize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #chBlockSize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #chInChans change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #chListSelection change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #chOSCAddr change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #chOutChans change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #chSRate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #chVerbosity change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #chVoiceClass change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #cleanUp change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #clock change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #configureMIDI change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #defaultVoiceClass change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #deleteItem change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #eventList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #executeAutoSave change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #forward change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #freeLists change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #inChannels change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #inspectSession change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #listMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #loadAll change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #midiPort change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #newEventList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #newMIDIPort change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #newSound change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #newSoundPort change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #newTimer change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #newVoice change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #objectFor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #openSirenUtility change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #openTransport change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #oscAddress change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #outChannels change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #play change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #playItem change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #postOpenWith: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #record change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #release change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #resetSound change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #rewind change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #sampleRate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #scheduleList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #scheduleListText change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #scheduleListText0 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #selectedObject change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #selectedObjectName change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #sound change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #soundMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #soundPort change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #spawnItem change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #stop change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #stopMIDI change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #stopSound change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #testMIDI change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #testMIDIin change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #testMIDIout change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #testOSCout change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #testSndFileIn change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #testSoundIn change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #testSoundOut change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #timer change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #timerMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #transport change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #update:with:from: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #updateClock change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #updateScheduleList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #updateTimer change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #verbosity change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #verbosityLabel change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #voice change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #voiceMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: false selector: #zeroTimer change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #atVoice:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #blocksizeMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #chMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #clockMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #data:in:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #dataAt:in: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #eventList: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #eventList:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #eventListNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #eventLists change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #flushTempEventLists change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #forwardButton change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #initializeEventLists change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #initializeSounds change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #initializeVoices change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #instance change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #loadDemoData change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #midiPortMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #midiTestMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #new change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #open change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #openTransport change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #openUtility change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #playButton change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #rateMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #recordButton change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #refresh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #release change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #rewindButton change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #schedule change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #scheduleMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #sound: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #sound:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #soundNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #soundPortMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #sounds change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #stopButton change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #timerMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #transportButtonSpec change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #transportWindowSpec change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #update:with:from: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #utilWindowSpec change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #verbosityMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #voice:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #voiceNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenSession' meta: true selector: #voices change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #addNote: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #allPitchClasses change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #asMelody change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #asPlayableObject change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #beTransposedOneStepDown change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #beTransposedOneStepUp change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #closestDownTriadNoteTo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #closestTriadNoteTo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #closestUpTriadNoteTo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #computeNotesByInterval change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #containsLegalNote: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #copy change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #downTriadNotes change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #lapse: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #notes: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #notesByInterval change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #octave: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #octaveFromNote: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #reallyTheFifth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #reallyTheLowFifth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #reallyTheLowOctave change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #reallyTheLowThird change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #reallyTheOctave change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #reallyTheThird change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #reallyTheTonic change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #removeNote: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #resetNotes change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #save change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #startBeat:duration: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #startTime:duration: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #storeOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #theFifth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #theLowFifth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #theLowOctave change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #theLowSeventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #theLowThird change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #theOctave change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #theThird change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #theTonic change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #triadDownNoteLeadingTo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #triadNoteLeadingTo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #triadNotesLeadingTo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #triadUpNoteLeadingTo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #upAndDownTriadNotes change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: false selector: #upTriadNotes change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: true selector: #example change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: true selector: #example1 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: true selector: #example2 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: true selector: #newWithValues: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: true selector: #readFromFile change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: true selector: #readFromFile: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OctaveDependentChord' meta: true selector: #root:notes: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.StructureAccessor' meta: false selector: #itemFor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.StructureAccessor' meta: false selector: #itemGenerator change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.StructureAccessor' meta: false selector: #itemGenerator: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.StructureAccessor' meta: false selector: #subject change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.StructureAccessor' meta: false selector: #subject: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ExponentialFunction' meta: false selector: #at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ExponentialFunction' meta: false selector: #pointAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ExponentialFunction' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ExponentialFunction' meta: true selector: #a:d:s:r: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ExponentialFunction' meta: true selector: #default change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ExponentialFunction' meta: true selector: #expADSRViewExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ExponentialFunction' meta: true selector: #expASRViewExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ExponentialFunction' meta: true selector: #expsegViewExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.ExponentialFunction' meta: true selector: #from: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LinearFunction' meta: false selector: #add: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LinearFunction' meta: false selector: #at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LinearFunction' meta: false selector: #normalize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LinearFunction' meta: false selector: #scaleBy: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LinearFunction' meta: false selector: #size change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LinearFunction' meta: false selector: #updateRange change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LinearFunction' meta: true selector: #a:d:s:r: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LinearFunction' meta: true selector: #default change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LinearFunction' meta: true selector: #exampleEnvelope change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LinearFunction' meta: true selector: #fromLorisData:size:duration: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LinearFunction' meta: true selector: #linearExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LinearFunction' meta: true selector: #linearViewExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.ZPoint' meta: false selector: #- change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.ZPoint' meta: false selector: #* change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.ZPoint' meta: false selector: #/ change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.ZPoint' meta: false selector: #+ change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.ZPoint' meta: false selector: #= change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.ZPoint' meta: false selector: #asPoint change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.ZPoint' meta: false selector: #convertToFloats change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.ZPoint' meta: false selector: #dotProduct: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.ZPoint' meta: false selector: #hash change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.ZPoint' meta: false selector: #isZero change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.ZPoint' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.ZPoint' meta: false selector: #rounded change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.ZPoint' meta: false selector: #setX:setY:setZ: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.ZPoint' meta: false selector: #storeOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.ZPoint' meta: false selector: #z change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.ZPoint' meta: false selector: #z: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.ZPoint' meta: true selector: #x:y:z: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayLine' meta: false selector: #bounds change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayLine' meta: false selector: #corner: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayLine' meta: false selector: #displayOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayLine' meta: false selector: #displayPostScriptOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayLine' meta: false selector: #extent change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayLine' meta: false selector: #extent: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayLine' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayLine' meta: false selector: #width: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayLine' meta: true selector: #from:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayLine' meta: true selector: #offset:extent: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Voice' meta: false selector: #close change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Voice' meta: false selector: #eventList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Voice' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Voice' meta: false selector: #initializeNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Voice' meta: false selector: #instrument change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Voice' meta: false selector: #instrument: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Voice' meta: false selector: #isVoice change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Voice' meta: false selector: #name change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Voice' meta: false selector: #name: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Voice' meta: false selector: #play: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Voice' meta: false selector: #play:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Voice' meta: false selector: #playEvent: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Voice' meta: false selector: #playEvent:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Voice' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Voice' meta: false selector: #readOnto: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Voice' meta: false selector: #stream change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Voice' meta: false selector: #stream: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Voice' meta: true selector: #default change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Voice' meta: true selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Voice' meta: true selector: #named: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Voice' meta: true selector: #on: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Voice' meta: true selector: #reset change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Voice' meta: true selector: #setDefault: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PseudoMinorScale' meta: true selector: #intervalList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioMagnitude' meta: false selector: #asRatio change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioMagnitude' meta: false selector: #map change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioMagnitude' meta: false selector: #realValue change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioMagnitude' meta: false selector: #relativeTo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioMagnitude' meta: false selector: #value change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioMagnitude' meta: true selector: #value:relative: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LayoutManager' meta: false selector: #addItem:atNode:in: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LayoutManager' meta: false selector: #displayList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LayoutManager' meta: false selector: #displayListFor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LayoutManager' meta: false selector: #generateDisplayList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LayoutManager' meta: false selector: #orientation: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.LayoutManager' meta: false selector: #view: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundPort' meta: false selector: #close change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundPort' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundPort' meta: false selector: #open change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundPort' meta: false selector: #play: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundPort' meta: false selector: #play:from:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundPort' meta: false selector: #record: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundPort' meta: false selector: #release change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundPort' meta: false selector: #start change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundPort' meta: false selector: #stop change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundPort' meta: true selector: #concreteClass change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundPort' meta: true selector: #default change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundPort' meta: true selector: #defaultOrNil change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SoundPort' meta: true selector: #initializeData change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayPolyline' meta: false selector: #bounds change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayPolyline' meta: false selector: #displayOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayPolyline' meta: false selector: #extent change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayPolyline' meta: false selector: #scaledBy: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayPolyline' meta: false selector: #vertices: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayPolyline' meta: true selector: #offset:vertices: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayPolyline' meta: true selector: #polylineExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DisplayPolyline' meta: true selector: #vertices: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.GapSound' meta: false selector: #allocateData change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.GapSound' meta: false selector: #cutFrom:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.GapSound' meta: false selector: #hasGaps change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.GapSound' meta: false selector: #mapSampleIndex: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.GapSound' meta: false selector: #samples change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.GapSound' meta: true selector: #exampleView change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.GapSound' meta: true selector: #on:cutFrom:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SpectrumView' meta: false selector: #color: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SpectrumView' meta: false selector: #colorForValue: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SpectrumView' meta: false selector: #defaultControllerClass change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SpectrumView' meta: false selector: #displayOnGC: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SpectrumView' meta: false selector: #displayOnGC1: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SpectrumView' meta: true selector: #openOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SpectrumView' meta: true selector: #spectrumViewOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: false selector: #oscMessageFrom: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: false selector: #play: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: false selector: #playAssociation:in: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: false selector: #playEvent:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: false selector: #port change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: false selector: #port: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: false selector: #send:args: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: false selector: #waitTill: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #default change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #defaultPMap change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #fmExample1 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #fmExample2 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #fmExample3 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #fmExample4 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #fmExample5 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #functionExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #localhost change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #map: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #midiScaleExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #onPort: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #pMapForCSLAdditive change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #pMapForCSLFM change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #pMapForCSLSimpleFM change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #pMapForCSLSnd change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #pMapForCSLSndSimple change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #pMapForCSLString change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #pMapForMIDI change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #pMapForMIDItoFM change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #pMapWithBundle change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #scHost change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #sndExample1 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #sndExample2 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #sndExample3 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #sosExample1 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #stringExample1 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OSCVoice' meta: true selector: #stringExample2 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioLoudness' meta: false selector: #asDB change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioLoudness' meta: false selector: #asMIDI change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioLoudness' meta: false selector: #asSymbol change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioLoudness' meta: false selector: #printOn0: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioLoudness' meta: false selector: #species change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioLoudness' meta: true selector: #ddMsgName change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: false selector: #+ change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: false selector: #< change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: false selector: #<= change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: false selector: #= change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: false selector: #> change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: false selector: #>= change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: false selector: #ascending change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: false selector: #asChromaticInterval change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: false selector: #descending change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: false selector: #hasSameDirectionAs: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: false selector: #isA: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: false selector: #isAscending change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: false selector: #isDescending change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: false selector: #isPrintable change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: false selector: #orientedSemiTones change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: false selector: #printPrintableOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: false selector: #semiTones change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: false selector: #semiTones: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: false selector: #storeOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: false selector: #topIfBottomIs: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: false selector: #type change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: false selector: #type: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #allIntervalsType: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #allPrintableIntervals change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #aug11 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #aug4 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #aug5 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #aug9 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #augmentedEleventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #augmentedFifth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #augmentedFourth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #augmentedNinth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #augmentedOctave change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #augmentedSecond change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #augmentedTenth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #augmentedTwelvth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #augmentedUnison change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #dim13 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #dim5 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #dim7 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #dim9 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #diminishedFifth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #diminishedFourth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #diminishedNinth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #diminishedOctave change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #diminishedSecond change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #diminishedSeventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #diminishedTenth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #diminishedThirteenth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #diminishedTwelvth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #diminishedUnison change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #eleventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #example change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #exampleTranspositions change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #fifth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #flatFifth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #flatNinth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #flatThirteenth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #fourth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #majorNinth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #majorSecond change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #majorSeventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #majorSixth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #majorTenth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #majorThird change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #majorThirteenth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #majorTwelvth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #minorNinth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #minorSecond change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #minorSeventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #minorSixth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #minorThird change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #minorThirteenth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #ninth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #octave change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #perfectEleventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #perfectFifth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #perfectFourth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #second change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #seventh change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #sixth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #superAugmentedUnison change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #superDiminishedUnison change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #thirteenth change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #type:semiTones: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicalInterval' meta: true selector: #unison change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Sound' meta: false selector: #addCueNamed:from:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Sound' meta: false selector: #cueList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Sound' meta: false selector: #cueList: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Sound' meta: false selector: #cueNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Sound' meta: false selector: #cueRegionNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Sound' meta: false selector: #finalize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Sound' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Sound' meta: false selector: #isSound change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Sound' meta: true selector: #fromFile: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Sound' meta: true selector: #named: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Sound' meta: true selector: #named:put: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Sound' meta: true selector: #playFile: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.IntervalMagnitude' meta: false selector: #value: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.IntervalMagnitude' meta: true selector: #range change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.IntervalMagnitude' meta: true selector: #range: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Oriental' meta: true selector: #intervalList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMidiInterface' meta: false selector: #OEoop change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMidiInterface' meta: false selector: #pm_close: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMidiInterface' meta: false selector: #pm_count_devices change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMidiInterface' meta: false selector: #pm_default_input_device change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMidiInterface' meta: false selector: #pm_default_output_device change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMidiInterface' meta: false selector: #pm_dev_dir: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMidiInterface' meta: false selector: #pm_get_name: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMidiInterface' meta: false selector: #pm_get: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMidiInterface' meta: false selector: #pm_has_error: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMidiInterface' meta: false selector: #pm_initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMidiInterface' meta: false selector: #pm_open:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMidiInterface' meta: false selector: #pm_poll: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMidiInterface' meta: false selector: #pm_read_controllers:with:with:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMidiInterface' meta: false selector: #pm_read: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMidiInterface' meta: false selector: #pm_start_controller_cacheing change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMidiInterface' meta: false selector: #pm_stop_controller_cacheing change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMidiInterface' meta: false selector: #pm_terminate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMidiInterface' meta: false selector: #pm_test change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMidiInterface' meta: false selector: #pm_write_data2:with:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMidiInterface' meta: false selector: #pm_write_data3:with:with:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMidiInterface' meta: false selector: #pm_write_long:with:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMidiInterface' meta: false selector: #pm_write_short:with: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMidiInterface' meta: true selector: #example1 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMidiInterface' meta: true selector: #testMIDI change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortMidiInterface' meta: true selector: #testMIDI2 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #, change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #= change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #add: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #add:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #addAll: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #addAll:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #addAllAtEnd: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #addModifier: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #addValue:toProp: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #applyBlock:toProp: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #applyFunction:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #applyFunction:to:startingAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #asExplorerString change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #asExplorerString: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #chooseRange:toProp: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #code change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #code: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #collect: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #collectAll: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #continueProperties change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #deepCopy change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #defaultEventClass change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #do: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #duration change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #edit change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #empty change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #eventKeys change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #eventNear: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #eventNearestTime: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #eventNearTime: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #events change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #events: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #eventsDo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #eventValues change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #excerptFrom:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #expanded change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #expandedFrom:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #findNoteOff: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #group: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #hasItems change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #includes: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #initializeAnonymous change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #initializeNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #isEmpty change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #isEventList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #keysAndValuesDo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #loop change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #map: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #map:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #name change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #name: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #next change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #nextTime: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #nextTimeFor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #play change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #playOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #playOn:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #readDataFrom:size: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #recomputeDuration change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #release change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #remove: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #removeModifier: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #scale:by: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #scaleStartTimesBy: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #scaleValue:toProp: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #scheduleAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #select: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #selectAll: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #selectKey: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #selectValue: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #setDurations change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #setValue:toProp: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #shallowCopy change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #size change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #species change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #spreadValue:toProp: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #stop change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #storeDataOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #storeOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #storeOnFile: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #templateFields change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #tempo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #timesDo: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: false selector: #voices change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #basicNew: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #creationExamples change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #flush change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #fromFile: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #named: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #named:fromPitches: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #named:fromSelectors:values: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #named:fromStartTimes: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #named:ifAbsent: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #namedLists change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #new change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #new: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #newAnonymous change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #newNamed change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #newNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #nextName change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #randomExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #randomExample: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #randomExample:from: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #randomSWSSExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #randomSWSSExample2 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #scaleExample2 change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #scaleFrom:to:in: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #sentenceExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #serialExample:from: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #storeAll change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventList' meta: true selector: #wordExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListFileViewer' meta: false selector: #editFile change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListFileViewer' meta: false selector: #loadFile change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListFileViewer' meta: false selector: #playFile change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListFileViewer' meta: false selector: #printBlurbFor:on: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListFileViewer' meta: true selector: #isInterestedInFile: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.EventListFileViewer' meta: true selector: #tabLabel change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioPitch' meta: false selector: #asFracMIDI change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioPitch' meta: false selector: #asFracSymbol change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioPitch' meta: false selector: #asHertz change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioPitch' meta: false selector: #asMIDI change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioPitch' meta: false selector: #asSymbol change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioPitch' meta: false selector: #mostGeneral change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioPitch' meta: false selector: #printOn0: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioPitch' meta: false selector: #species change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.RatioPitch' meta: true selector: #ddMsgName change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NotelistVoice' meta: false selector: #addMap: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NotelistVoice' meta: false selector: #close change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NotelistVoice' meta: false selector: #dump: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NotelistVoice' meta: false selector: #endLine change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NotelistVoice' meta: false selector: #header: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NotelistVoice' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NotelistVoice' meta: false selector: #initializeNamed:onStream: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NotelistVoice' meta: false selector: #initializeOnStream: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NotelistVoice' meta: false selector: #mapProperty:of:within: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NotelistVoice' meta: false selector: #parameterMap change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NotelistVoice' meta: false selector: #parameterMap: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NotelistVoice' meta: false selector: #play: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NotelistVoice' meta: false selector: #play:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NotelistVoice' meta: false selector: #playAssociation:in: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NotelistVoice' meta: false selector: #space change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NotelistVoice' meta: false selector: #writeFooter change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NotelistVoice' meta: false selector: #writeHeader change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NotelistVoice' meta: true selector: #defaultPMap change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NotelistVoice' meta: true selector: #newNamed:onFile: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NotelistVoice' meta: true selector: #newNamed:onStream: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.NotelistVoice' meta: true selector: #onFileNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSetTool' meta: false selector: #childrenFor: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSetTool' meta: false selector: #childrenOf: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSetTool' meta: false selector: #inspect change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSetTool' meta: false selector: #nodeSelected change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSetTool' meta: false selector: #postOpenWith: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSetTool' meta: false selector: #tree change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSetTool' meta: true selector: #menuBar change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSetTool' meta: true selector: #treeMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.DataSetTool' meta: true selector: #windowSpec change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Tools.ListWorkBook' meta: false selector: #pageChanged change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Tools.ListWorkBook' meta: false selector: #pageList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Tools.ListWorkBook' meta: false selector: #postBuildWith: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Tools.ListWorkBook' meta: false selector: #requestForWindowClose change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Tools.ListWorkBook' meta: false selector: #tabControl change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Tools.ListWorkBook' meta: false selector: #textView change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Tools.ListWorkBook' meta: true selector: #catAllToWebPage change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Tools.ListWorkBook' meta: true selector: #listMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Tools.ListWorkBook' meta: true selector: #menuBar change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Tools.ListWorkBook' meta: true selector: #topicMenu change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Tools.ListWorkBook' meta: true selector: #windowSpec change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Trill' meta: false selector: #eventList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Trill' meta: true selector: #length:rhythm:note: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Trill' meta: true selector: #length:rhythm:notes: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Ostinato' meta: false selector: #events change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Ostinato' meta: false selector: #initializeAnonymous change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Ostinato' meta: false selector: #initializeNamed: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Ostinato' meta: false selector: #list change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Ostinato' meta: false selector: #list: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Ostinato' meta: false selector: #play: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Ostinato' meta: false selector: #playAt: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Ostinato' meta: false selector: #playOn:at: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Ostinato' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Ostinato' meta: false selector: #process: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Ostinato' meta: false selector: #stop change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Ostinato' meta: true selector: #named:onList: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Ostinato' meta: true selector: #named:onList:dur: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Ostinato' meta: true selector: #newNamed:onList: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Ostinato' meta: true selector: #onList: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Ostinato' meta: true selector: #onList:dur: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Ostinato' meta: true selector: #ostinatoExamples change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Ostinato' meta: true selector: #trillExample change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HarmonicMinorScale' meta: false selector: #costForPitch: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HarmonicMinorScale' meta: false selector: #enharmonicScale change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HarmonicMinorScale' meta: true selector: #allIntervals change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.HarmonicMinorScale' meta: true selector: #intervalList change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: false selector: #- change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: false selector: #* change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: false selector: #/ change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: false selector: #+ change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: false selector: #< change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: false selector: #<< change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: false selector: #<= change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: false selector: #= change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: false selector: #=? change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: false selector: #=< change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: false selector: #== change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: false selector: #=> change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: false selector: #> change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: false selector: #>= change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: false selector: #>> change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: false selector: #hash change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: false selector: #mostGeneral change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: false selector: #release change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: false selector: #table change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: false selector: #value change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: false selector: #value: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: true selector: #flush change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: true selector: #new change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: true selector: #table change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: true selector: #useTable change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: true selector: #value: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.OrdinalMagnitude' meta: true selector: #values change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicLoudness' meta: false selector: #asDB change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicLoudness' meta: false selector: #asMIDI change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicLoudness' meta: false selector: #asRatio change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicLoudness' meta: false selector: #asSymbol change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicLoudness' meta: false selector: #mostGeneral change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicLoudness' meta: false selector: #printOn0: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicLoudness' meta: false selector: #species change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicLoudness' meta: false selector: #units change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicLoudness' meta: true selector: #ddMsgName change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicLoudness' meta: true selector: #fromMIDI: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SymbolicLoudness' meta: true selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassNatural' meta: false selector: #alterate:toReach: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassNatural' meta: false selector: #alterateBelow:toReach: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassNatural' meta: false selector: #closestEnharmonic change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassNatural' meta: false selector: #flat change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassNatural' meta: false selector: #flat: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassNatural' meta: false selector: #following change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassNatural' meta: false selector: #following: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassNatural' meta: false selector: #name change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassNatural' meta: false selector: #name: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassNatural' meta: false selector: #nameIs: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassNatural' meta: false selector: #natural change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassNatural' meta: false selector: #nom change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassNatural' meta: false selector: #nom: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassNatural' meta: false selector: #preceding change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassNatural' meta: false selector: #preceding: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassNatural' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassNatural' meta: false selector: #representBinaryOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassNatural' meta: false selector: #semiToneCount change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassNatural' meta: false selector: #semiToneCount: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassNatural' meta: false selector: #semiTonesToNatural change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassNatural' meta: false selector: #semiTonesWithNaturalNote: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassNatural' meta: false selector: #semiTonesWithNaturalNoteBelow: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassNatural' meta: false selector: #sharp change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PitchClassNatural' meta: false selector: #sharp: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Tag' meta: false selector: #addChild: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Tag' meta: false selector: #addParent: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Tag' meta: false selector: #addSibling: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Tag' meta: false selector: #children change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Tag' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Tag' meta: false selector: #isTag change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Tag' meta: false selector: #name change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Tag' meta: false selector: #name: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Tag' meta: false selector: #parents change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Tag' meta: false selector: #printOn: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Tag' meta: false selector: #reinitialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Tag' meta: false selector: #siblings change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Tag' meta: false selector: #tracks change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Tag' meta: false selector: #tracks: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Tag' meta: true selector: #name:track: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioPort' meta: false selector: #close change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioPort' meta: false selector: #format change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioPort' meta: false selector: #format: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioPort' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioPort' meta: false selector: #open change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioPort' meta: false selector: #outChannels change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioPort' meta: false selector: #outChannels: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioPort' meta: false selector: #play: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioPort' meta: false selector: #play:from:to: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioPort' meta: false selector: #rate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioPort' meta: false selector: #rate: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioPort' meta: false selector: #start change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioPort' meta: false selector: #stop change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioPort' meta: false selector: #terminate change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioPort' meta: true selector: #playSweep change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioPort' meta: true selector: #playSweepLong change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PortAudioPort' meta: true selector: #stop change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicModel' meta: true selector: #examples change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicModel' meta: true selector: #generality change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.MusicModel' meta: true selector: #generalize:and: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AnalysisList' meta: false selector: #tonalitesCommunesAvec: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AnalysisList' meta: false selector: #tonalitesCommunesAvec:et: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.AnalysisList' meta: true selector: #examples change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Pitch' meta: true selector: #color change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Pitch' meta: true selector: #example change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Pitch' meta: true selector: #exampleAdC change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Pitch' meta: true selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Pitch' meta: true selector: #initializeGenerality change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Pitch' meta: true selector: #mostGeneral change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Pitch' meta: true selector: #propertyName change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Pitch' meta: true selector: #relativeMember change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Pitch' meta: true selector: #species change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.Pitch' meta: true selector: #value: change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PositionTimeView' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.PositionTimeView' meta: false selector: #layoutManager change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenExternalInterface' meta: false selector: #initialize change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenExternalInterface' meta: true selector: #flush change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenExternalInterface' meta: true selector: #instance change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenExternalInterface' meta: true selector: #new change: #added!CodeComponent type: #parcel named:  'Siren' classNamed: 'Root.Smalltalk.Siren.SirenExternalInterface' meta: true selector: #unload change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren' static: #ExampleClassNIExternalInterfaceDictionary change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren' static: #ExampleConstantsNIExternalInterfaceDictionary change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren' static: #ExampleVariablesNIExternalInterfaceDictionary change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren' static: #FFTWInterfaceDictionary change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren' static: #GeneralMIDIDrums change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren' static: #GeneralMIDIFamilies change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren' static: #GeneralMIDIMap change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren' static: #LibSndFileInterfaceDictionary change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren' static: #MIDICommands change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren' static: #PortAudioInterfaceDictionary change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren' static: #PortMidiInterfaceDictionary change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren' static: #SirenExternalInterfaceDictionary change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren' static: #Streams change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.PitchClass' static: #A change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.PitchClass' static: #AllNatural change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.PitchClass' static: #AllNotes change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.PitchClass' static: #B change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.PitchClass' static: #C change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.PitchClass' static: #D change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.PitchClass' static: #E change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.PitchClass' static: #English change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.PitchClass' static: #F change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.PitchClass' static: #G change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.FunctionView' static: #LineWidth change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.PortAudioInterface' static: #PA_Constants change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.SoundFile' static: #FileFormats change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.SoundFile' static: #Interface change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.SoundFile' static: #SampleFormats change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.SEventQueue' static: #CurrentRecord change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.SEventQueue' static: #RecordPool change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.Scale' static: #AllNotes change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.LibSndFileInterface' static: #SF_Constants change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.EventScheduler' static: #Schedule change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.DisplayListView' static: #MusicConstants change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.SampledSound' static: #MagicNumbers change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.SampledSound' static: #MaxIntSample change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.SampledSound' static: #MinIntSample change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.MIDIPort' static: #Streams change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.OSCBundle' static: #MillisecScale change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.OSCBundle' static: #MillisecToNTP change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.OSCBundle' static: #SecsInAYear change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.SirenUtility' static: #DataDir change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.SirenUtility' static: #DefaultMIDIIn change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.SirenUtility' static: #DefaultMIDIOut change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.SirenUtility' static: #DefaultOSCHost change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.SirenUtility' static: #DefaultOSCPort change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.SirenUtility' static: #LoggingStream change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.SirenUtility' static: #ScoreDir change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.SirenUtility' static: #SoundDir change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.SirenUtility' static: #Verbosity change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.SHARCInstrument' static: #SHARCOrchestra change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.MIDIDevice' static: #MStream change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.SirenSession' static: #EventLists change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.SirenSession' static: #Sounds change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.SirenSession' static: #Voices change: #added!CodeComponent type: #parcel named: 'Siren' ownerNamed: 'Root.Smalltalk.Siren.Voice' static: #DefaultVoiceClass change: #added!CodeComponent type: #parcel named: 'Siren' property: #packageName value: 'Siren'!CodeComponent type: #parcel named: 'Siren' property: #comment value: 'This is the Siren 9.0 Music/Sound Package for Visualworks SmalltalkThe Siren system is a general-purpose software framework for music and sound composition, processing, performance, and analysis; it is a collection of about 350 classes written in Smalltalk-80. This version of Siren (9.0) works on VisualWorks Smalltalk (available for free for non-commercial use, see http://www.cincom.com/smalltalk) and supports streaming I/O via OpenSoundControl (OSC), MIDI, and multi-channel audio ports. The Siren release (with supporting external code) is available via the web from the URL http://FASTLabInc.com/Siren.Siren is a programming framework and tool kit; the intended audience is Smalltalk developers, or users willing to learn Smalltalk in order to write their own applications. The built-in applications are meant as demonstrations of the use of the libraries, rather than as end-user applications. Siren is not a MIDI sequencer, nor a score notation editor, through both of these applications would be easy to implement with the Siren framework.There are several elements to Siren:	the Smoke music representation language		(music magnitudes, events, event lists, generators, functions, and sounds);	voices, schedulers and I/O drivers		(real-time and file-based voices, sound, score, and MIDI I/O);	user interface components for musical applications		(UI framework, tools, and widgets); and	several built-in applications 		(editors and browsers for Smoke objects).There are external packages for the external DLLCC C code for using LibSndFile, PortMIDI, FFTW, PortAudio and OSC, as well as SWIG-based I/O Interfaces to both CSL and LorisYou can down-load the full release from	http://FASTLabInc.com/Siren or github or the Cincom Smalltalk repositorySTP -- Munich, Oct, 1984 - Santa Barbara, May, 2020'!CodeComponent type: #parcel named: 'Siren' property: #parcelName value: nil!CodeComponent type: #parcel named: 'Siren' property: #notice value: 'Copyright (C) Stephen Travis Pope et al. 1984-2020'!CodeComponent type: #parcel named: 'Siren' property: #prerequisiteDescriptions value: #(#(#name 'BOSS' #componentType #package) #(#name 'StoreBase' #componentType #bundle) #(#name 'DLLCC' #componentType #package) #(#name 'Tools-Workspace' #componentType #package) #(#name 'Tools-Trippy' #componentType #package) #(#name 'Tools-File Browser' #componentType #package))!CodeComponent type: #parcel named: 'Siren' property: #developmentPrerequisites value: #(#(#any 'BOSS' '') #(#any 'StoreBase' '') #(#any 'DLLCC' '') #(#any 'Tools-Workspace' '') #(#any 'Tools-Trippy' '') #(#any 'Tools-File Browser' ''))!CodeComponent type: #parcel named: 'Siren' property: #prerequisiteParcels value: #(#('BOSS' '') #('StoreBase' '') #('DLLCC' '') #('Tools-Workspace' '') #('Tools-Trippy' '') #('Tools-File Browser' ''))!CodeComponent type: #parcel renamed: 'Siren' to: 'Siren'!Parcel loadParcelFrom: (OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'net' 'MIME.pcl'))!CodeComponent create: #package named: 'HTTP'!Parcel loadParcelFrom: (OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'net' 'NetClientBase.pcl'))!Parcel loadParcelFrom: (OS.LogicalFilename fromComponents: #('/' 'Content' 'Code' 'Smalltalk' 'Siren9' 'OldBrowsers.pcl'))!CodeComponent create: #package named: 'Help-UI'!Parcel loadParcelFrom: (OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'net' 'HTTP.pcl'))!Parcel loadParcelFrom: (OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'parcels' 'Help-UI.pcl'))!CodeComponent create: #package named: 'Siren'!CodeComponent type: #package named: 'Siren' property: #parcelName value: nil!CodeComponent create: #package named: 'OldBrowsers'!CodeComponent create: #package named: 'MIME'!CodeComponent create: #package named: 'Help-Model'!CodeComponent create: #package named: 'NetClientBase'!CodeComponent create: #package named: 'DLLCC-Tools'!Parcel loadParcelFrom: (OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'parcels' 'Help-Model.pcl'))!CodeComponent type: #package named: 'System-Name Spaces' ownerNamed: 'Root.Smalltalk.Kernel.Undeclared' static: #N change: #removed!CodeComponent type: #package named: 'System-Name Spaces' ownerNamed: 'Root.Smalltalk.Kernel.Undeclared' static: #PitchClassDo change: #removed!CodeComponent type: #package named: 'System-Name Spaces' ownerNamed: 'Root.Smalltalk.Kernel.Undeclared' static: #statusBar change: #removed!CodeComponent type: #package named: 'System-Name Spaces' ownerNamed: 'Root.Smalltalk.Kernel.Undeclared' static: #transcriptView change: #removed!CodeComponent type: #package named: 'System-Name Spaces' ownerNamed: 'Root.Smalltalk.Kernel.Undeclared' static: #Ostinato change: #removed!Parcel loadParcelFrom: (OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'dllcc' 'DLLCC-Tools.pcl'))!CodeComponent create: #package named: 'DLLCC'!Parcel loadParcelFrom: (OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'dllcc' 'DLLCC.pcl'))!Smalltalk.Siren defineClass: #AbstractOSCPacket	superclass: #{Core.Object}	indexedType: #none	private: false	instanceVariableNames: 'oscBytes '	classInstanceVariableNames: ''	imports: ''	category: 'MusicIO-OSC'!Smalltalk.Siren defineClass: #Voice	superclass: #{UI.Model}	indexedType: #none	private: false	instanceVariableNames: 'name instrument stream '	classInstanceVariableNames: ''	imports: ''	category: 'MusicIO-Voices'!Smalltalk.Siren defineClass: #MIDIFileVoice	superclass: #{Siren.Voice}	indexedType: #none	private: false	instanceVariableNames: 'fileType tracks ppq tempo '	classInstanceVariableNames: ''	imports: ''	category: 'MusicIO-Voices'!Smalltalk.Siren defineClass: #NotelistVoice	superclass: #{Siren.Voice}	indexedType: #none	private: false	instanceVariableNames: 'parameterMap lastTime header '	classInstanceVariableNames: ''	imports: ''	category: 'MusicIO-Voices'!Smalltalk.Siren defineClass: #CsoundVoice	superclass: #{Siren.NotelistVoice}	indexedType: #none	private: false	instanceVariableNames: ''	classInstanceVariableNames: ''	imports: ''	category: 'MusicIO-Voices'!Smalltalk.Siren defineClass: #SirenUtility	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: ''	classInstanceVariableNames: 'list '	imports: ''	category: 'Music-Support'!Smalltalk.Siren defineClass: #ClusterEditor	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: 'mode scale process events tScale numEvents running defaultVoiceClass durationList maxPitch minDur minPitch pitchList maxDur pitchRange durRange voiceRange amplRange minAmpl minVoice maxVoice amplList maxAmpl voiceList tempo '	classInstanceVariableNames: ''	imports: ''	category: 'MusicUI-Editors'!Smalltalk.Tools defineClass: #Workbook	superclass: #{Tools.AbstractWorkspace}	indexedType: #none	private: false	instanceVariableNames: 'pageHolder lastInstalledPage '	classInstanceVariableNames: ''	imports: ''	category: 'Tools-Workspace'!Smalltalk.Siren defineClass: #OSCVoice	superclass: #{Siren.NotelistVoice}	indexedType: #objects	private: false	instanceVariableNames: 'port '	classInstanceVariableNames: ''	imports: ''	category: 'MusicIO-OSC'!Smalltalk.Siren defineClass: #CmusicVoice	superclass: #{Siren.NotelistVoice}	indexedType: #none	private: false	instanceVariableNames: ''	classInstanceVariableNames: ''	imports: ''	category: 'MusicIO-Voices'!Smalltalk.Siren defineClass: #OSCBundle	superclass: #{Siren.AbstractOSCPacket}	indexedType: #none	private: false	instanceVariableNames: 'messages time '	classInstanceVariableNames: ''	imports: ''	category: 'MusicIO-OSC'!Smalltalk.Tools defineClass: #VisualLauncher	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: 'menuBar toolBar textCollector toolDock testMessage statusBar '	classInstanceVariableNames: ''	imports: ''	category: 'Tools-Misc'!Smalltalk.Siren defineClass: #CmixVoice	superclass: #{Siren.NotelistVoice}	indexedType: #none	private: false	instanceVariableNames: ''	classInstanceVariableNames: ''	imports: ''	category: 'MusicIO-Voices'!Smalltalk.Siren defineClass: #MIDIVoice	superclass: #{Siren.Voice}	indexedType: #none	private: false	instanceVariableNames: 'channel currentTime '	classInstanceVariableNames: 'useSingleton singleton default '	imports: ''	category: 'MusicIO-MIDI'!Smalltalk.Siren defineClass: #OSCMessage	superclass: #{Siren.AbstractOSCPacket}	indexedType: #none	private: false	instanceVariableNames: 'address arguments '	classInstanceVariableNames: ''	imports: ''	category: 'MusicIO-OSC'!Smalltalk.Siren defineClass: #TypedOSCMessage	superclass: #{Siren.OSCMessage}	indexedType: #none	private: false	instanceVariableNames: ''	classInstanceVariableNames: ''	imports: ''	category: 'MusicIO-OSC'!Smalltalk.Siren defineClass: #OSCByteConvertor	superclass: #{Core.Object}	indexedType: #none	private: false	instanceVariableNames: 'packetData '	classInstanceVariableNames: ''	imports: ''	category: 'MusicIO-OSC'!Smalltalk.Siren defineClass: #SoundVoice	superclass: #{Siren.Voice}	indexedType: #none	private: false	instanceVariableNames: ''	classInstanceVariableNames: ''	imports: ''	category: 'MusicIO-Voices'!Smalltalk.Siren defineClass: #SuperColliderVoice	superclass: #{Siren.NotelistVoice}	indexedType: #none	private: false	instanceVariableNames: ''	classInstanceVariableNames: ''	imports: ''	category: 'MusicIO-Voices'!Smalltalk.Tools defineClass: #ListWorkBook	superclass: #{Tools.Workbook}	indexedType: #none	private: false	instanceVariableNames: 'textView '	classInstanceVariableNames: ''	imports: ''	category: 'Tools-Workspace'!Smalltalk.Siren defineClass: #OSCPort	superclass: #{Siren.PortModel}	indexedType: #none	private: false	instanceVariableNames: 'socket address '	classInstanceVariableNames: ''	imports: ''	category: 'MusicIO-OSC'!Siren.OSCBundle defineSharedVariable: #MillisecToNTP	private: false	constant: false	category: 'Time constants'	initializer: '((2 raisedTo: 32) / 1000)'!Siren.Voice defineSharedVariable: #DefaultVoiceClass	private: false	constant: false	category: 'As yet unclassified'	initializer: nil!Siren.OSCBundle defineSharedVariable: #SecsInAYear	private: false	constant: false	category: 'Time constants'	initializer: '(60 * 60 * 24 * 365)'!Siren.OSCBundle defineSharedVariable: #MillisecScale	private: false	constant: false	category: 'Time constants'	initializer: '4295000'!!Core.Object methodsFor: 'converting'!Hertz	"Answer a HertzPitch whose value is the receiver."	^Siren.HertzPitch value: self!Hz	"Answer a HertzPitch whose value is the receiver."	^Siren.HertzPitch value: self!ampl	"Answer a loudness whose value is the receiver."	^Siren.Amplitude value: self!beat	"Answer a ratio duration whose value is the receiver."	^Siren.RatioDuration value: self!dB	"Answer a deciBel loudness whose value is the receiver."	^Siren.DBLoudness value: self!dur	"Answer a duration whose value is the receiver."	^Siren.Duration value: self!duration	"Answer a duration whose value is the receiver."	^Siren.Duration value: self!loudness	"Answer a loudness whose value is the receiver."	^Siren.Amplitude value: self!measures	"Answer a duration whose value is the receiver."	^Siren.MeasureDuration value: self!mostGeneral	^self!msec	"Answer a duration whose value is the receiver." 	^Siren.MSecondDuration value: self!note	"Answer a MIDI pitch whose value is the receiver."	^Siren.MIDIPitch value: self!pitch	"Answer a pitch whose value is the receiver."	^Siren.Pitch value: self!sec	"Answer a duration whose value is the receiver."	^Siren.SecondDuration value: self!seconds	"Answer a duration whose value is the receiver."	^Siren.SecondDuration value: self!usec	"Answer a duration whose value is the receiver." 	^Siren.USecondDuration value: self!value	"Answer the 'value' of the receiver (i.e., itself)."	^self!velocity	"Answer a MIDI loudness whose value is the receiver."	^Siren.MIDIVelocity value: self! !!Core.Object methodsFor: 'testing'!hasItems	"Answer whether or not the receiver has items or components."	^false!isAssociation	"Return true if the receiver is an association.	Note: Do not override in any class except association."	^false!isCPointer	"Coerces CPointers to true and everything else to false."	^false!isDisplayItem	"Answer whether the receiver is a kind of DisplayItem"	^false!isEvent	"Coerces Events to true and everything else to false.  Event	overrides with ^true"	^false!isEventList	"Coerces EventLists to true and everything else to false.  EventList	overrides with ^true"	^false!isMusicMagnitude	"Answer false for anything but a real MusicMagnitude."	^false!isPoint	"Coerces Points to true and everything else to false. Point overrides with ^true"	^false!isTreeNode	"Answer whether the receiver is a tree node."	^false!isUnitGenerator	"Answer Whether the receiver is a kind of CSL UnitGenerator"	^false!isVoice	"Answer false"	^false! !!Core.Object methodsFor: 'associating'!=> anObject	"Answer an EventAssociation between the receiver and the argument."	"1.234 => (DurationEvent dur: 250 msec voice: #flute)"	^Siren.EventAssociation new key: self value: anObject! !Siren.AbstractOSCPacket comment:'AbstractOSCPacket is the parent of the concrete OSC packet classes.Subclasses must implement the following messages:	osc>>toOSCBytes:Instance Variables:	oscBytes	<ByteArray>  my packet contents'!!Siren.AbstractOSCPacket methodsFor: 'accessing'!oscBytes	^oscBytes!oscSize	^oscBytes size! !!Siren.AbstractOSCPacket methodsFor: 'osc'!toOSCBytes: converter 	self subclassResponsibility.	^self! !!Siren.AbstractOSCPacket methodsFor: 'initialize-release'!init	| convertor |	convertor := OSCByteConvertor new.	self toOSCBytes: convertor.	oscBytes := convertor contents.	^self! !!UI.WidgetPolicy class methodsFor: 'private-initializing'!initializeDefaultGenericColors	"	WidgetPolicy initialize.		WidgetPolicy subclasses do: [ :class | class initialize].		Screen default flushPaintPreferencesCache.		ScheduledControllers restore "	| background |	background := ((ColorValue lightYellow blendWith: ColorValue white) 				blendWith: ColorValue white) "blendWith: ColorValue veryLightGray".	self allPreferencesDo: [ :preferences | 		preferences			matchAt: SymbolicPaint border put: ColorValue lightGray;			matchAt: SymbolicPaint foreground put: ColorValue black;			matchAt: SymbolicPaint background put: background;			matchAt: SymbolicPaint selectionForeground put: ColorValue black;			matchAt: SymbolicPaint selectionBackground put: (background blendWith: ColorValue gray);			matchAt: SymbolicPaint inactiveBackground put: ColorValue white;			matchAt: SymbolicPaint inactiveForeground put: ColorValue gray;			matchAt: SymbolicPaint inactiveSelectionBackground put: ColorValue lightGray;			matchAt: SymbolicPaint hilite put: preferences backgroundColor asHiliteColor;			matchAt: SymbolicPaint shadow put: preferences backgroundColor asShadowColor;			matchAt: SymbolicPaint separator put: ColorValue gray;			matchAt: SymbolicPaint traversalHilite put: ColorValue gray	].	self defaultGrayWidgetColors		matchAt: SymbolicPaint selectionBackground put: ColorValue lightGray.	self defaultMonochromeWidgetColors		matchAt: SymbolicPaint selectionForeground put: ColorValue white;		matchAt: SymbolicPaint selectionBackground put: ColorValue black! !!Siren.Voice class methodsFor: 'class initialization'!initialize	"set up the shared dictionary for caching voices"	"Voice initialize"	"Voice allSubclassesDo: [ :each | each initialize]"	SirenSession initializeVoices.	DefaultVoiceClass := #OSCVoice.!reset	"Reset all sub-instances of Voice."	"Voice reset"	self allSubInstancesDo: [ :aV | aV reset ]!setDefault: className	"Set the default class to use for new voices"	"Voice initialize."	DefaultVoiceClass := className! !!Siren.Voice class methodsFor: 'instance creation'!default	"Answer a voice."	DefaultVoiceClass == #MIDIVoice ifTrue: [^MIDIVoice default].	DefaultVoiceClass == #OSCVoice ifTrue: [^OSCVoice default].	DefaultVoiceClass == #SoundVoice ifTrue: [^SoundVoice default].	DefaultVoiceClass == #SuperColliderVoice ifTrue: [^SuperColliderVoice default].	(SirenSession voices == nil or: [SirenSession voices isEmpty])		ifFalse: [^SirenSession voices associations asOrderedCollection first value]		ifTrue: [self error: 'Unknown default voice class'].!named: aName	"Answer the shared dictionary's voice item at the given name (or the name itself if it's a voice)"	(aName isKindOf: Voice)		ifTrue: [^aName].	(aName class == SmallInteger)		ifTrue: [^MIDIVoice default].	(SirenSession voices ~~ nil and: 			[SirenSession voices includesKey: aName printString asSymbol])		ifTrue: [^SirenSession voices at: aName printString asSymbol]			ifFalse: [Voice default].!on: someStream	"Answer a new voice instance on the given stream."	| me |	me := self new initialize.	me stream: someStream.	^me! !Siren.Voice comment:'Subclasses of Voice implement the mappings between symbolic event parameters (like timbre descriptions and pitch names) and concrete output event data.They can be used for generating sound compiler notelists or (real-time output or file dumps of) MIDI data.The instance variables are:	instrument <Symbol, association or device> my instrument	name 		<String or Symbol> my handle or name	stream		<Stream> my (optional) I/O streamThe global object Voices is a dictionary that note events can refer to with integer or symbolic keys.'!!Siren.Voice methodsFor: 'accessing'!species	^Voice! !!Siren.Voice methodsFor: 'events'!eventList	"Answer an event list read from the receiver."	| e |	e := EventList newAnonymous.	self readOnto: e.	^e!play: anEventList	"Expand the list and play it now."	^self play: anEventList at: Time microsecondClock!play: anEventOrList at: start	"Expand the list and play it at the given time."	| t e |	anEventOrList hasItems		ifFalse: [^self playEvent: anEventOrList at: start].	anEventOrList events do:		[ :ass |		t := ass key asUsec.		e := ass value.		e hasItems 			ifTrue: [self play: e at: t + start]			ifFalse: [self playEvent: e at: t + start]]!playEvent: anEvent	"Play the argument now."self halt.	self playEvent: anEvent at: 0!playEvent: anEvent at: aTime	"make sure my subclasses implement this"	self subclassResponsibility!readOnto: eventList	"Read events from the receiver into the argument."	self subclassResponsibility! !!Siren.Voice methodsFor: 'accessing'!instrument	"return my instrument."	^instrument!instrument: newValue	"set my instrument."	instrument := newValue!name	"return my name."	^name!name: newValue	"set my name."	name := newValue!stream	"answer the stream of the receiver voice"	^stream!stream: someStream	"plug in a stream to the receiver voice"	stream := someStream! !!Siren.Voice methodsFor: 'testing'!isVoice	"Answer true"	^true! !!Siren.Voice methodsFor: 'printing'!printOn: aStream	"Print the receivcer on the argument."	aStream nextPutAll: 'a ', self class name! !!Siren.Voice methodsFor: 'initialize-release'!close	"Close the stream, devise, or whatever."	self subclassResponsibility!initialize	"Set up a Voice."	^self!initializeNamed: aName 	"Set up a named Voice."	self initialize.	(aName isKindOf: Number)		ifTrue: [name := aName printString]		ifFalse: [name := aName].	SirenSession voices ~~ nil		ifTrue: [SirenSession voices at: name asSymbol put: self]! !!Siren.MIDIFileVoice class methodsFor: 'instance creation'!newOn: fnam 	| inst realName |	realName := SirenUtility findFile: fnam.	(inst := self new) stream: (Filename named: realName) readStream binary.	inst name: fnam.	^inst! !!Siren.MIDIFileVoice class methodsFor: 'examples'!midiFileExample	"MIDIFileVoice midiFileExample"	(MIDIFileVoice newOn: 'K194.MID')		readOnto: (EventList newNamed: #K194).	(EventList named: #K194) edit.	^self! !Siren.MIDIFileVoice comment:'A MIDIFileVoice can read version 2 MIDI files.'!!Siren.MIDIFileVoice methodsFor: 'initialize-release'!close	"Close the stream, device, or whatever."	stream close! !!Siren.MIDIFileVoice methodsFor: 'accessing'!defaultEventClass	^MusicEvent!tempo	^tempo!tempo: tem	tempo := tem! !!Siren.MIDIFileVoice methodsFor: 'private'!getVarLen	"Combine 1 or more input bytes from my stream into a variable length item"	| answer byte |	answer := 0.	byte := 16r80.	[(byte bitAnd: 16r80) == 0] whileFalse: [		byte := stream next. 		answer := (answer bitShift: 7) + (byte bitAnd: 16r7F)].	^answer! !!Siren.MIDIFileVoice methodsFor: 'read/write'!eventList	"load a MIDI file into anEventList."	"For file types 1 and 2, extra EventLists are created within anEventList, one per track."	"(MIDIFileVoice newOn: 'fuga1.midi') eventList inspect"	"(MIDIFileVoice newOn: 'fuga1.midi') eventList edit"	| anEventList subEventList |	anEventList := EventList newAnonymous.	self readMThd.	[stream atEnd] whileFalse:		[subEventList := EventList newAnonymous.		self readTrackOnto: subEventList.		anEventList add: subEventList at: 0]."	anEventList at: #tempo put: ((60000000/tempo) asInteger)."		"tempo in bpm"	Transcript show: ((anEventList events) size) printString, ' track EventLists'; cr.	^anEventList!readMThd	"Read the header chunk from MIDI binary file."	| word |	(SirenUtility verbosity > 1) ifTrue: [Transcript show: '	size: ', stream size printString; cr].	word := stream nextLong.			" 'MThd' "	(word = 16r4D546864)		ifFalse: [self error: 'Wrong value in MIDI file header: ', (word printStringRadix: 16); cr].	word := stream nextLong.			"length -- always 6"	fileType := stream nextWord.		"MIDI file type (0, 1, 2)"	(SirenUtility verbosity > 1) ifTrue: [Transcript show: '	MIDI file format ', fileType printString; cr].	tracks := stream nextWord.		"no. tracks"	(SirenUtility verbosity > 1) ifTrue: [Transcript show: '	number of tracks = ', tracks printString; cr].	ppq := stream nextWord.	"division (ticks per quarter beat)"	(SirenUtility verbosity > 1) ifTrue: [Transcript show: '	ticks per quarter beat = ', ppq printString; cr].!readMTrk	"Read a track chunk from MIDI binary file. Answer its length."	| length word  |	word := stream nextLong.			" 'MT' "	word == false ifTrue: [word := 0].	(word = 16r4D54726B)		ifFalse: [self error: 'Wrong value in MIDI track header: ', 						(word printStringRadix: 16); cr].	length := stream nextLong.		"length"	^length!readOnto: eventList 	"Read a MIDI file"	| track |	Transcript show: 'Reading MIDI file ', name; cr.	self readMThd.	[stream atEnd]		whileFalse: 			[track := EventList newAnonymous.			self readTrackOnto: track.			track events isEmpty				ifFalse: [eventList add: track at: 0]]."	Transcript show: eventList events size printString , ' tracks.'; cr."	^self!readTrackOnto: anEventList 	"Read a track of MIDI events from my stream into anEventList"	| fileTime trackTime deltaTime byte type vel  length startPos |	length := self readMTrk.			"read track chunk header"	startPos := stream position.	fileTime := 0.	trackTime := 0.	[stream position < (startPos + length)]		whileTrue: [fileTime := fileTime + self getVarLen.			"Get the delta time"																	"convert pulses to ms"			deltaTime := (fileTime / ppq * 600000 / 1000 asFloat - trackTime) asInteger.			trackTime := trackTime + deltaTime.			byte := stream next.									"Get the event itself"			byte ifNotNil:				[(byte bitAnd: 16r80) = 16r80						"if sysex" 				  ifTrue: [byte = 16rFF								"a meta-event?"					ifTrue: [type := stream next]					"read meta-type"					ifFalse: [type := byte.						type = 16rF0 ifFalse: [byte := stream next]]].			(type < 128 or: [type = 16rF0])							"Process a meta- or sysex event"				ifTrue: [type == 16r51								"tempo setting"						ifTrue: [tempo := 0.							self getVarLen timesRepeat: 								[tempo := tempo * 256 + stream next]]						ifFalse: [(SirenUtility verbosity > 1)							ifTrue: [Transcript show: '	meta or sysex, ' , 								(type printStringRadix: 16), ' -- '.								self getVarLen timesRepeat:		"skip over other sysex"									 [Transcript show: (stream next printStringRadix: 16), ' '].								Transcript cr]]]				ifFalse: [(type bitAnd: 16rE0) = 16rC0				"Process normal MIDI event"						ifTrue: [vel := nil]						ifFalse: [vel := stream next].				"program change or channel pressure"					anEventList 						add: ((self defaultEventClass pitch: byte ampl: vel 								voice: (type bitAnd: 15)) command: (byte bitAnd: 16rF0))						at: trackTime msec]]].	anEventList code: #noteOnOff.	anEventList setDurations."	Transcript show: anEventList events size printString , ' events'; cr"! !!Siren.MIDIPort class methodsFor: 'output tests'!testANote	"Open MIDI, play a note."	"MIDIPort release"	"MIDIPort testANote"	| inst |	inst := MIDIPort new.	inst openOutput: self concreteClass out.	inst play: 60 dur: 500 amp: 80 voice: 0.	1 wait.	inst close.! !!Siren.MIDIPort methodsFor: 'read/write'!play: streamID pitch: aPitch dur: aDur amp: anAmp voice: aVoice	"Play a note (on/off message pair) with the given parameters on the receiver."	"This is the default method for drivers with no 1-call noteOn/Off command."	 | s v |	v := (aVoice - 1) max: 0.		"zero-based stream and voice index"	s := (streamID) " max: 0".	(#open == status) ifFalse: [self openOutput].	self playOn: s pitch: aPitch amp: anAmp voice: v.	aDur isNil					"Schedule note-off in a forked wait block."		ifFalse: [[(Delay forMicroseconds: aDur) wait.				self playOff: s pitch: aPitch amp: anAmp voice: v] fork]! !!Siren.PortMIDIPort class methodsFor: 'examples'!testANote	"Open MIDI, play a note."	"PortMIDIPort testANote"	| inst |	inst := MIDIPort new.		"this answers an instance of me."	inst open.	inst playOn: 60 amp: 80 voice: 0.	1 wait.	inst playOff: 60 amp: 80 voice: 0.	inst close.	inst terminate.	MIDIPort cleanUp! !!Siren.PortMIDIPort methodsFor: 'read/write'!playOff: aPitch amp: anAmp voice: aVoice	"Play the argument on the receiver--no duration-->no note-off."	| pt | 	Streams ifNotNil: [pt := Streams at: device ifAbsent: [nil]].	pt ifNil: [pt := device].	[self critical: [driver pm_write_data3: (Streams at: device) 			with: ((MIDICommands at: #noteOff) bitOr: aVoice) 			with: aPitch with: anAmp]]		on: Error		do: [ :ex | Transcript show: 'MIDI write error'; cr]!playOff: streamID pitch: pitch amp: amp voice: voice	"Play the argument on the receiver."	| pt | 	self isActive ifFalse: [^self].	Streams ifNotNil: [pt := Streams at: streamID ifAbsent: [nil]].	pt ifNil: [pt := streamID].	[self critical: 			[driver pm_write_data3: pt with: ((MIDICommands at: #noteOff) bitOr: voice) with: pitch with: 0]]		on: Error		do: [ :ex | Transcript show: 'MIDI write error'; cr]!playOn: aPitch amp: anAmp voice: aVoice	"Play the argument on the receiver--no duration-->no note-off."	| pt | 	Streams ifNotNil: [pt := Streams at: device ifAbsent: [nil]].	pt ifNil: [pt := device].	[self critical: 			[driver pm_write_data3: pt with: ((MIDICommands at: #noteOn) bitOr: aVoice) with: aPitch with: anAmp]]		on: Error		do: [ :ex | Transcript show: 'MIDI write error'; cr]!playOn: streamID pitch: pitch amp: amp voice: voice	"Play the argument on the receiver--no duration-->no note-off."	| pt |	Streams ifNotNil: [pt := Streams at: streamID ifAbsent: [nil]].	pt ifNil: [pt := streamID].	[self critical: 			[driver pm_write_data3: pt with: ((MIDICommands at: #noteOn) bitOr: voice) with: pitch with: amp]]		on: Error		do: [ :ex | Transcript show: 'MIDI write error'; cr]!put: streamID data: data length: size	"Send the argument (a ByteArray for historical reasons) to the receiver now."	| pt | 	Streams ifNotNil: [pt := Streams at: streamID ifAbsent: [nil]].	pt ifNil: [pt := streamID].	[(size < 2)		ifTrue: [^self error: 'Unknown MIDI command format -- illegal length'].	(size = 2)		ifTrue: [^self critical: [driver pm_write_data2: streamID with: (data at: 1) with: (data at: 2)]].	(size = 3)		ifTrue: [^self critical: [driver pm_write_data3: streamID with: (data at: 1) with: (data at: 2) with: (data at: 3)]].	(size > 3)		ifTrue: [self halt]] 		"not supported yet"			on: Error			do: [ :ex | Transcript show: 'MIDI write error'; cr].	^nil!readControllersFrom: lo to: hi into: array	"Read a range of controllers"	self critical: [driver pm_read_controllers: (Streams at: device) with: lo with: hi with: array].! !!Core.Number methodsFor: 'converting'!wait	"Delay for the receiver in seconds"	(Delay forSeconds: self) wait.! !!Core.Integer methodsFor: 'converting'!asASCII	"Answer the receiver as a raw ASCII string"	"16r4D546864 asASCII"	| length string |	length := (((self log: 2) truncated + 1) / 8) truncated.	string := String new: length + 1.	length to: 0 by: -1 do:		[ :index |		string at: (length - index + 1) put: 			(Character value: ((self bitAnd: (16rFF bitShift: index * 8)) 						bitShift: (index * 8) negated))].	^string!key	"Answer a MIDI pitch whose value is the receiver."	^Siren.MIDIPitch value: self! !!Core.Integer methodsFor: 'printing'!toOSCBytes: aConvertor 	"pad beginning with 0's"	aConvertor next: 4 - self digitLength put: 0.	self digitLength		to: 1		by: -1		do: [:i | aConvertor nextPut: (self digitAt: i)]! !!Core.SmallInteger methodsFor: 'printing'!toOSCTypeOn: aConvertor 	aConvertor nextPutType: $i! !!Core.Point methodsFor: 'testing'!isPoint	"Coerces Points to true and everything else to false. Point overrides with ^true"	^true! !!Core.Point methodsFor: 'truncation and round off'!float	"Answer a new Point that is the receiver's x and y as floating-point numbers."	^x asFloat @ y asFloat! !!Core.Point methodsFor: 'coercing'!@ aZValue	"Answer a ZPoint with the receiver and the argument as coordinates."	^ZPoint x: x y: y z: aZValue! !!Siren.NotelistVoice class methodsFor: 'instance creation'!defaultPMap	"Answer the default parameterMap of the receiver class's instances."	self subclassResponsibility!newNamed: aName onFile: fName	"Set up a NotelistVoice on the given output file"	"CmusicVoice newNamed: 'violin' onFile: 't.out.cmusic'"	^self new initializeNamed: aName onStream: (Filename named: fName) readStream!newNamed: aName onStream: aStream	"Set up a NotelistVoice on the given output stream"	"CmusicVoice newNamed: 'violin' onStream: Transcript"	^self new initializeNamed: aName onStream: aStream!onFileNamed: fName	"Set up a NotelistVoice on the given output file"	"CmusicVoice onFile: 't.out.cmusic'"	^self new initializeOnStream: fName asFilename writeStream! !Siren.NotelistVoice comment:'Instances of the subclasses of NotelistVoice can read or write note list file streams in various formats for software sound synthesis packages such as cmusic, csound, or cmix.Note that we are output-only at present.Instance Variables:	parameterMap		<OrderedCollection of Symbols, Blocks, or Associations> 			the object''s P:=map, used to print out or parse note commands.'!!Siren.NotelistVoice methodsFor: 'events'!dump: aStringOrValue 	"The case I handle is strings. Subclasses may override."	stream nextPutAll: aStringOrValue!endLine	"Put the proper command terminator on the receiver's stream."	stream cr!mapProperty: item of: ass within: list 	"Write the given event association to the receiver's stream in the appropriate format."	| event time |	event := ass value.	time := ass key asSec value.	item isSymbol		ifTrue: [item == #start				ifTrue: [self dump: time printString]				ifFalse: [item == #delay						ifTrue: [self dump: (list nextTimeFor: ass) asSec value printString]						ifFalse: [self dump: ((event perform: item) asFloat printString: 4)]].			^self].	item isString		ifTrue: [self dump: item.			^self].	(item isMemberOf: BlockClosure)		ifTrue: [item numArgs = 1				ifTrue: ["1-arg blocks = send event"					self dump: (item value: event)					"2-arg blocks = send ass and list"]				ifFalse: [self dump: (item value: ass value: list)]]		ifFalse: [self error: 'unknown voice map item type.']!play: anEL	"Perform the argument."	self writeHeader.	self play: anEL at: 0.	self writeFooter!play: anEL at: start	"Perform the argument."	| time event |	anEL do: 		[ :ass |		time := ass key asSec value.		event := ass value.		event isEventList			ifTrue: [self play: event at: time + start]			ifFalse: [self playAssociation: ass in: anEL]].!playAssociation: ass in: list	"Write the given event association to the receiver's stream in the appropriate format."	stream == nil ifTrue: [^self].	parameterMap do:			"print out the fields in my p-map"		[ :item |		self mapProperty: item of: ass within: list ]		separatedBy: [self space].	self endLine!space	"Put the proper field separator on the receiver's stream."	stream space; tab!writeFooter	"Write a notelist file footer on the receiver's stream."	^self!writeHeader	"Write a notelist file header on the receiver's stream."	^self! !!Siren.NotelistVoice methodsFor: 'accessing'!addMap: anItem	"Add the argument (a symbol or block), to the parameterMap of the receiver"	parameterMap addLast: anItem!header: aString	"Set the file header string of the receiver."	header := aString!parameterMap	"Answer the parameterMap of the receiver."	^parameterMap!parameterMap: anOrderedCollection	"Set the parameterMap of the receiver."	parameterMap := anOrderedCollection! !!Siren.NotelistVoice methodsFor: 'initialize-release'!close	"Close the receiver's output stream (if it's a file)."	stream flush; close!initialize	"Initialize the receiver."	self parameterMap: self class defaultPMap!initializeNamed: aName onStream: theStream	"Answer a new named NotelistVoice on the given stream."	self initializeNamed: aName.	stream := theStream!initializeOnStream: theStream	"Answer a new named NotelistVoice on the given stream."	self initialize.	stream := theStream! !!Siren.CsoundVoice class methodsFor: 'examples'!randomExampleToFileAndEdit	"CsoundVoice randomExampleToFileAndEdit"	self randomExampleToFileNamed: 'rand.sco'.	^self!randomExampleToFileNamed: fnam 	"Create a random event list and store it on a file."	"CsoundVoice randomExampleToFileAndEdit"	| evt strm list rand vox |	strm := (Filename named: fnam) writeStream.	rand := Random new."Create the event list and add a few additional properties"	(list := EventList randomExample: 64)		do: [ :ass | 			(evt := ass event) at: #pos put: rand next.			evt at: #prop1 put: (rand nextFrom: 320 to: 480).			evt at: #prop2 put: (rand nextIntFrom: 12000 to: 23000)]."Create a csounc voice and customize its parameter map."	(vox := CsoundVoice newNamed: '1' onStream: strm) addMap: #pos.	vox addMap: [ :item | ((item at: #prop1) / 1000) printString: 4].	vox addMap: #prop2."Play the list on the voice."	vox play: list.	strm close.	(Filename named: fnam) edit.	^self! !!Siren.CsoundVoice class methodsFor: 'instance creation'!defaultPMap	| map |	(map := OrderedCollection new: 8) add: [:t2 | 'i' , (t2 voice == nil				ifTrue: [1]				ifFalse: [t2 voice]) printString].	map add: #start.	map add: [ :t3 | t3 duration asSec value asFloat printString: 4].	map add: [ :t4 | t4 loudness asDB positiveDB printString: 4].	^map! !Siren.CsoundVoice comment:'A CsoundVoice can write an event list to a sco format file for use by Csound.'!!Siren.CsoundVoice methodsFor: 'events'!writeFooter	stream cr; nextPutAll: 'end'; cr; cr.	^self!writeHeader	stream nextPutAll: ';; csound score file created ', Date today printString; cr.	stream cr; nextPutAll: 'f1 0 1024 10 1'; cr.	stream cr.	^self! !!Siren.SirenUtility class methodsFor: 'class initialization'!initialize0	"Edit these to taste for your installation."	"SirenUtility initialize. SirenSession initialize"	"SirenUtility dataDir"	"SirenSession eventLists"	"SirenUtility findFile: 'tuba'"	"See also system-dependent setup in SirenUtility>>playSoundFile"	| sirenDir |	DefaultMIDIIn := 1.			"Tune these to your setup"	DefaultMIDIOut := 2.	DefaultOSCHost := #[127 0 0 1].	DefaultOSCPort := 54321.	PortModel initialize.	Verbosity := 1.				"0 = pretty silent;								 1 = medium-verbose; 								 2 = full scheduler and interface logging"	LoggingStream := nil.			"logging output file"								"Look for Siren data and set search paths"	DataDir := '/Content/Code/Smalltalk'.	sirenDir := '/Content/Code/Smalltalk/Siren9/'."	sirenDir := SirenUtility findDir: 'Siren9' tryHard: false.	sirenDir ifNil: [self error: 'Cannot find Siren release folder'].	sirenDir := sirenDir, Filename separatorString."	ScoreDir := OrderedCollection with: (sirenDir, 'Data') asSymbol.	"Scores""	self addDir: 'Scores' to: ScoreDir.	self addDir: 'MIDI' to: ScoreDir."	SoundDir := OrderedCollection with: (sirenDir, 'Data') asSymbol.	"Sound files""	self addDir: 'Sound' to: SoundDir.	self addDir: 'Samples' to: SoundDir.	self addDir: 'SHARC/*' to: SoundDir."					"You can add using wildcards""	self addDir: 'Databases/*' to: SoundDir."				"STP-specific"	DataDir := OrderedCollection new.	DataDir addAll: ScoreDir.	DataDir addAll: SoundDir.	DataDir :=   DataDir asSet asOrderedCollection.	SirenSession initialize								"Session setup"! !!Siren.SirenUtility class methodsFor: 'class initialization'!initialize	"Edit these to taste for your installation."	"SirenUtility initialize. SirenSession initialize"	"SirenUtility dataDir"	"SirenSession eventLists"	"SirenUtility findFile: 'tuba'"	"See also system-dependent setup in SirenUtility>>playSoundFile"	| sirenDir |	DefaultMIDIIn := 1.			"Tune these to your setup"	DefaultMIDIOut := 2.	DefaultOSCHost := #[127 0 0 1].	DefaultOSCPort := 54321.	PortModel initialize.	Verbosity := 1.				"0 = pretty silent;								 1 = medium-verbose; 								 2 = full scheduler and interface logging"	LoggingStream = nil.			"logging output file"								"Look for Siren data and set search paths"	sirenDir := SirenUtility findDir: 'Siren_9.0' tryHard: false.	sirenDir ifNil: [self error: 'Cannot find Siren release folder'].	sirenDir := sirenDir, Filename separatorString.	ScoreDir := OrderedCollection with: (sirenDir, 'Data') asSymbol.	"Scores"	self addDir: 'Scores' to: ScoreDir.	self addDir: 'MIDI' to: ScoreDir.	SoundDir := OrderedCollection with: (sirenDir, 'Data') asSymbol.	"Sound files"	self addDir: 'Sound' to: SoundDir.	self addDir: 'Samples' to: SoundDir.	self addDir: 'SHARC/*' to: SoundDir.					"You can add using wildcards""	self addDir: 'Databases/*' to: SoundDir."				"STP-specific"	DataDir := OrderedCollection new.	DataDir addAll: ScoreDir.	DataDir addAll: SoundDir.	DataDir :=   DataDir asSet asOrderedCollection.	SirenSession initialize								"Session setup"!postLoad: aParcel	"Load the missing pieces and put up a dialog after loading the parcel"	| book text found |	Transcript show: 'Loading the MusicConstants from the web'; cr.	found := true.	['MusicConstants.st' asFilename fileIn] 		on: Error do: [ :ex | found := false].	found ifFalse: [	[('Siren7.5', Filename separatorString, 'MusicConstants.st') asFilename fileIn]		on: Error do: [ :ex | Transcript tab; show: 'Cannot find file Siren7.5/MusicConstants.st.'; cr]].	Transcript tab; show: 'done.'; cr.	found := true.	[(ListWorkBook new loadFromBoss: 'Siren7.5.Workbook.bos') open]		on: Error		do: [ :ex | found := false].	found ifFalse: [	[(ListWorkBook new loadFromBoss: 						('Siren7.5', Filename separatorString, 'Siren7.5_Workbook.bos')) open]		on: Error		do: [ :ex | Transcript tab; show: 'Cannot find file Siren7.5/Siren7.5.Workbook.bos.'; cr.			found := false]].	text := 'Welcome to Siren!!To use the package more fully, you should down-load the support files (Siren7.5.zip) from the Siren web site at http://FASTLabInc.com/Siren. These include an additional file-in of icons and constants (MusicConstants.st -- I just tried to file it in) as well as a documentation workbook (see below) as well as the external DLLCC files for using the sound and MIDI I/O facilities, and the CSL and Loris interfaces.To load the MusicConstants from the web,	''Siren7.5/MusicConstants.st'' asFilename fileIn.To load the Siren workbook from the web (in case you haven''t downloaded the Siren zip file), do this,	[(ListWorkBook new loadFromBoss: ''Siren7.5/Siren7.5.Workbook.bos'') open]Enjoy!!Stephen PopeSanta Barbara, May, 2007'.	book := ListWorkBook new		replaceAllTextPagesWith: (WorkspacePage 			labeled: (#installationWorkspace << #labels >> 'Siren Instructions')			on: (text asValue));		yourself.	book open! !!Siren.SirenUtility class methodsFor: 'scripts'!audiofileInsertsToUpdate: sql to: outN	"Convert an SQL insert to a delete"	"533937, '/SFX/Video objects/Gunshots and Explosions/Gunshots', 'X0027748_Heat - Gunshots_62.aiff', 'X' ); " | inp out ind path nam typ |inp := (Filename named: sql) readStream.out := (Filename named: outN) writeStream.Transcript clear.[inp atEnd] whileFalse:	[ind := inp upTo: $,.	inp upTo: $'.	path := inp upTo: $,.	inp skip: 2.	nam := inp upTo: $,.	inp skip: 2.	typ := inp upTo: $ .	inp upTo: Character cr.	out nextPutAll: 'update AudioFiles set Path = ''', path, ' File_name = ''', nam, ' Short_name = ''', typ, 		' where  Audio_file_id = ', ind, ';'; cr].inp close.out close."SirenUtility audiofileInsertsToUpdate: '/Users/stp/Code/FMAK4/MM_Analyzer/DB_Pop1/AudioFileInserts2.txt' 	to: '/Users/stp/Code/FMAK4/MM_Analyzer/DB_Pop1/AudioFileInserts2b.txt' "!collectGenreHistogramsStartingAt: ind	"Collect 100 genre histograms for the given seed song"	"SirenUtility collectGenreHistogramsStartingAt: '7080'" "Classical"	| arg reply strm coll dict |	arg := ind.	dict := IdentityDictionary new.	100 timesRepeat:		[reply := SirenUtility exploreRecommendationFor: arg.		SirenUtility genreHistogramOf: reply into: dict.		strm := (ReadStream on: reply).		strm upTo: Character cr.		arg := strm upTo: $ "space"]."Now sort and print the dict"	coll := OrderedCollection new.	dict keysAndValuesDo:		[ :k :v |		coll add: (v -> k)].	coll sort: [:a :b | a > b].	Transcript clear.	coll do: [ :it | Transcript show: it value asString, ' - ', it key printString; cr]!compareFileLists: sql and: files to: outN	"compare a file with the list of SQL records and the list of all files." | inp lin fnd nfnd out |inp := (Filename named: sql) readStream.out := (Filename named: outN) writeStream.Transcript clear.fnd := 0.nfnd := 0.[inp atEnd] whileFalse:	[lin := inp upTo: Character cr.	(Filename named: '/Volumes/Media/CoreDataSets', lin) exists		ifTrue: [fnd := fnd + 1]		ifFalse: [nfnd := nfnd + 1. 				out nextPutAll: lin; cr]].inp close.out close.Transcript show: 'Done'; crtab; show: fnd printString, ' found, '; crtab; show: nfnd printString, ' not found'; cr"SirenUtility compareFileLists: '/Volumes/Media/CoreDataSets/names.txt' 	and: '/Volumes/Media/CoreDataSets/list-all.txt'	to: '/Volumes/Media/CoreDataSets/missing-files.txt' "!convertAFInserts: fil	"make a delete out of an insert"	"INSERT INTO AudioFiles(Path, File_name, Short_name) VALUES ( '/Samples/Drums/BFD2/Audio/DW Collectors/Kick/Hit', 'S0051820_master01.wav', 'S' );"	| inp lin |	inp := (Filename named: fil) readStream.	Transcript clear.	[inp atEnd] whileFalse:		[lin := ReadStream on: (inp upTo: Character cr).		3 timesRepeat: [lin upTo: $, ].		lin skip: 2.		Transcript show: 'DELETE FROM AudioFiles where file_name like: ''%', (lin upTo: $'), ''''; cr]"SirenUtility convertAFInserts: '/Users/stp/Code/FMAK4/MM_Analyzer/DB_Pop1/AF_inserts.sql'"!convertEtDrScore: string	"make a delete out of an insert"	"convertEtDrScore:"	| inp lin tim nam sec times names tval |	inp := string asFilename readStream.	Transcript clear.	times := OrderedCollection new.	names := OrderedCollection new.	[inp atEnd] whileFalse:		[lin := ReadStream on: (inp upTo: Character cr).		(lin peek == $	) ifTrue: 			"if it starts with a tab"			[lin next.			tim := lin upTo: $	 "tab".		"read time"			tval := (tim copyFrom: 3 to: 4) asNumber.			tim first == $1 ifTrue: [tval := tval + 60].			3 timesRepeat: [lin upTo: $	 "tab"].		"skip to next"			nam := lin upToEnd.			times addLast: tval.			names addLast: (sec, '-', nam)."			Transcript show: tval printString, ' -> ', sec, '-', nam; cr"		] ifFalse: [sec := lin upTo: $  "space" ]].			Transcript cr; show: '{ '.	times do: [ :t | Transcript show: t printString, ', '].	Transcript show: '} '; cr; show: '{ '.	names do: [ :n | Transcript show: '"', n , '", '].	Transcript show: '} '; cr.	Transcript show: times size printString; cr."	times size timesRepeat: [ Transcript show: ""SirenUtility convertEtDrScore: '/Volumes/Content/Video/3 EternalDream/Doc/EtDr_score.txt' "!dropColumn1From: inFile to: outFile	"Filter columns out of a CSV file"	"SirenUtility dropColumn1From: '/Volumes/Content/Code/Python/SndsLike/FSongs3b.csv' 		to: '/Volumes/Content/Code/Python/SndsLike/FSongs3c.csv' "	| inp line out cnt |	inp := (Filename named: inFile) readStream.	out := (Filename named: outFile) writeStream.	Transcript clear.	cnt := 0.	[inp atEnd] whileFalse:		[line := ReadStream on: (inp upTo: Character cr).		line upTo: $,.		line skipSeparators.		out nextPutAll: line upToEnd; cr.		cnt := cnt + 1.		((cnt \\ 1000) = 0) ifTrue:			[Transcript show: cnt printString; cr]].	inp close.	out close.	Transcript show: 'Done: ', cnt printString, ' items copied.'; cr!dropColumnsFrom2: inFile to: outFile drop: drop	"Filter columns out of a CSV file"	"Keep genre in this example"	"SirenUtility dropColumnsFrom2: '/Volumes/Content/Code/Python/SndsLike/SSongs3.csv' 		to: '/Volumes/Content/Code/Python/SndsLike/SSongs3_b.csv' 		drop: #(version OID name file format comment title artist album year bit_rate frame_rate duration Dummy) "	"SirenUtility filterGenresFrom: '/Volumes/Content/Code/Python/SndsLike/S3Songs_b.csv' 			to: '/Volumes/Content/Code/Python/SndsLike/S3Songs_c.csv' 			keep: '/Volumes/Content/Code/Python/SndsLike/Doc/genre-hist-keep.txt' "	| inp line tok cols out inds cnt fCnt lCnt |	inp := (Filename named: inFile) readStream.	out := (Filename named: outFile) writeStream.	Transcript clear."Read the first line to get the list of fields"	line := ReadStream on: (inp upTo: Character cr).	cols := OrderedCollection new.	[line atEnd] whileFalse:		[cols addLast: (line upTo: $,) asSymbol.		line skipSeparators]."Go through the list of fields to drop and make a list of indeces"	inds := OrderedCollection new.	1 to: cols size do:		[ :ind |		(drop includes: (cols at: ind))		ifTrue: [inds addLast: ind.			Transcript show: ind printString; space]]."Iterate over the lines dropping the fields"	Transcript cr.	lCnt := 0.	fCnt := 0.	[inp atEnd] whileFalse:		[line := ReadStream on: (inp upTo: Character cr).		cnt := 1.		[line atEnd] whileFalse:			[tok := (line upTo: $,).			line skipSeparators."Handle string tokens with embedded commas"			[(tok first == $") and: [tok last ~= $"]] whileTrue: [tok := tok, (line upTo: $,)].			(inds includes: cnt) ifFalse:"Remove quotes from numerical data"				[(tok size >= 3) ifTrue:					[ | ch |					ch := tok at: (tok size - 1).					(tok first == $ ) ifTrue: [tok := tok copyFrom: 2 to: tok size].					((tok first == $") and: [ch isDigit]) ifTrue: [tok := tok copyFrom: 2 to: tok size].					((tok last == $") and: [ch isDigit]) ifTrue: [tok := tok copyFrom: 1 to: tok size - 1].					(tok sameAs: 'None') ifTrue: [tok := 'NaN']]."Write out the included ones"				out nextPutAll: tok asString, ', ' ].			cnt := cnt + 1].		out nextPut: Character cr.		(fCnt = 0) ifTrue: [fCnt := cnt].		(fCnt = cnt) ifFalse: [Transcript show: 'Strange field count: ', cnt printString, ' ~= ', fCnt printString, 				' in line ', lCnt printString ; cr].		lCnt := lCnt + 1.		((lCnt \\ 1000) = 0) ifTrue:			[Transcript show: lCnt printString; cr]].	inp close.	out close.	Transcript show: 'Done: ', lCnt printString; cr."Here are the 424 fields of version 120712""version name file format labels title artist album year genre bit_rate frame_rate duration peakAvg peakVar peakVar2 peakDel peakDel2 rmsAvg rmsVar rmsVar2 rmsDel rmsDel2 lp_rmsAvg lp_rmsVar lp_rmsVar2 lp_rmsDel lp_rmsDel2 hp_rmsAvg hp_rmsVar hp_rmsVar2 hp_rmsDel hp_rmsDel2 dyn_rangeAvg dyn_rangeVar dyn_rangeVar2 dyn_rangeDel dyn_rangeDel2 stereoAvg stereoVar stereoVar2 stereoDel stereoDel2 chroMaxAvg chroMaxVar chroMaxVar2 chroMaxDel chroMaxDel2 chroWhtAvg chroWhtVar chroWhtVar2 chroWhtDel chroWhtDel2 spectCentAvg spectCentVar spectCentVar2 spectCentDel spectCentDel2 spectRollAvg spectRollVar spectRollVar2 spectRollDel spectRollDel2 spectSpreadAvg spectSpreadVar spectSpreadVar2 spectSpreadDel spectSpreadDel2 spectSkewAvg spectSkewVar spectSkewVar2 spectSkewDel spectSkewDel2 spectKurtAvg spectKurtVar spectKurtVar2 spectKurtDel spectKurtDel2 spectSlopeAvg spectSlopeVar spectSlopeVar2 spectSlopeDel spectSlopeDel2 spectVarAvg spectVarVar spectVarVar2 spectVarDel spectVarDel2 harmonicityAvg harmonicityVar harmonicityVar2 harmonicityDel harmonicityDel2 inharmonicityAvg inharmonicityVar inharmonicityVar2 inharmonicityDel inharmonicityDel2 harmonicCentAvg harmonicCentVar harmonicCentVar2 harmonicCentDel harmonicCentDel2 loud quiet decay held fp_gravity fp_bass fp_focus bh_lowpeakamp bh_midpeakamp bh_highpeakamp bh_lowpeakBPM bh_midpeakBPM bh_highpeakBPM bh_pdcentroid1 bh_pdcentroid2 bh_pdspread1 bh_pdspread2 bh_tempo beat_peaks beat_slope beat_weight beat_sum beat_height beat_hist_rat0 beat_hist_rat1 beat_hist_rat2 beat_hist_rat3 beat_max bands0Avg bands0Var bands0Var2 bands0Del bands0Del2 bands1Avg bands1Var bands1Var2 bands1Del bands1Del2 bands2Avg bands2Var bands2Var2 bands2Del bands2Del2 bands3Avg bands3Var bands3Var2 bands3Del bands3Del2 drums0Avg drums0Var drums0Var2 drums0Del drums0Del2 drums1Avg drums1Var drums1Var2 drums1Del drums1Del2 drums2Avg drums2Var drums2Var2 drums2Del drums2Del2 drums3Avg drums3Var drums3Var2 drums3Del drums3Del2 drums4Avg drums4Var drums4Var2 drums4Del drums4Del2 drums5Avg drums5Var drums5Var2 drums5Del drums5Del2 drums6Avg drums6Var drums6Var2 drums6Del drums6Del2 mfcc0Avg mfcc0Var mfcc0Var2 mfcc0Del mfcc0Del2 mfcc1Avg mfcc1Var mfcc1Var2 mfcc1Del mfcc1Del2 mfcc2Avg mfcc2Var mfcc2Var2 mfcc2Del mfcc2Del2 mfcc3Avg mfcc3Var mfcc3Var2 mfcc3Del mfcc3Del2 mfcc4Avg mfcc4Var mfcc4Var2 mfcc4Del mfcc4Del2 mfcc5Avg mfcc5Var mfcc5Var2 mfcc5Del mfcc5Del2 mfcc6Avg mfcc6Var mfcc6Var2 mfcc6Del mfcc6Del2 mfcc7Avg mfcc7Var mfcc7Var2 mfcc7Del mfcc7Del2 mfcc8Avg mfcc8Var mfcc8Var2 mfcc8Del mfcc8Del2 mfcc9Avg mfcc9Var mfcc9Var2 mfcc9Del mfcc9Del2 mfcc10Avg mfcc10Var mfcc10Var2 mfcc10Del mfcc10Del2 mfcc11Avg mfcc11Var mfcc11Var2 mfcc11Del mfcc11Del2 mfcc12Avg mfcc12Var mfcc12Var2 mfcc12Del mfcc12Del2 chromaW0 chromaW1 chromaW2 chromaW3 chromaW4 chromaW5 chromaI0 chromaI1 chromaI2 chromaI3 ssdBandMean1 ssdBandMean2 ssdBandMean3 ssdBandMean4 ssdBandMean5 ssdBandMean6 ssdBandMean7 ssdBandMean8 ssdBandMean9 ssdBandMean10 ssdBandMean11 ssdBandMean12 ssdBandMean13 ssdBandMean14 ssdBandMean15 ssdBandMean16 ssdBandMean17 ssdBandMean18 ssdBandMean19 ssdBandMean20 ssdBandMean21 ssdBandMean22 ssdBandMean23 ssdBandVar1 ssdBandVar2 ssdBandVar3 ssdBandVar4 ssdBandVar5 ssdBandVar6 ssdBandVar7 ssdBandVar8 ssdBandVar9 ssdBandVar10 ssdBandVar11 ssdBandVar12 ssdBandVar13 ssdBandVar14 ssdBandVar15 ssdBandVar16 ssdBandVar17 ssdBandVar18 ssdBandVar19 ssdBandVar20 ssdBandVar21 ssdBandVar22 ssdBandVar23 ssdBandSkew1 ssdBandSkew2 ssdBandSkew3 ssdBandSkew4 ssdBandSkew5 ssdBandSkew6 ssdBandSkew7 ssdBandSkew8 ssdBandSkew9 ssdBandSkew10 ssdBandSkew11 ssdBandSkew12 ssdBandSkew13 ssdBandSkew14 ssdBandSkew15 ssdBandSkew16 ssdBandSkew17 ssdBandSkew18 ssdBandSkew19 ssdBandSkew20 ssdBandSkew21 ssdBandSkew22 ssdBandSkew23 ssdBandKurt1 ssdBandKurt2 ssdBandKurt3 ssdBandKurt4 ssdBandKurt5 ssdBandKurt6 ssdBandKurt7 ssdBandKurt8 ssdBandKurt9 ssdBandKurt10 ssdBandKurt11 ssdBandKurt12 ssdBandKurt13 ssdBandKurt14 ssdBandKurt15 ssdBandKurt16 ssdBandKurt17 ssdBandKurt18 ssdBandKurt19 ssdBandKurt20 ssdBandKurt21 ssdBandKurt22 ssdBandKurt23 ssdBandMedian1 ssdBandMedian2 ssdBandMedian3 ssdBandMedian4 ssdBandMedian5 ssdBandMedian6 ssdBandMedian7 ssdBandMedian8 ssdBandMedian9 ssdBandMedian10 ssdBandMedian11 ssdBandMedian12 ssdBandMedian13 ssdBandMedian14 ssdBandMedian15 ssdBandMedian16 ssdBandMedian17 ssdBandMedian18 ssdBandMedian19 ssdBandMedian20 ssdBandMedian21 ssdBandMedian22 ssdBandMedian23 ssdBandMin1 ssdBandMin2 ssdBandMin3 ssdBandMin4 ssdBandMin5 ssdBandMin6 ssdBandMin7 ssdBandMin8 ssdBandMin9 ssdBandMin10 ssdBandMin11 ssdBandMin12 ssdBandMin13 ssdBandMin14 ssdBandMin15 ssdBandMin16 ssdBandMin17 ssdBandMin18 ssdBandMin19 ssdBandMin20 ssdBandMin21 ssdBandMin22 ssdBandMin23 ssdBandMax1 ssdBandMax2 ssdBandMax3 ssdBandMax4 ssdBandMax5 ssdBandMax6 ssdBandMax7 ssdBandMax8 ssdBandMax9 ssdBandMax10 ssdBandMax11 ssdBandMax12 ssdBandMax13 ssdBandMax14 ssdBandMax15 ssdBandMax16 ssdBandMax17 ssdBandMax18 ssdBandMax19 ssdBandMax20 ssdBandMax21 ssdBandMax22 ssdBandMax23 Dummy"!dropColumnsFrom: inFile to: outFile drop: drop	"Filter columns out of a CSV file"	| inp line tok cols out inds cnt fCnt lCnt |	inp := (Filename named: inFile) readStream.	out := (Filename named: outFile) writeStream.	Transcript clear."Read the first line to get the list of fields"	line := ReadStream on: (inp upTo: Character cr).	cols := OrderedCollection new.	[line atEnd] whileFalse:		[cols addLast: (line upTo: $,) asSymbol.		line skipSeparators]."Go through the list of fields to drop and make a list of indeces"	inds := OrderedCollection new.	1 to: cols size do:		[ :ind |		(drop includes: (cols at: ind))		ifTrue: [inds addLast: ind.			Transcript show: ind printString; space]		ifFalse: [out nextPutAll: (cols at: ind) asString, ', ']]."Iterate over the lines dropping the fields"	out nextPut: Character cr.	Transcript cr.	lCnt := 0.	fCnt := 0.	[inp atEnd] whileFalse:		[line := ReadStream on: (inp upTo: Character cr).		cnt := 1.		[line atEnd] whileFalse:			[tok := (line upTo: $,)."Handle string tokens with embedded commas"			[(tok first == $") and: [tok last ~= $"]] whileTrue: [tok := tok, (line upTo: $,)].			(inds includes: cnt) ifFalse:"Remove quotes from numerical data"				[(tok size > 3) ifTrue:					[ | ch |					ch := tok at: (tok size - 1).					((tok first == $") and: [ch isDigit]) ifTrue: [tok := tok copyFrom: 2 to: tok size].					((tok last == $") and: [ch isDigit]) ifTrue: [tok := tok copyFrom: 1 to: tok size - 1]]."Write out the included ones"				out nextPutAll: tok asString, ', ' ].			cnt := cnt + 1].		out nextPut: Character cr.		(fCnt = 0) ifTrue: [fCnt := cnt].		(fCnt = cnt) ifFalse: [Transcript show: 'Strange field count: ', cnt printString, ' ~= ', fCnt printString, 				' in line ', lCnt printString ; cr].		lCnt := lCnt + 1.		((lCnt \\ 1000) = 0) ifTrue:			[Transcript show: lCnt printString; cr]].	inp close.	out close.	Transcript show: 'Done: ', lCnt printString; cr."Keep genre in this example""SirenUtility dropColumnsFrom: '/Users/stp/Code/FMAK4/MM_Explore/MM_Explore/FSongsEMF4b.csv' 	to: '/Users/stp/Code/FMAK4/MM_Explore/MM_Explore/FSongsEMF4c.csv' 	drop: #(OID Version NumOnsets Tempo TemporalCentroid StereoWidth STrackBirths STrackDeaths LogAttackTime AttackSlope TemporalDelta DynamicRange2 TemporalSkewness TemporalKurtosis ChromaPeak Dummy Name Title Artist Album FYear BitRate FrameRate Duration AnalyzedOn FileFormat Genre SubGenre Genre1 Genre2 Genre1Weight Genre2Weight Instrument1 Instrument2 Instrument1Weight Instrument2Weight AvgFT WeightedFT TempoAvg TempoWeight TempoDistr TrackerConf SegmentConf SegmentWeight NumSegments VerseLength TypicalIndex SoloIndex FirstVerseStart TypicalStart SoloStart FadeIn FadeOut SoloCentroid SoloVariety SoloDynRange SoloTempo SoloRMS IgnoreMe Frame_id RealDuration PeakVar NumOnsetsVar TempoVar TemporalCentroidVar StereoWidthVar STrackBirthsVar STrackDeathsVar LogAttackTimeVar AttackSlopeVar TemporalDeltaVar DynamicRange2Var TemporalSkewnessVar TemporalKurtosisVar Normalized) ""For SFX - remove the BH & FP fields""OID Version NumOnsets Tempo TemporalCentroid StereoWidth STrackBirths STrackDeaths LogAttackTime AttackSlope TemporalDelta DynamicRange2 TemporalSkewness TemporalKurtosis ChromaPeak ChromaWeight Dummy Name Title Artist Album FYear BitRate FrameRate Duration AnalyzedOn FileFormat SubGenre Genre1 Genre2 Genre1Weight Genre2Weight Instrument1 Instrument2 Instrument1Weight Instrument2Weight AvgFT WeightedFT TempoAvg TempoWeight TempoDistr TrackerConf SegmentConf SegmentWeight NumSegments VerseLength TypicalIndex SoloIndex FirstVerseStart TypicalStart SoloStart FadeIn FadeOut QuietSections LoudSections SoloCentroid SoloVariety SoloDynRange SoloTempo SoloRMS LowPeakAmp LowPeakBPM MidPeakAmp MidPeakBPM HighPeakAmp HighPeakBPM LowMidRatio PeriodCentroid1 PeriodSpread1 PeriodCentroid2 PeriodSpread2 FP_gravity FP_bass FP_focus IgnoreMe Frame_id RealDuration PeakVar NumOnsetsVar TempoVar TemporalCentroidVar StereoWidthVar STrackBirthsVar STrackDeathsVar LogAttackTimeVar AttackSlopeVar TemporalDeltaVar DynamicRange2Var TemporalSkewnessVar TemporalKurtosisVar Normalized""This is all the fields""OID Version RMS Peak LPRMS HPRMS ZeroCrossings NumOnsets DynamicRange Tempo TemporalCentroid StereoWidth STrackBirths STrackDeaths LogAttackTime AttackSlope TemporalDelta DynamicRange2 TemporalSkewness TemporalKurtosis SpectralCentroid SpectralMCentroid SpectralSlope SpectralVariety SpectralFlux SpectralRolloff SpectralBandwidth SpectralSkewness SpectralKurtosis BassDynamicity ChromaPeak ChromaWeight SpectralBand1 SpectralBand2 SpectralBand3 SpectralBand4 SpectralBandMax DrumEnergyBand1 DrumEnergyBand2 DrumEnergyBand3 DrumEnergyBand4 DrumEnergyBand5 DrumEnergyBand6 VocalEnergyBand1 VocalEnergyBand2 VocalEnergyBand3 MFCCCoeff1 MFCCCoeff2 MFCCCoeff3 MFCCCoeff4 MFCCCoeff5 MFCCCoeff6 MFCCCoeff7 MFCCCoeff8 MFCCCoeff9 MFCCCoeff10 MFCCCoeff11 MFCCCoeff12 DeltaMFCC1 DeltaMFCC2 DeltaMFCC3 DeltaMFCC4 DeltaMFCC5 DeltaMFCC6 DeltaMFCC7 DeltaMFCC8 DeltaMFCC9 DeltaMFCC10 DeltaMFCC11 DeltaMFCC12 Dummy Name Title Artist Album FYear BitRate FrameRate Duration AnalyzedOn FileFormat Genre SubGenre Genre1 Genre2 Genre1Weight Genre2Weight Instrument1 Instrument2 Instrument1Weight Instrument2Weight AvgFT WeightedFT TempoAvg TempoWeight TempoDistr TrackerConf SegmentConf SegmentWeight NumSegments VerseLength TypicalIndex SoloIndex FirstVerseStart TypicalStart SoloStart FadeIn FadeOut QuietSections LoudSections SoloCentroid SoloVariety SoloDynRange SoloTempo SoloRMS LowPeakAmp LowPeakBPM MidPeakAmp MidPeakBPM HighPeakAmp HighPeakBPM LowMidRatio PeriodCentroid1 PeriodSpread1 PeriodCentroid2 PeriodSpread2 FP_gravity FP_bass FP_focus IgnoreMe Frame_id RealDuration RMSVar PeakVar LPRMSVar HPRMSVar ZeroCrossingsVar NumOnsetsVar DynamicRangeVar TempoVar TemporalCentroidVar StereoWidthVar STrackBirthsVar STrackDeathsVar LogAttackTimeVar AttackSlopeVar TemporalDeltaVar DynamicRange2Var TemporalSkewnessVar TemporalKurtosisVar SpectralCentroidVar SpectralMCentroidVar SpectralSlopeVar SpectralVarietyVar SpectralFluxVar SpectralRolloffVar SpectralBandwidthVar SpectralSkewnessVar SpectralKurtosisVar BassDynamicityVar ChromaPeakVar ChromaWeightVar SpectralBand1Var SpectralBand2Var SpectralBand3Var SpectralBand4Var SpectralBandMaxVar DrumEnergyBand1Var DrumEnergyBand2Var DrumEnergyBand3Var DrumEnergyBand4Var DrumEnergyBand5Var DrumEnergyBand6Var VocalEnergyBand1Var VocalEnergyBand2Var VocalEnergyBand3Var MFCCCoeff1Var MFCCCoeff2Var MFCCCoeff3Var MFCCCoeff4Var MFCCCoeff5Var MFCCCoeff6Var MFCCCoeff7Var MFCCCoeff8Var MFCCCoeff9Var MFCCCoeff10Var MFCCCoeff11Var MFCCCoeff12Var DeltaMFCC1Var DeltaMFCC2Var DeltaMFCC3Var DeltaMFCC4Var DeltaMFCC5Var DeltaMFCC6Var DeltaMFCC7Var DeltaMFCC8Var DeltaMFCC9Var DeltaMFCC10Var DeltaMFCC11Var DeltaMFCC12Var Normalized"!dropTo2ColumnsFrom: inFile to: outFile	"Filter columns of a TSV file: keep 1 & 3"	| inp line cols out cnt |	inp := (Filename named: inFile) readStream text.	out := (Filename named: outFile) writeStream text.	Transcript clear.	cnt := 0.	[inp atEnd] whileFalse:		[line := ReadStream on: (inp upTo: Character cr).		cols := OrderedCollection new: 64.		[line atEnd] whileFalse:			[cols addLast: (line upTo: $	 "tab").			line skipSeparators].		(cols size > 2) ifTrue: 			[out nextPutAll: 'Update FSongsAPM set TemporalCentroid = ',  (cols at: 1) asByteString, ' where NameToken = ''',  (cols at: 3) asByteString, ''';'; cr].			(cnt \\ 1000 = 999) ifTrue: [Transcript show: 'Done: ', (cnt + 1) printString; cr].			cnt := cnt + 1].	inp close.	out close.	Transcript show: 'Done: ', cnt printString; cr."SirenUtility dropTo2ColumnsFrom: '/Volumes/Content/Code/Python/SndsLike/SSongs.csv' 	to: '/Volumes/Content/Code/Python/SndsLike/SSongs2.csv' "!dropToNumColumnsFrom: inFile to: outFile	"Filter columns of a TSV file: keep 1 & 3"	| inp line out cnt tok |	inp := (Filename named: inFile) readStream text.	out := (Filename named: outFile) writeStream text.	Transcript clear.	cnt := 0.	[inp atEnd] whileFalse:		[line := ReadStream on: (inp upTo: Character cr).		line skipSeparators.		tok := line upTo: $	."tab"		out nextPutAll: tok; cr].	inp close.	out close.	Transcript show: 'Done: ', cnt printString; cr."SirenUtility dropToNumColumnsFrom: '/Volumes/Content/Code/Python/SndsLike/Doc/genre-hist-top.txt' 	to: '/Volumes/Content/Code/Python/SndsLike/Doc/genre-hist-top2.txt' "!exploreRecommendationFor: str	"Answer the genre histogram for the given recommender search"	| cmd proc reply connection |	connection := self pipeConnectionFor: '/Users/stp/Code/FMAK4/MM_Explore/MM_Explore_Beta7/MM_Explore'			arguments:  #('-Rdb' '/Users/stp/Desktop/MediaMined MusicEngine 1.0.426/OtherDataSets/SongDB_LMS.dat'					'-x' '/Users/stp/Code/FMAK4/MM_Explore/Configuration.txt'					'-s' str)			setProcessDescriptor: [:pd | proc := pd].	cmd := connection readStream.	[reply := cmd contents.	proc wait]		ensure: [cmd close].	^(reply copyReplaceAll: $' with: $_)"SirenUtility exploreRecommendationFor: '7080' "!featureNameDictionary	"Answer the dictionary of feature names and const values"	^((#RMS -> 0),	(#RMSVal -> 1),	(#Peak -> 2),	(#LPRMS -> 3),	(#HPRMS -> 4),	(#ZeroCrossings -> 5),	(#NumOnsets -> 6),	(#Tempo -> 7),	(#DynamicRange -> 8),	(#StereoWidth -> 9),	(#BassPitch -> 10),	(#BassNote -> 11),	(#BassStep -> 12),	(#BassDynamicity -> 13),	(#SpectralCentroid -> 14),	(#SpectralMCentroid -> 15),	(#SpectralSlope -> 16),	(#SpectralRolloff -> 17),	(#SpectralVariety -> 18),	(#SpectralFlux -> 19),	(#SpectralBandwidth -> 20),	(#SpectralSkewness -> 21),	(#SpectralKurtosis -> 22),	(#ChromaPeak -> 23),	(#ChromaWeight -> 24),	(#SpectralBand1 -> 25),	(#SpectralBand2 -> 26),	(#SpectralBand3 -> 27),	(#SpectralBand4 -> 28),	(#SpectralBandMax -> 29),	(#STrackBirths -> 30),	(#STrackDeaths -> 31),	(#DrumEnergyBand1 -> 32),	(#DrumEnergyBand2 -> 33),	(#DrumEnergyBand3 -> 34),	(#DrumEnergyBand4 -> 35),	(#DrumEnergyBand5 -> 36),	(#DrumEnergyBand6 -> 37),	(#VocalEnergyBand1 -> 38),	(#VocalEnergyBand2 -> 39),	(#VocalEnergyBand3 -> 40),	(#MFCCCoeff1 -> 41),	(#MFCCCoeff2 -> 42),	(#MFCCCoeff3 -> 43),	(#MFCCCoeff4 -> 44),	(#MFCCCoeff5 -> 45),	(#MFCCCoeff6 -> 46),	(#MFCCCoeff7 -> 47),	(#MFCCCoeff8 -> 48),	(#MFCCCoeff9 -> 49),	(#MFCCCoeff10 -> 50),	(#MFCCCoeff11 -> 51),	(#MFCCCoeff12 -> 52),	(#DeltaMFCC1 -> 53),	(#DeltaMFCC2 -> 54),	(#DeltaMFCC3 -> 55),	(#DeltaMFCC4 -> 56),	(#DeltaMFCC5 -> 57),	(#DeltaMFCC6 -> 58),	(#DeltaMFCC7 -> 59),	(#DeltaMFCC8 -> 60),	(#DeltaMFCC9 -> 61),	(#DeltaMFCC10 -> 62),	(#DeltaMFCC11 -> 63),	(#DeltaMFCC12 -> 64),	(#Duration -> 65),	(#SilenceRatio -> 66),	(#FYear -> 67),	(#BitRate -> 68),	(#FrameRate -> 69),	(#TempoAvg -> 70),	(#TempoWeight -> 71),	(#TempoDistr -> 72),	(#TrackerConf -> 73),	(#SegmentWeight -> 74),	(#SegmentConf -> 75),	(#NumSegments -> 76),	(#VerseLength -> 77),	(#FirstVerseStart -> 78),	(#SoloIndex -> 79),	(#TypicalIndex -> 80),	(#SoloStart -> 81),	(#TypicalStart -> 82),	(#QuietSections -> 83),	(#LoudSections -> 84),	(#FadeIn -> 85),	(#FadeOut -> 86),	(#SoloCentroid -> 87),	(#SoloVariety -> 88),	(#SoloDynRange -> 89),	(#SoloRMS -> 90),	(#SoloTempo -> 91),	(#LowPeakAmp -> 92),	(#LowPeakBPM -> 93),	(#MidPeakAmp -> 94),	(#MidPeakBPM -> 95),	(#HighPeakAmp -> 96),	(#HighPeakBPM -> 97),	(#LowMidRatio -> 98),	(#PeriodCentroid1 -> 99),	(#PeriodCentroid2 -> 100),	(#PeriodSpread1 -> 101),	(#PeriodSpread2 -> 102),	(#FP_gravity -> 103),	(#FP_bass -> 104),	(#FP_focus -> 105),	(#RMSVar -> 106),	(#RMSValVar -> 107),	(#PeakVar -> 108),	(#LPRMSVar -> 109),	(#HPRMSVar -> 110),	(#ZeroCrossingsVar -> 111),	(#NumOnsetsVar -> 112),	(#TempoVar -> 113),	(#DynamicRangeVar -> 114),	(#StereoWidthVar -> 115),	(#BassPitchVar -> 116),	(#BassNoteVar -> 117),	(#BassStepVar -> 118),	(#BassDynamicityVar -> 119),	(#SpectralCentroidVar -> 120),	(#SpectralMCentroidVar -> 121),	(#SpectralSlopeVar -> 122),	(#SpectralRolloffVar -> 123),	(#SpectralVarietyVar -> 124),	(#SpectralFluxVar -> 125),	(#SpectralBandwidthVar -> 126),	(#SpectralSkewnessVar -> 127),	(#SpectralKurtosisVar -> 128),	(#ChromaPeakVar -> 129),	(#ChromaWeightVar -> 130),	(#SpectralBand1Var -> 131),	(#SpectralBand2Var -> 132),	(#SpectralBand3Var -> 133),	(#SpectralBand4Var -> 134),	(#SpectralBandMaxVar -> 135),	(#STrackBirthsVar -> 136),	(#STrackDeathsVar -> 137),	(#DrumEnergyBand1Var -> 138),	(#DrumEnergyBand2Var -> 139),	(#DrumEnergyBand3Var -> 140),	(#DrumEnergyBand4Var -> 141),	(#DrumEnergyBand5Var -> 142),	(#DrumEnergyBand6Var -> 143),	(#VocalEnergyBand1Var -> 144),	(#VocalEnergyBand2Var -> 145),	(#VocalEnergyBand3Var -> 146),	(#MFCCCoeff1Var -> 147),	(#MFCCCoeff2Var -> 148),	(#MFCCCoeff3Var -> 149),	(#MFCCCoeff4Var -> 150),	(#MFCCCoeff5Var -> 151),	(#MFCCCoeff6Var -> 152),	(#MFCCCoeff7Var -> 153),	(#MFCCCoeff8Var -> 154),	(#MFCCCoeff9Var -> 155),	(#MFCCCoeff10Var -> 156),	(#MFCCCoeff11Var -> 157),	(#MFCCCoeff12Var -> 158),	(#DeltaMFCC1Var -> 159),	(#DeltaMFCC2Var -> 160),	(#DeltaMFCC3Var -> 161),	(#DeltaMFCC4Var -> 162),	(#DeltaMFCC5Var -> 163),	(#DeltaMFCC6Var -> 164),	(#DeltaMFCC7Var -> 165),	(#DeltaMFCC8Var -> 166),	(#DeltaMFCC9Var -> 167),	(#DeltaMFCC10Var -> 168),	(#DeltaMFCC11Var -> 169),	(#DeltaMFCC12Var -> 170))!fileBrokenNames: sql to: outN	"Go through the list of all files checking for the name prefix like L0000011_."	| inp lin fnd nfnd out ok |	inp := (Filename named: sql) readStream.	out := (Filename named: outN) writeStream.	Transcript clear.	fnd := 0.	nfnd := 0.	[inp atEnd] whileFalse:		[lin := inp upTo: Character cr.		ok := true.		('MXLS' includes: lin first) ifFalse: [ok := false].		2 to: 8 do:			[ :ind | (lin at: ind) isDigit ifFalse: [ok := false]].		((lin at: 9) == $_) ifFalse: [ok := false].		ok ifTrue: [fnd := fnd + 1]			ifFalse: [nfnd := nfnd + 1. 					out nextPutAll: lin; cr]].	inp close.	out close.	Transcript show: 'Done'; crtab; show: fnd printString, ' found, '; crtab; show: nfnd printString, ' not found'; cr"SirenUtility fileBrokenNames: '/Volumes/Media/CoreDataSets/names.txt' 	to: '/Volumes/Media/CoreDataSets/bad-file-names.txt' "!filterGenresFrom2: inFile to: outFile keep: keepFile	"Filter genre columns of a CSV file: keep the list - this version drops entries with no genre"	"SirenUtility filterGenresFrom2: '/Volumes/Content/Code/Python/SndsLike/FSongs2.csv' 			to: '/Volumes/Content/Code/Python/SndsLike/FSongs4.csv' 			keep: '/Volumes/Content/Code/Python/SndsLike/Doc/genre-hist-keep.txt' "	| inp line out tok kep keeps rest cnt nam |	inp := (Filename named: inFile) readStream text.	kep := (Filename named: keepFile) readStream text.	out := (Filename named: outFile) writeStream text.	keeps := OrderedCollection new.	[kep atEnd] whileFalse:		[keeps addLast: (kep upTo: Character cr)].	kep close.	cnt := 0.	Transcript cr; show: 'Writing CSV data to ', outFile; cr.	inp upTo: Character cr.			"skip 1st line"	[inp atEnd] whileFalse:		[line := ReadStream on: (inp upTo: Character cr).		tok := line upTo: $,.		nam := tok copyFrom: 2 to: (tok size - 1).		rest := line upToEnd.		(keeps includes: nam)			ifTrue: [out nextPutAll: (keeps indexOf: nam) printString, ',', 					(rest copyFrom: 1 to: (rest size - 2)); cr.				cnt := cnt + 1.				((cnt \\ 100) = 0) ifTrue:					[Transcript show: cnt printString; cr]]].	inp close.	out close.	Transcript show: 'Done: ', cnt printString, ' items copied.'; cr!filterGenresFrom: inFile to: outFile keep: keepFile	"Filter genre columns of a CSV file: keep the list"	"SirenUtility filterGenresFrom: '/Volumes/Content/Code/Python/SndsLike/FSongs2.csv' 			to: '/Volumes/Content/Code/Python/SndsLike/FSongs3.csv' 			keep: '/Volumes/Content/Code/Python/SndsLike/Doc/genre-hist-keep.txt' "	| inp line out tok kep keeps rest cnt nam |	inp := (Filename named: inFile) readStream text.	kep := (Filename named: keepFile) readStream text.	out := (Filename named: outFile) writeStream text.	keeps := OrderedCollection new.	[kep atEnd] whileFalse:		[keeps addLast: (kep upTo: Character cr)].	kep close.	cnt := 0.	Transcript cr; show: 'Writing CSV data to ', outFile; cr.	out nextPutAll: (inp upTo: Character cr); cr.		"copy 1st line"	[inp atEnd] whileFalse:		[line := ReadStream on: (inp upTo: Character cr).		tok := line upTo: $,.		nam := tok copyFrom: 2 to: (tok size - 1).		rest := line upToEnd.		(keeps includes: nam)			ifTrue: [out nextPutAll: tok, ',', rest; cr]			ifFalse: [out nextPutAll: '?,', rest; cr].		cnt := cnt + 1.		((cnt \\ 1000) = 0) ifTrue:			[Transcript show: cnt printString; cr]].	inp close.	out close.	Transcript show: 'Done: ', cnt printString, ' items copied.'; cr!genreHistogram2Of: str into: dict	"Answer the genre histogram for the given recommender search"	| inp genre |	inp := ReadStream on: str.	Transcript clear."Loop through the lines"	[inp atEnd] whileFalse:		[genre := (inp upTo: Character cr) .		(genre size > 0) ifTrue: 			[genre := genre asSymbol.			(dict includesKey: genre)				ifTrue: [dict at: genre put: ((dict at: genre) + 1)]				ifFalse: [dict at: genre put: 1]]]!genreHistogramFrom: fil	"Answer the genre histogram for the given recommender search"	"SirenUtility genreHistogramFrom: '/Users/stp/Code/FMAK4/MM_Explore/MM_Explore_Beta7/Stats3/Rock.out.txt' "	| inp genre coll dict |	inp := fil asFilename readStream.	dict := IdentityDictionary new.	Transcript clear."Loop through the lines"	[inp atEnd] whileFalse:		[genre := (inp upTo: Character cr) .		(genre size > 0) ifTrue: 			[genre := genre asSymbol.			(dict includesKey: genre)				ifTrue: [dict at: genre put: ((dict at: genre) + 1)]				ifFalse: [dict at: genre put: 1]]]."Now sort and print the dict"	coll := OrderedCollection new.	dict keysAndValuesDo:		[ :k :v |		coll add: (v -> k)].	coll sort: [:a :b | a > b].	Transcript clear.	coll do: [ :it | Transcript show: it value asString, ' - ', it key printString; cr]!genreHistogramOf: str	"Answer the genre histogram for the given recommender search"	| inp line dict coll genre |	inp := ReadStream on: str.	dict := IdentityDictionary new.	Transcript clear.	[inp atEnd] whileFalse:		[line := ReadStream on: (inp upTo: Character cr).		3 timesRepeat: [line upTo: $	 "tab"].		genre := (line upTo: $  "space") asSymbol.		(genre size = 0) ifTrue: [self halt]."		Transcript show: genre; cr."		(dict includesKey: genre)		ifTrue: [dict at: genre put: ((dict at: genre) + 1)]		ifFalse: [dict at: genre put: 1]].	coll := OrderedCollection new.	dict keysAndValuesDo:		[ :k :v |		coll add: (v -> k)].	coll sort: [:a :b | a > b].	coll do: [ :it | Transcript show: it value asString, ' - ', it key printString; cr]"SirenUtility genreHistogramOf: '7080   	Verano Porteno          	Karin Schaupp           	Classical           	   0.07116   	Dancing on the Plaza    	Karin Schaupp           	Classical           	  93.07058   	Fandango                	Karin Schaupp           	Classical           	 108.09442   	Dismantling Utopia      	Pat Metheny Group       	Jazz                	 109.014406  	Childrens Songs: S    	Manuel Barrueco         	Jazz                	 117.015076  	Capriccio No. 5         	Eliot Fisk              	Classical           	 126.023994  	Ninth Symphony: Seco    	Wendy Carlos            	Electronica/Dance   	 128.07918   	Odara                   	Caetano Veloso          	Latin               	 129.07102   	Choros No.1             	Karin Schaupp           	Classical           	 130.07132   	Fiesta                  	Karin Schaupp           	Classical           	 133.0'"!genreHistogramOf: str into: dict	"Answer the genre histogram for the given recommender search"	| inp line genre |	inp := ReadStream on: str.	Transcript clear."Loop through the lines"	[inp atEnd] whileFalse:		[line := ReadStream on: (inp upTo: Character cr)."skip 3 tabs and read the genre"		3 timesRepeat: [line upTo: $	 "tab"].		genre := (line upTo: $  "space") asSymbol.		(genre size = 0) ifTrue: [self halt]."		Transcript show: genre; cr."		(dict includesKey: genre)			ifTrue: [dict at: genre put: ((dict at: genre) + 1)]			ifFalse: [dict at: genre put: 1]].!insertAsTable: str	"turn SQL inserts into lists"	| inp line1 line2 |	inp := ReadStream on: str.	inp upTo: $( .	line1 := ReadStream on: (inp upTo: $) ).	inp upTo: $( .	line2 := ReadStream on: (inp upTo: $) ).	Transcript clear.	[line1 atEnd] whileFalse:		[line1 skipSeparators.		line2 skipSeparators.		Transcript show: (line1 upTo: $,), '	', (line2 upTo: $,); cr]"SirenUtility insertAsTable: 'INSERT INTO Frames (Version, Audio_file_id, RMS, Peak, LPRMS, HPRMS, ZeroCrossings, DynamicRange, TemporalCentroid, LogAttackTime, AttackSlope, StereoWidth, BassDynamicity, SpectralCentroid, SpectralMCentroid, SpectralSlope, SpectralRolloff, SpectralVariety, SpectralFlux, SpectralBandwidth, SpectralSkewness, SpectralKurtosis, ChromaPeak, ChromaWeight, SpectralBand1, SpectralBand2, SpectralBand3, SpectralBand4, SpectralBandMax, DrumEnergyBand1, DrumEnergyBand2, DrumEnergyBand3, DrumEnergyBand4, DrumEnergyBand5, DrumEnergyBand6, VocalEnergyBand1, VocalEnergyBand2, VocalEnergyBand3, MFCCCoeff1, MFCCCoeff2, MFCCCoeff3, MFCCCoeff4, MFCCCoeff5, MFCCCoeff6, MFCCCoeff7, MFCCCoeff8, MFCCCoeff9, MFCCCoeff10, MFCCCoeff11, MFCCCoeff12, DeltaMFCC1, DeltaMFCC2, DeltaMFCC3, DeltaMFCC4, DeltaMFCC5, DeltaMFCC6, DeltaMFCC7, DeltaMFCC8, DeltaMFCC9, DeltaMFCC10, DeltaMFCC11, DeltaMFCC12, RMSVar, PeakVar, LPRMSVar, HPRMSVar, ZeroCrossingsVar, DynamicRangeVar, TemporalCentroidVar, LogAttackTimeVar, AttackSlopeVar, StereoWidthVar, BassDynamicityVar, SpectralCentroidVar, SpectralMCentroidVar, SpectralSlopeVar, SpectralRolloffVar, SpectralVarietyVar, SpectralFluxVar, SpectralBandwidthVar, SpectralSkewnessVar, SpectralKurtosisVar, ChromaPeakVar, ChromaWeightVar, SpectralBand1Var, SpectralBand2Var, SpectralBand3Var, SpectralBand4Var, SpectralBandMaxVar, DrumEnergyBand1Var, DrumEnergyBand2Var, DrumEnergyBand3Var, DrumEnergyBand4Var, DrumEnergyBand5Var, DrumEnergyBand6Var, VocalEnergyBand1Var, VocalEnergyBand2Var, VocalEnergyBand3Var, MFCCCoeff1Var, MFCCCoeff2Var, MFCCCoeff3Var, MFCCCoeff4Var, MFCCCoeff5Var, MFCCCoeff6Var, MFCCCoeff7Var, MFCCCoeff8Var, MFCCCoeff9Var, MFCCCoeff10Var, MFCCCoeff11Var, MFCCCoeff12Var, DeltaMFCC1Var, DeltaMFCC2Var, DeltaMFCC3Var, DeltaMFCC4Var, DeltaMFCC5Var, DeltaMFCC6Var, DeltaMFCC7Var, DeltaMFCC8Var, DeltaMFCC9Var, DeltaMFCC10Var, DeltaMFCC11Var, DeltaMFCC12Var, Frame_start, Frame_duration) VALUES (327, 102815, 84.6937, 0.944061, 0.997586, 0.698285, 1.97647, 1.23656, -1e+30, -1e+30, -1e+30, 8.06462e-06, -1e+30, 207.052, 14.6044, 0.922097, 258.438, 0.000109031, 1028.56, 198.95, -1.00481, 1.00698, 1, 0.0758055, 0.855022, 0.956747, 0.893801, 0.780114, 0.582857, 0.000359365, 0.122933, 0.0411679, 0.0470418, 0.00654747, 0.000496737, 0.215513, 0.000549922, 0.000791321, -292.067, 38.6301, 23.5531, 8.3822, 14.6578, -3.47737, 8.73018, -3.87471, 5.51259, -6.40002, 4.14141, -6.91696, -15.2155, -1.02038, 3.99178, 1.39333, 0.945822, -0.0936216, 0.0253709, -0.341265, 0.0642555, 0.208289, 0.0154152, -0.124485, 0.909529, 0.134182, 0.00119386, 0.0412286, 0.0235294, 0.0657316, 0, 0, 0, 2.7435e-07, 0, 33.8001, 2.07019, 0.0103279, 15.7643, 0.0175433, 193.506, 33.3875, 0.00158737, 0.000541155, 0, 0.013379, 0.00134255, 0.00146159, 0.00596091, 0.014281, nan, 0.000289119, 0.0219297, 0.00580141, 0.0281595, 0.00325536, 0.000486839, 0.0696989, 0.00039616, 0.000421862, 25.0274, 8.72199, 1.64894, 1.4347, 0.579969, 1.83988, 0.66553, 0.679326, 0.247909, 0.541071, 0.230342, 0.406579, 15.2012, 4.99235, 4.08555, 1.48574, 1.26368, 1.00946, 0.326527, 0.861198, 2.24726, 0.642198, 0.713443, 0.226396, 0, 4.07159)'"!insertToDel2: sql to: outN	"Convert an SQL insert to a delete" | inp out ind |inp := (Filename named: sql) readStream.out := (Filename named: outN) writeStream.Transcript clear.[inp atEnd] whileFalse:	[inp skipThroughAll: 'VALUES'.	inp upTo: $,.	ind := inp upTo: $,.	inp upTo: Character cr.	out nextPutAll: 'Delete from Frames where Audio_file_id = ', ind, ';'; cr].inp close.out close."SirenUtility insertToDel2: '/Users/stp/Code/FMAK4/MM_Analyzer/DB_Pop1/FramesInserts_SFX.sql' 	to: '/Users/stp/Code/FMAK4/MM_Analyzer/DB_Pop1/FramesInserts_SFXd.sql' "!insertToDel: sql to: outN	"Convert an SQL insert to a delete"	"(0,470288,0,219.69,86.7227,"	"Delete from Frames where Audio_file_id = 470288" | inp out ind |inp := (Filename named: sql) readStream.out := (Filename named: outN) writeStream.Transcript clear.[inp atEnd] whileFalse:	[inp upTo: $,.	ind := inp upTo: $,.	inp upTo: Character cr.	out nextPutAll: 'Delete from Frames where Audio_file_id = ', ind, ';'; cr].inp close.out close."SirenUtility insertToDel: '/Users/stp/Code/FMAK4/MM_Analyzer/DB_Pop1/Frames_DB_110504z.txt' 	to: '/Users/stp/Code/FMAK4/MM_Analyzer/DB_Pop1/Frames_DB_110504x.txt' "!insertToUpdate: sql to: outN	"Convert an SQL insert to an update"	"1,'/Loops/Apple Loops_GarageBand','L0000003_Percussion Combo 06.wav','L',0);" | inp out ind "path nam sho set" pos1 pos2 lin |inp := (Filename named: sql) readStream.out := (Filename named: outN) writeStream.Transcript clear.[inp atEnd] whileFalse:	[ind := inp upTo: $,.	lin := inp upTo: Character cr.	pos1 := lin findString: ''',''' startingAt: 2 .	pos2 := lin findString: ''',''' startingAt: pos1 + 1 ."	nam := inp upTo: $,.	sho := inp upTo: $,.	set := inp upTo: $)."	out nextPutAll: 'UPDATE AudioFiles set Path = ', (lin copyFrom: 1 to: pos1), 		' File_name = ', (lin copyFrom: pos1 + 2 to: pos2), 		' Short_name = ', (lin copyFrom: pos2 + 2 to: pos2 + 3),		''' DataSet = 0 where Audio_file_id = ', ind, ';'; cr].inp close.out close."SirenUtility insertToUpdate: '/Volumes/Content/Databases/aria-tables/AudioFiles_DB_110427c.txt' 	to: '/Volumes/Content/Databases/aria-tables/AudioFiles_DB_110427d.txt' "!iso226Tables	"Interpolate the ISO 226 F-M tables to bark-scale frequencies"	"SirenUtility iso226Tables"	| ba f tf lu af af2 tf2 lu2 |	ba := #(50 150 250 350 450 570 700 840 1000 1170 1370 1600 1850 2150 2500 2900 		3400 4000 4800 5800 7000 8500 ).	f := #(20 25 31.5 40 50 63 80 100 125 160 200 250 315 400 500 630 800		1000 1250 1600 2000 2500 3150 4000 5000 6300 8000 10000 12500).	af := #(0.532 0.506 0.480 0.455 0.432 0.409 0.387 0.367 0.349 0.330 0.315      	0.301 0.288 0.276 0.267 0.259 0.253 0.250 0.246 0.244 0.243 0.243      	0.243 0.242 0.242 0.245 0.254 0.271 0.301).	lu := #(-31.6 -27.2 -23.0 -19.1 -15.9 -13.0 -10.3 -8.1 -6.2 -4.5 -3.1      	-2.0  -1.1  -0.4   0.0   0.3   0.5   0.0 -2.7 -4.1 -1.0  1.7       	2.5   1.2  -2.1  -7.1 -11.2 -10.7  -3.1).	tf := #(78.5  68.7  59.5  51.1  44.0  37.5  31.5  26.5  22.1  17.9  14.4       	11.4   8.6   6.2   4.4   3.0   2.2   2.4   3.5   1.7  -1.3  -4.2       	-6.0  -5.4  -1.5   6.0  12.6  13.9  12.3).	Transcript clear.	Transcript show: 'ba	', ba size printString; cr; show: 'f	', f size printString; cr; show: 'af	', af size printString; cr;		show: 'lu	', lu size printString; cr; show: 'tf	', tf size printString; cr.	af2 := OrderedCollection new.	lu2 := OrderedCollection new.	tf2 := OrderedCollection new.	ba do: [ :frq |		1 to: f size - 1 do: [ :cnt | | upper lower fract |			lower := f at: cnt.			upper := f at: cnt + 1.			((upper > frq) and: [lower <= frq]) ifTrue:				[fract := (frq - lower) / (upper - lower).				Transcript show: frq printString, '	', lower printString, '	', upper printString, '	', (cnt + fract) asFloat printString; cr.				lower := af at: cnt.				upper := af at: cnt + 1.				af2 addLast: (lower + ((upper - lower) * fract)).				lower := lu at: cnt.				upper := lu at: cnt + 1.				lu2 addLast: (lower + ((upper - lower) * fract)).				lower := tf at: cnt.				upper := tf at: cnt + 1.				tf2 addLast: (lower + ((upper - lower) * fract))]]].	Transcript show: af2 printString; cr.	Transcript show: lu2 printString; cr.	Transcript show: tf2 printString; cr.!ldaAsTable: ifile toks: tfile	"Translate a set of normalizer output messages to scales tables"	"SirenUtility ldaAsTable: '/Volumes/Content/Code/Python/SndsLike/DataSets/FASTLab/FSongs_LDA2.txt' 			toks: '/Volumes/Content/Code/Python/SndsLike/field_names.txt' "	| fil tok tokf toks lin ind map smap which |	fil := ifile asFilename readStream.	tokf := tfile asFilename readStream.	toks := OrderedCollection new.	[tokf atEnd] whileFalse: 		[toks addLast: (tokf upTo: $,)].	tokf close.	Transcript clear."Read file line-by-line"	3 timesRepeat: [fil upTo: Character cr].			"skip header"	[fil atEnd] whileFalse: 		[which := fil upTo: Character cr.		"skip index"		lin := ReadStream on: (fil upTo: Character cr).		ind := 1.		map := OrderedCollection new.		[lin atEnd] whileFalse: 			[tok := lin upTo: $ .			lin skipSeparators.			map add: ((toks at: ind) -> tok asNumber).			ind := ind + 1].		smap := map asSortedCollection: [ :a :b | a value abs > b value abs].			Transcript cr; show: which; cr.		1 to:30 do: [ :count | | ass |			ass := smap at: count.			Transcript show: ass key; tab; tab; show: ass value printString; cr].	].	fil close.!meLogData0: filNam	"Parse a log from Musicengine into 'WTF' statistics"	| inp cr tok key result dist num table |	inp := filNam asFilename readStream.	cr := String with: Character cr.	tok := cr, 'key '.	table := Dictionary new.	Transcript clear; show: ' '; cr; cr.	[inp atEnd] whileFalse: 		[inp skipThroughAll: tok.		key := inp upTo: $ . inp skipSeparators.		inp upTo: $ . inp skipSeparators.		result := inp upTo: $ . inp skipSeparators.		inp upTo: $ . inp skipSeparators.		dist := inp upTo: $ . inp skipSeparators.		inp upTo: $ . inp skipSeparators.		num := inp upTo: Character cr. inp skipSeparators.		num := num asNumber."		Transcript show: 'Res:  ', key printString, ' - ', result printString, ' - ', dist printString, ' - ', num printString, ' - '; cr."		key size > 0 ifTrue:			[(table includesKey: key)			ifFalse: [ | di | di := Dictionary new.				di at: dist put: (1 / num).				table at: key put: di]			ifTrue: [ | di | di := table at: key.				(di includesKey: dist)					ifFalse: [di at: dist put: (1 / num)]					ifTrue: [ | va | va := di at: dist.						di at: dist put: (va + (1 / num))]]]].	table associationsDo: [ :ass |		ass value associationsDo: [ :ass2 |			Transcript show: 'Res:  Song ', ass key, '   Dist ', ass2 key, '  =  ', ((1.0 - (ass2 value asFloat)) * 100) printString, '%'; cr]]" SirenUtility meLogData: '/Users/stp/Desktop/JL-MM_MEngine_Log.txt' "!meLogData2: filNam	"Parse a log from Musicengine into 'WTF' statistics"	"key 23310 res 21646 row 7 dist 0 num 20"	"SirenUtility meLogData2: '/Volumes/Content/Code/FMAK4/MM_Explore/MM_Explore/Stats5/MM_Explore_Log-old.txt' "	| inp cr tok key result "dist row" num table title |	inp := filNam asFilename readStream.	cr := String with: Character cr.	tok := cr, 'key '.	table := Dictionary new.	Transcript clear; cr; show: filNam; cr; cr.	[inp atEnd] whileFalse: 		[inp skipThroughAll: tok.		key := inp upTo: $ . inp skipSeparators.		inp upTo: $ . inp skipSeparators.		result := inp upTo: $ . inp skipSeparators.		inp upTo: $ . inp skipSeparators.		"row := "inp upTo: $ . inp skipSeparators.		inp upTo: $ . inp skipSeparators.		"dist := "inp upTo: $ . inp skipSeparators.		inp upTo: $ . inp skipSeparators.		num := inp upTo: Character cr. inp skipSeparators.		num := num asNumber.		inp upTo: Character cr. inp skipSeparators.		"skip DAT file name"		title := inp upTo: Character cr."		Transcript show: 'K:  ', key, ' Re: ', result, ' Ro: ', row,			' D: ', dist, ' N: ', num printString, ' - '; cr."		key size > 0 ifTrue:			[(table includesKey: key) ifFalse: 				[ | di | di := Dictionary new.				(key = result)					ifTrue:  [di at: title put: 0]					ifFalse:  [di at: title put: (1 / num)].				table at: key put: di]			ifTrue: [ | di va |				di := table at: key.				va := di at: title.				(key = result)					ifFalse:  [di at: title put: (va + (1 / num))]]]].	table associationsDo: [ :ass |		ass value associationsDo: [ :ass2 |			Transcript show: 'Song ', ass key, '  =  ', ((1.0 - (ass2 value asFloat)) * 100) printString, '% = ', ass2 key; cr]]!meLogData: filNam	"Parse a log from Musicengine into 'WTF' statistics"	"key 23310 res 21646 row 7 dist 0 num 20"	"SirenUtility meLogData: '/Users/stp/Code/FMAK4/MM_Explore/MM_Explore_Beta7/Stats/MM_MEngine_Log_SJ2.txt' "	| inp cr tok key result dist row num table |	inp := filNam asFilename readStream.	cr := String with: Character cr.	tok := cr, 'key '.	table := Dictionary new.	Transcript clear; cr; show: filNam; cr; cr.	[inp atEnd] whileFalse: 		[inp skipThroughAll: tok.		key := inp upTo: $ . inp skipSeparators.		inp upTo: $ . inp skipSeparators.		result := inp upTo: $ . inp skipSeparators.		inp upTo: $ . inp skipSeparators.		row := inp upTo: $ . inp skipSeparators.		inp upTo: $ . inp skipSeparators.		dist := inp upTo: $ . inp skipSeparators.		inp upTo: $ . inp skipSeparators.		num := inp upTo: Character cr. inp skipSeparators.		num := num asNumber."		Transcript show: 'K:  ', key, ' Re: ', result, ' Ro: ', row,			' D: ', dist, ' N: ', num printString, ' - '; cr."		key size > 0 ifTrue:			[(table includesKey: key)			ifFalse: [ | di | di := Dictionary new.				di at: dist put: (1 / num).				table at: key put: di]			ifTrue: [ | di | di := table at: key.				(di includesKey: dist)					ifFalse: [di at: dist put: (1 / num)]					ifTrue: [ | va | va := di at: dist.						di at: dist put: (va + (1 / num))]]]].	table associationsDo: [ :ass |		ass value associationsDo: [ :ass2 |			Transcript show: 'Res:  Song ', ass key, '   Dist ', ass2 key, '  =  ', ((1.0 - (ass2 value asFloat)) * 100) printString, '%'; cr]]!mergeLines: nams with: vals	"Go through the list of all files checking for the name prefix like L0000011_."	| inp in2 tok val dict |	inp := (Filename named: nams) readStream.	in2 := (Filename named: vals) readStream.	Transcript clear; cr; show: 'Name sort:'; cr.	dict := Dictionary new.	[inp atEnd] whileFalse:		[tok := inp upTo: Character cr.		val := in2 upTo: Character cr.		dict at: tok put: val].	inp close.	in2 close.	dict keys asSortedCollection do: [ :ke |		Transcript tab; show: ke, '		', (dict at: ke); cr].	Transcript cr; cr; show: 'Freq sort:'; cr.	(dict associations asSortedCollection: [:a :b | a value asNumber > b value asNumber]) do: [ :ass |		Transcript tab; show: ass key, '		', ass value; cr]."SirenUtility mergeLines: '/Volumes/Content/Code/Python/SndsLike/Doc/genre-names.txt' 		with: '/Volumes/Content/Code/Python/SndsLike/Doc/genre-hist' "!pcaToConf2: argString	"Translate a set of PCA dimensions to a config file weighting"	| inp val nam op oc min max |	inp := ReadStream on: argString.	inp skipSeparators.	oc := OrderedCollection new: 80.	min := 1000.	max := 0.	[inp atEnd] whileFalse: 		[op := inp upTo: $ . inp skipSeparators.		val := (inp upTo: $ ) asNumber. inp skipSeparators.		nam := inp upTo: $ . inp skipSeparators.		(op size ~= 1) ifTrue: [self halt]."		((op at: 1) = $-) ifTrue: [val := 0 - val]."		(val > max) ifTrue: [max := val].		(val < min) ifTrue: [min := val].		oc add: (nam -> val)].	max := (max - min)."	min := 0 - min."	Transcript clear; show: 'Dist1Heading Distance1'; cr; cr; show: 'DistanceConfiguration {'; crtab.	oc do: [ :item |		Transcript show: item key, '	', (max - (item value - min)) printString; crtab].	Transcript show: '}'; cr; cr"SirenUtility pcaToConf2: ' - 0.299 DeltaMFCC4 - 0.299 MFCCCoeff4 - 0.283 SpectralBand4 - 0.251 SpectralBand3 + 0.215 DeltaMFCC11 + 0.215 MFCCCoeff11 - 0.199 SpectralSlope + 0.177 DeltaMFCC9 + 0.177 MFCCCoeff9 - 0.174 DeltaMFCC6 - 0.174 MFCCCoeff6 - 0.165 SpectralBand2 - 0.157 LPRMS + 0.143 DrumEnergyBand6 + 0.137 VocalEnergyBand2 - 0.132 SpectralBandwidthVar + 0.121 DrumEnergyBand6Var + 0.118 VocalEnergyBand2Var - 0.115 SpectralBandwidth + 0.114 DrumEnergyBand1 - 0.112 DeltaMFCC1 - 0.111 MFCCCoeff1 - 0.11 SpectralCentroidVar + 0.098 DrumEnergyBand1Var + 0.096 MFCCCoeff7 + 0.096 DeltaMFCC7 + 0.094 SpectralFluxVar + 0.093 MFCCCoeff12 + 0.093 DeltaMFCC12 - 0.092 ZeroCrossingsVar + 0.092 SpectralFlux - 0.09 DynamicRangeVar + 0.084 DrumEnergyBand2 - 0.083 DeltaMFCC1Var - 0.083 MFCCCoeff1Var + 0.075 DrumEnergyBand2Var + 0.071 SpectralBand3Var + 0.07  SpectralBand4Var + 0.069 SpectralVarietyVar - 0.068 DynamicRange + 0.068 DeltaMFCC10 + 0.068 MFCCCoeff10 - 0.067 SpectralRolloffVar - 0.067 MFCCCoeff3 - 0.067 DeltaMFCC3 - 0.065 Peak + 0.065 SpectralBandMax + 0.062 SpectralBandMaxVar - 0.061 DrumEnergyBand4Var - 0.061 SpectralMCentroidVar' "!pcaToConf3: argString	"Translate a set of PCA dimensions to a config file weighting"	| inp val nam op oc min max |	inp := ReadStream on: argString.	inp skipSeparators.	oc := OrderedCollection new: 80.	min := 1000.	max := 0.	[inp atEnd] whileFalse: 		[op := inp upTo: $ . inp skipSeparators.		val := (inp upTo: $ ) asNumber. inp skipSeparators.		nam := inp upTo: $ . inp skipSeparators.		(op size ~= 1) ifTrue: [self halt]."		((op at: 1) = $-) ifTrue: [val := 0 - val]."		(val > max) ifTrue: [max := val].		(val < min) ifTrue: [min := val].		oc add: (nam -> val)].	max := (max - min)."	min := 0 - min."	Transcript clear; show: 'Dist1Heading Distance1'; cr; cr; show: 'DistanceConfiguration {'; crtab.	oc do: [ :item |		Transcript show: item key, '	', item value printString; crtab].	Transcript show: '}'; cr; cr"SirenUtility pcaToConf3: ' - 0.329 SpectralSlope - 0.322 SpectralBandMax - 0.262 SpectralBand4 + 0.226 DrumEnergyBand1 + 0.212 DrumEnergyBand1Var - 0.188 MFCCCoeff4 + 0.172 MFCCCoeff12 - 0.168 SpectralBandwidthVar - 0.166 SpectralCentroidVar + 0.163 DrumEnergyBand2 + 0.158 SpectralBandMaxVar - 0.148 SpectralRolloffVar + 0.143 SpectralBand1 - 0.14 LPRMS + 0.131 DrumEnergyBand2Var - 0.129 SpectralRolloff - 0.127 SpectralBand3 + 0.123 MFCCCoeff9 - 0.122 DynamicRangeVar - 0.122 SpectralBandwidth - 0.12 SpectralCentroid - 0.12 MFCCCoeff6 + 0.109 DrumEnergyBand6Var - 0.106 DrumEnergyBand4 + 0.106 MFCCCoeff2 + 0.104 MFCCCoeff11 - 0.102 DynamicRange + 0.102 DrumEnergyBand5Var + 0.099 SpectralVariety + 0.098 DrumEnergyBand6 - 0.097 DrumEnergyBand4Var + 0.097 ChromaWeightVar - 0.095 SpectralKurtosisVar + 0.093 SpectralVarietyVar + 0.092 DrumEnergyBand5 - 0.089 SpectralBand2Var - 0.089 SpectralSlopeVar + 0.088 VocalEnergyBand2Var + 0.085 MFCCCoeff10 + 0.084 DeltaMFCC9Var + 0.083 VocalEnergyBand2 + 0.081 LPRMSVar - 0.075 SpectralSkewnessVar - 0.075 ZeroCrossingsVar - 0.071 HPRMSVar + 0.069 DeltaMFCC7 + 0.067 DeltaMFCC1 + 0.064 DeltaMFCC11Var + 0.063 DeltaMFCC2Var + 0.058 SpectralSkewness + 0.058 MFCCCoeff7 + 0.055 SpectralBand2 - 0.052 MFCCCoeff8 + 0.05 SpectralBand4Var + 0.049 DeltaMFCC9 + 0.049 SpectralFlux - 0.048 MFCCCoeff1Var - 0.045 SpectralBand1Var + 0.045 DeltaMFCC7Var + 0.044 DeltaMFCC11 + 0.044 ChromaPeakVar - 0.041 DrumEnergyBand3 - 0.041 DrumEnergyBand3Var + 0.038 HPRMS - 0.037 MFCCCoeff3 - 0.037 MFCCCoeff1 + 0.032 DeltaMFCC5 + 0.032 VocalEnergyBand3 - 0.032 ZeroCrossings - 0.031 DeltaMFCC6Var - 0.027 DeltaMFCC8 + 0.027 RMS - 0.027 MFCCCoeff7Var + 0.027 VocalEnergyBand3Var + 0.026 MFCCCoeff5 - 0.026 RMSVar + 0.024 DeltaMFCC12 - 0.022 DeltaMFCC12Var + 0.021 MFCCCoeff11Var + 0.021 DeltaMFCC1Var' "!pcaToConf4: file 	"Translate a set of PCA dimensions to a config file weighting"	"SirenUtility pcaToConf4: '/Volumes/Content/Code/FMAK4/MM_Explore/MM_Explore/FSongsEMF4-PCA.txt'"	| fil cnt inp val nam op oc min max |	fil := file asFilename readStream.	cnt := 0.	Transcript clear.	[fil atEnd]		whileFalse: 			[inp := ReadStream on: (fil upTo: Character cr).			inp skipSeparators.			oc := OrderedCollection new: 80.			min := 1000.			max := 0.			[inp atEnd]				whileFalse: 					[op := inp upTo: $ .					inp skipSeparators.					val := (inp upTo: $ ) asNumber.					inp skipSeparators.					nam := inp upTo: $ .					inp skipSeparators.					op size ~= 1 ifTrue: [self halt].					val > max ifTrue: ["		((op at: 1) = $-) ifTrue: [val := 0 - val]."						max := val].					val < min ifTrue: [min := val].					oc add: nam -> val].			max := max - min.	"	min := 0 - min."			cnt := cnt + 1.			Transcript show: 'Dist' , cnt printString , 'Heading Distance' , cnt printString; cr; cr; 				show: 'DistanceConfiguration {'; crtab.			oc do: [:item | Transcript show: item key , '	' , item value printString; crtab].			Transcript show: '}'; cr; cr]!pcaToConf4b: file 	"Translate a set of PCA dimensions to a config file weighting"	"SirenUtility pcaToConf4b: '/Volumes/Content/Code/FMAK4/MM_Explore/MM_Explore/FSongsEMF4-PCA.txt'"	| fil cnt inp val nam op oc min max names |	fil := file asFilename readStream.	cnt := 0.	names := self featureNameDictionary.	Transcript clear.	[fil atEnd]		whileFalse: 			[inp := ReadStream on: (fil upTo: Character cr).			inp skipSeparators.			oc := OrderedCollection new: 80.			min := 1000.			max := 0.			[inp atEnd]				whileFalse: 					[op := inp upTo: $ .					inp skipSeparators.					val := (inp upTo: $ ) asNumber.					inp skipSeparators.					nam := inp upTo: $ .					inp skipSeparators.					op size ~= 1 ifTrue: [self halt].					val > max ifTrue: ["		((op at: 1) = $-) ifTrue: [val := 0 - val]."						max := val].					val < min ifTrue: [min := val].					oc add: nam -> val].			max := max - min.	"	min := 0 - min."			cnt := cnt + 1.			Transcript show: 'DistanceConfiguration {'; crtab.			oc do: [:item | Transcript show: (names at: item key asSymbol) printString, '	' ,					item value printString; crtab].			Transcript show: '}'; cr; cr]!pcaToConf5: file 	"Translate a set of PCA dimensions to a config file weighting"	"SirenUtility pcaToConf5: '/Users/stp/Code/FMAK4/MM_Explore/lda_sfx5.txt'"	| fil cnt inp val coll ind |	fil := file asFilename readStream.	cnt := 1.	Transcript clear.	coll := OrderedCollection new.	inp := ReadStream on: (fil upTo: Character cr).	[inp atEnd] whileFalse: 		[coll addLast: (inp upTo: $,). inp skipSeparators].	[fil atEnd] whileFalse: 		[inp := ReadStream on: (fil upTo: Character cr).		Transcript show: 'Dist' , cnt printString , 'Heading Distance' , cnt printString; cr; cr; 				show: 'DistanceConfiguration {'; cr.		ind := 1.		[inp atEnd] whileFalse: 			[val := inp upTo: $,.			inp skipSeparators.			Transcript tab; show: (coll at: ind), '	', val; cr.			ind := ind + 1].			Transcript show: '}'; cr; cr.			cnt := cnt + 1].	fil close.!pcaToConf6: file 	"Translate a set of PCA/LDA dimensions to a config file weighting"	"SirenUtility pcaToConf6: '/Volumes/Content/Code/FMAK4/MM_Explore/MM_Explore/FSongsEMF4-PCA.txt'"	| fil cnt inp val coll ind names |	fil := file asFilename readStream.	cnt := 1.	Transcript clear.	coll := OrderedCollection new.	names := self featureNameDictionary."Read first line for feature names"	inp := ReadStream on: (fil upTo: Character cr).	[inp atEnd] whileFalse: 		[coll addLast: (inp upTo: $,). inp skipSeparators]."File loop"	[fil atEnd] whileFalse: 		[inp := ReadStream on: (fil upTo: Character cr).		Transcript show: 'Dist' , cnt printString , 'Heading Distance' , cnt printString; cr; cr; 				show: 'DistanceConfiguration {'; cr.		ind := 1."Line loop"		[inp atEnd] whileFalse: 			[val := inp upTo: $,.			inp skipSeparators.			Transcript tab; show: (names at: (coll at: ind) asSymbol) printString, '	', val; cr.			ind := ind + 1].			Transcript show: '}'; cr; cr.			cnt := cnt + 1].	fil close.!pcaToConf6: file title: title	"Translate a set of PCA/LDA dimensions to a config file weighting"	"SirenUtility pcaToConf6: '/Users/stp/Code/FMAK4/MM_Explore/MM_Explore/APM_Distances/lda_apm5_movement2'				title: 'Movement' "	| fil cnt inp val coll ind names |	fil := file asFilename readStream.	cnt := 1.	Transcript clear.	Transcript show: 'DistanceName ' , title; cr; cr.	coll := OrderedCollection new.	names := self featureNameDictionary."Read first line for feature names"	inp := ReadStream on: (fil upTo: Character cr).	[inp atEnd] whileFalse: 		[coll addLast: (inp upTo: $,). inp skipSeparators]."File loop"	[fil atEnd] whileFalse: 		[inp := ReadStream on: (fil upTo: Character cr).		Transcript show: '# ', title, ' Distance ' , cnt printString; cr; cr; 				show: 'DistanceConfiguration {'; cr.		ind := 1."Line loop"		[inp atEnd] whileFalse: 			[val := inp upTo: $,.			inp skipSeparators.			Transcript tab; show: (names at: (coll at: ind) asSymbol) printString, '	', val; cr.			ind := ind + 1].			Transcript show: '}'; cr; cr.			cnt := cnt + 1].	fil close!pcaToConf: argString	"Translate a set of PCA dimensions to a config file weighting"	| inp val nam op |	inp := ReadStream on: argString.	inp skipSeparators.	Transcript clear; show: 'Dist1Heading Distance1'; cr; cr; show: 'DistanceConfiguration {'; crtab.	[inp atEnd] whileFalse: 		[op := inp upTo: $ . inp skipSeparators.		val := inp upTo: $ . inp skipSeparators.		nam := inp upTo: $ . inp skipSeparators.		(op size ~= 1) ifTrue: [self halt].		((op at: 1) = $+) ifTrue: [Transcript show: nam, ' ', val; crtab].		((op at: 1) = $-) ifTrue: [Transcript show: nam, ' -', val; crtab]].	Transcript show: '}'; cr; cr"SirenUtility pcaToConf: ' - 0.299 DeltaMFCC4 - 0.299 MFCCCoeff4 - 0.283 SpectralBand4 - 0.251 SpectralBand3 + 0.215 DeltaMFCC11 + 0.215 MFCCCoeff11 - 0.199 SpectralSlope + 0.177 DeltaMFCC9 + 0.177 MFCCCoeff9 - 0.174 DeltaMFCC6 - 0.174 MFCCCoeff6 - 0.165 SpectralBand2 - 0.157 LPRMS + 0.143 DrumEnergyBand6 + 0.137 VocalEnergyBand2 - 0.132 SpectralBandwidthVar + 0.121 DrumEnergyBand6Var + 0.118 VocalEnergyBand2Var - 0.115 SpectralBandwidth + 0.114 DrumEnergyBand1 - 0.112 DeltaMFCC1 - 0.111 MFCCCoeff1 - 0.11 SpectralCentroidVar + 0.098 DrumEnergyBand1Var + 0.096 MFCCCoeff7 + 0.096 DeltaMFCC7 + 0.094 SpectralFluxVar + 0.093 MFCCCoeff12 + 0.093 DeltaMFCC12 - 0.092 ZeroCrossingsVar + 0.092 SpectralFlux - 0.09 DynamicRangeVar + 0.084 DrumEnergyBand2 - 0.083 DeltaMFCC1Var - 0.083 MFCCCoeff1Var + 0.075 DrumEnergyBand2Var + 0.071 SpectralBand3Var + 0.07  SpectralBand4Var + 0.069 SpectralVarietyVar - 0.068 DynamicRange + 0.068 DeltaMFCC10 + 0.068 MFCCCoeff10 - 0.067 SpectralRolloffVar - 0.067 MFCCCoeff3 - 0.067 DeltaMFCC3 - 0.065 Peak + 0.065 SpectralBandMax + 0.062 SpectralBandMaxVar - 0.061 DrumEnergyBand4Var - 0.061 SpectralMCentroidVar' "!printRatios	"Print ratios"	| line1 line2 |	line1 := ReadStream on: ''.	line2 := ReadStream on: ''.	Transcript clear.	[line1 atEnd]		whileFalse: 			[| n1 n2 n3 |			line1 skipSeparators.			line2 skipSeparators.			n1 := (line1 upTo: $,) asNumber.			n2 := (line2 upTo: $,) asNumber.			n1 > n2				ifTrue: [n3 := n1 / n2]				ifFalse: [n3 := n2 / n1].			n3 := n3 abs.			n3 < 1.0 ifTrue: [n3 := 1.0 / n3].			n3 < 1.2				ifTrue: [Transcript cr]				ifFalse: [Transcript show: n3 printString; cr]]!removeDblLines: sql to: outN	"Go through the list of all files checking for the name prefix like L0000011_."	| inp lin out |	inp := (Filename named: sql) readStream.	out := (Filename named: outN) writeStream.	[inp atEnd] whileFalse:		[lin := inp upTo: Character cr."		((lin size > 1) and: [(lin at: 1) = $C])			ifTrue: [self halt]."		('Cannot read file*' match: lin)			ifFalse: [out nextPutAll: lin; cr]].	inp close.	out close."SirenUtility removeDblLines: '/Users/stp/Code/FMAK4/MM_Analyzer/DB_Pop1/failed_abort.txt' 	to: '/Users/stp/Code/FMAK4/MM_Analyzer/DB_Pop1/failed_abort2.txt' "!renameFiles: fold 	"Create mv commands"	"Transcript clear.  SirenUtility renameFiles: '/Volumes/Content/iTunes/LMSMusic'"	| pos dir tail |	list := Filename filesMatching: (fold, '/*').	list do: 		[ :item | | fil |		fil := Filename named: item.		fil exists ifTrue:			[fil isDirectory				ifTrue: [Transcript show: '	Desc: ', item; cr.					SirenUtility renameFiles: item]				ifFalse: [pos := item lastIndexOf: $/ .					(((item at: pos + 1) == $M) 							and: [(item at: pos + 9) == $_]) 						ifTrue: [dir := item copyFrom: 1 to: pos.							tail := item copyFrom: pos + 10 to: item size."							Transcript show: 'mv ', item, '   ', dir, tail; cr."							Transcript show: tail; cr.							fil renameTo: (dir, tail)	]]]]!scrambleFileLines	"Read a file and write it with the lines in random order"	"SirenUtility scrambleFileLines"	| inp coll rnd out |	inp := (Filename named: '/Users/stp/Code/FMAK4/LaTiDo/LaTiDo_Beta5/song_list.txt') readStream.	coll := OrderedCollection new.	rnd := Random new.	out := (Filename named: '/Users/stp/Code/FMAK4/LaTiDo/LaTiDo_Beta5/song_list2.txt') writeStream.	[inp atEnd]		whileFalse: [coll addLast: (inp upTo: Character cr)].	Transcript show: 'scrambling ' , coll size printString , ' files'; cr.	[coll isEmpty]		whileFalse: 			[ | ind |			ind := (rnd next * coll size) truncated + 1.			out nextPutAll: (coll removeAtIndex: ind); cr].	out close.	inp close.	Transcript show: 'done'; cr!selectFileLines: inF to: outF base: bas every: ind	"Read a file and write it with the lines in random order"	"SirenUtility scrambleFileLines"	| inp out dir cnt lin |	inp := (Filename named: inF) readStream.	out := (Filename named: outF) writeStream.	dir := inF copyFrom: 1 to: (inF lastIndexOf: $/).	cnt := 0.	[inp atEnd] whileFalse: 		[lin := inp upTo: Character cr.		cnt := cnt + 1.		(cnt \\ ind = 0)			ifTrue: [ | dir2 |				dir2 := lin copyFrom: 1 to: (lin lastIndexOf: $/).				out nextPutAll: 'mkdir -p ', bas, '/', dir2; cr.				out nextPutAll: 'cp ', dir, lin, ' ', bas, '/', dir2; cr]].	out close.	inp close.	Transcript show: 'done'; cr" SirenUtility selectFileLines: '/Volumes/NewImagineDrive/song_list.txt' to: '/Volumes/NewImagineDrive/copy_songs.txt' 			base: '/Volumes/Media/New/APM' every: 10 "!sqlAsSanity2: fields from: table	"Create an SQL sanity test script"	"SELECT count(*) from Frames where RMS <= 0;	SELECT min(RMS), avg(RMS), max(RMS), stddev(RMS) FROM Frames WHERE RMS > 0; "	| strm |	Transcript clear.	strm := ReadStream on: fields.	[strm atEnd] whileFalse:		[ | fld |		fld := strm upTo: $ .		Transcript show: 'SELECT round(min(', fld, '), 4) as ', fld, ', round(avg(', fld, '), 4) as AVG, round(max(', fld, '), 4) as MAX, round(stddev(', fld, '), 4) as DEV FROM ', table, ';'; cr]"SirenUtility sqlAsSanity2: 'RMS Peak LPRMS HPRMS ZeroCrossings DynamicRange TemporalCentroid LogAttackTime AttackSlope StereoWidth BassDynamicity SpectralCentroid SpectralMCentroid SpectralSlope SpectralRolloff SpectralVariety SpectralFlux SpectralBandwidth SpectralSkewness SpectralKurtosis ChromaPeak ChromaWeight SpectralBand1 SpectralBand2 SpectralBand3 SpectralBand4 SpectralBandMax DrumEnergyBand1 DrumEnergyBand2 DrumEnergyBand3 DrumEnergyBand4 DrumEnergyBand5 DrumEnergyBand6 VocalEnergyBand1 VocalEnergyBand2 VocalEnergyBand3 MFCCCoeff1 MFCCCoeff2 MFCCCoeff3 MFCCCoeff4 MFCCCoeff5 MFCCCoeff6 MFCCCoeff7 MFCCCoeff8 MFCCCoeff9 MFCCCoeff10 MFCCCoeff11 MFCCCoeff12 DeltaMFCC1 DeltaMFCC2 DeltaMFCC3 DeltaMFCC4 DeltaMFCC5 DeltaMFCC6 DeltaMFCC7 DeltaMFCC8 DeltaMFCC9 DeltaMFCC10 DeltaMFCC11 DeltaMFCC12 LowPeakAmp LowPeakBPM MidPeakAmp MidPeakBPM HighPeakAmp HighPeakBPM LowMidRatio PeriodCentroid1 PeriodSpread1 PeriodCentroid2 PeriodSpread2 FP_gravity FP_bass FP_focus RMSVar PeakVar LPRMSVar HPRMSVar ZeroCrossingsVar DynamicRangeVar TemporalCentroidVar LogAttackTimeVar AttackSlopeVar StereoWidthVar BassDynamicityVar SpectralCentroidVar SpectralMCentroidVar SpectralSlopeVar SpectralRolloffVar SpectralVarietyVar SpectralFluxVar SpectralBandwidthVar SpectralSkewnessVar SpectralKurtosisVar ChromaPeakVar ChromaWeightVar SpectralBand1Var SpectralBand2Var SpectralBand3Var SpectralBand4Var SpectralBandMaxVar DrumEnergyBand1Var DrumEnergyBand2Var DrumEnergyBand3Var DrumEnergyBand4Var DrumEnergyBand5Var DrumEnergyBand6Var VocalEnergyBand1Var VocalEnergyBand2Var VocalEnergyBand3Var MFCCCoeff1Var MFCCCoeff2Var MFCCCoeff3Var MFCCCoeff4Var MFCCCoeff5Var MFCCCoeff6Var MFCCCoeff7Var MFCCCoeff8Var MFCCCoeff9Var MFCCCoeff10Var MFCCCoeff11Var MFCCCoeff12Var DeltaMFCC1Var DeltaMFCC2Var DeltaMFCC3Var DeltaMFCC4Var DeltaMFCC5Var DeltaMFCC6Var DeltaMFCC7Var DeltaMFCC8Var DeltaMFCC9Var DeltaMFCC10Var DeltaMFCC11Var DeltaMFCC12Var ' from: 'FSongsAPM'"!sqlAsSanity: fields from: table	"Create an SQL sanity test script"	"SELECT count(*) from Frames where RMS <= 0;	SELECT min(RMS), avg(RMS), max(RMS), stddev(RMS) FROM Frames WHERE RMS > 0; "	| strm |	Transcript clear.	strm := ReadStream on: fields.	[strm atEnd] whileFalse:		[ | fld |		fld := strm upTo: $ .		Transcript show: 'SELECT count(*) as ', fld, ' from ', table, ' where ', fld, ' < 0;'; cr;		show: 'SELECT round(min(', fld, '), 4) as MIN, round(avg(', fld, '), 4) as AVG, round(max(', fld, '), 4) as MAX, round(stddev(', fld, '), 4) as DEV FROM ', table, ' WHERE ', fld, ' > 0;'; cr]"SirenUtility sqlAsSanity: 'RMS Peak LPRMS HPRMS ZeroCrossings DynamicRange TemporalCentroid LogAttackTime AttackSlope StereoWidth BassDynamicity SpectralCentroid SpectralMCentroid SpectralSlope SpectralRolloff SpectralVariety SpectralFlux SpectralBandwidth SpectralSkewness SpectralKurtosis ChromaPeak ChromaWeight SpectralBand1 SpectralBand2 SpectralBand3 SpectralBand4 SpectralBandMax DrumEnergyBand1 DrumEnergyBand2 DrumEnergyBand3 DrumEnergyBand4 DrumEnergyBand5 DrumEnergyBand6 VocalEnergyBand1 VocalEnergyBand2 VocalEnergyBand3 MFCCCoeff1 MFCCCoeff2 MFCCCoeff3 MFCCCoeff4 MFCCCoeff5 MFCCCoeff6 MFCCCoeff7 MFCCCoeff8 MFCCCoeff9 MFCCCoeff10 MFCCCoeff11 MFCCCoeff12 DeltaMFCC1 DeltaMFCC2 DeltaMFCC3 DeltaMFCC4 DeltaMFCC5 DeltaMFCC6 DeltaMFCC7 DeltaMFCC8 DeltaMFCC9 DeltaMFCC10 DeltaMFCC11 DeltaMFCC12 LowPeakAmp LowPeakBPM MidPeakAmp MidPeakBPM HighPeakAmp HighPeakBPM LowMidRatio PeriodCentroid1 PeriodSpread1 PeriodCentroid2 PeriodSpread2 FP_gravity FP_bass FP_focus RMSVar PeakVar LPRMSVar HPRMSVar ZeroCrossingsVar DynamicRangeVar TemporalCentroidVar LogAttackTimeVar AttackSlopeVar StereoWidthVar BassDynamicityVar SpectralCentroidVar SpectralMCentroidVar SpectralSlopeVar SpectralRolloffVar SpectralVarietyVar SpectralFluxVar SpectralBandwidthVar SpectralSkewnessVar SpectralKurtosisVar ChromaPeakVar ChromaWeightVar SpectralBand1Var SpectralBand2Var SpectralBand3Var SpectralBand4Var SpectralBandMaxVar DrumEnergyBand1Var DrumEnergyBand2Var DrumEnergyBand3Var DrumEnergyBand4Var DrumEnergyBand5Var DrumEnergyBand6Var VocalEnergyBand1Var VocalEnergyBand2Var VocalEnergyBand3Var MFCCCoeff1Var MFCCCoeff2Var MFCCCoeff3Var MFCCCoeff4Var MFCCCoeff5Var MFCCCoeff6Var MFCCCoeff7Var MFCCCoeff8Var MFCCCoeff9Var MFCCCoeff10Var MFCCCoeff11Var MFCCCoeff12Var DeltaMFCC1Var DeltaMFCC2Var DeltaMFCC3Var DeltaMFCC4Var DeltaMFCC5Var DeltaMFCC6Var DeltaMFCC7Var DeltaMFCC8Var DeltaMFCC9Var DeltaMFCC10Var DeltaMFCC11Var DeltaMFCC12Var ' from: 'Frames1107a'"!sqlAsTable1: sql	"turn SQL inserts into lists"	| inp line1 line2 val |	inp := ReadStream on: sql.	inp upTo: $( .	line1 := ReadStream on: (inp upTo: $)).	inp upTo: $( .	line2 := ReadStream on: (inp upTo: $)).	Transcript clear.	[line1 atEnd] whileFalse:		[line1 skipSeparators.		line2 skipSeparators.		val := line2 upTo: $,.		((val size > 8) and: [(val first isDigit) or: [val first == $-]]) ifTrue: [val := val copyFrom: 1 to: 8].		Transcript show: (line1 upTo: $,), '	', val; cr]" [ SirenUtility sqlAsTable1: '' ] "!sqlAsTable2: str 	"turn SQL inserts into lists"	| inp line1 line2 line3 line4 line5 |	inp := ReadStream on: str.	line1 := ReadStream on: (inp upTo: Character cr).	line2 := ReadStream on: (inp upTo: Character cr).	line3 := ReadStream on: (inp upTo: Character cr).	line4 := ReadStream on: (inp upTo: Character cr).	line5 := ReadStream on: (inp upTo: Character cr).	Transcript clear.	"SirenUtility sqlAsTable2: ''	"	[line1 atEnd]		whileFalse: 			[Transcript show: (line1 upTo: $,)					, '	' , (line2 upTo: $,) , '	' , (line3 upTo: $,) , '	' , (line4 upTo: $,) , '	' , (line5 upTo: $,); cr.			line1 skipSeparators.			line2 skipSeparators.			line3 skipSeparators.			line4 skipSeparators.			line5 skipSeparators]!sqlAsTable3: str	"turn SQL record print-outs into lists"	| inp line1 line2 |	inp := ReadStream on: str.	line1 := ReadStream on: (inp upTo: Character cr).	line2 := ReadStream on: (inp upTo: Character cr).	line1 skip: 1.	line2 skip: 1.	Transcript clear.	[line1 atEnd] whileFalse:		[ | tag val |		tag := line1 upTo: $|.		[tag first = $ ] whileTrue: [tag := tag copyFrom: 2 to: tag size].		[tag last = $ ] whileTrue: [tag := tag copyFrom: 1 to: tag size - 1].		val := line2 upTo: $|.		[(val size > 0) and: [val first = $ ]] whileTrue: [val := val copyFrom: 2 to: val size].		[(val size > 0) and: [val last = $ ]] whileTrue: [val := val copyFrom: 1 to: val size - 1].		Transcript show: tag, '	', val; cr.		line1 skipSeparators.		line2 skipSeparators]"SirenUtility sqlAsTable3: '| OID   | Version | File                                                                                                                | Name                      | Title                | Artist            | Album               | Year | Bit_Rate | Frame_Rate | Duration | RealDuration | Format | Genre       | Labels | peakAvg  | peakVar  | peakDel       | peakDel2        | rmsAvg  | rmsVar  | rmsDel    | rmsDel2     | lp_rmsAvg | lp_rmsVar | lp_rmsDel   | lp_rmsDel2    | hp_rmsAvg | hp_rmsVar | hp_rmsDel  | hp_rmsDel2      | dyn_rangeAvg | dyn_rangeVar | dyn_rangeDel        | dyn_rangeDel2 | stereoAvg | stereoVar | stereoDel   | stereoDel2   | spectCentAvg | spectCentVar | spectCentDel | spectCentDel2 | spectRollAvg | spectRollVar | spectRollDel | spectRollDel2 | spectSpreadAvg | spectSpreadVar | spectSpreadDel | spectSpreadDel2 | spectSkewAvg | spectSkewVar | spectSkewDel | spectSkewDel2 | spectKurtAvg | spectKurtVar | spectKurtDel | spectKurtDel2 | spectSlopeAvg | spectSlopeVar | spectSlopeDel | spectSlopeDel2 | spectVarAvg | spectVarVar | spectVarDel | spectVarDel2 | bands0Avg  | bands0Var | bands0Del      | bands0Del2       | bands1Avg | bands1Var | bands1Del      | bands1Del2      | bands2Avg | bands2Var | bands2Del      | bands2Del2      | bands3Avg | bands3Var | bands3Del       | bands3Del2       | drums0Avg  | drums0Var  | drums0Del       | drums0Del2       | drums1Avg  | drums1Var | drums1Del      | drums1Del2       | drums2Avg | drums2Var | drums2Del      | drums2Del2      | drums3Avg  | drums3Var | drums3Del      | drums3Del2      | drums4Avg | drums4Var | drums4Del      | drums4Del2    | drums5Avg  | drums5Var | drums5Del       | drums5Del2       | drums6Avg  | drums6Var | drums6Del      | drums6Del2       | mfcc0Avg | mfcc0Var | mfcc0Del  | mfcc0Del2   | mfcc1Avg | mfcc1Var | mfcc1Del   | mfcc1Del2   | mfcc2Avg | mfcc2Var | mfcc2Del  | mfcc2Del2  | mfcc3Avg | mfcc3Var | mfcc3Del   | mfcc3Del2    | mfcc4Avg | mfcc4Var | mfcc4Del  | mfcc4Del2    | mfcc5Avg | mfcc5Var | mfcc5Del    | mfcc5Del2  | mfcc6Avg | mfcc6Var | mfcc6Del  | mfcc6Del2    | mfcc7Avg | mfcc7Var | mfcc7Del  | mfcc7Del2     | mfcc8Avg | mfcc8Var | mfcc8Del   | mfcc8Del2    | mfcc9Avg | mfcc9Var | mfcc9Del   | mfcc9Del2    | mfcc10Avg | mfcc10Var | mfcc10Del  | mfcc10Del2   | mfcc11Avg | mfcc11Var | mfcc11Del   | mfcc11Del2  | mfcc12Avg | mfcc12Var | mfcc12Del  | mfcc12Del2   | chroMaxAvg | chroMaxVar | chroMaxDel  | chroMaxDel2 | chroWhtAvg | chroWhtVar | chroWhtDel   | chroWhtDel2  | chromaW0 | chromaW1 | chromaW2 | chromaW3 | chromaW4 | chromaW5 | chromaI0 | chromaI1 | chromaI2 | chromaI3 | bh_lowpeakamp | bh_midpeakamp | bh_highpeakamp | bh_lowpeakBPM | bh_midpeakBPM | bh_highpeakBPM | bh_pdcentroid1 | bh_pdcentroid2 | bh_pdspread1 | bh_pdspread2 | bh_tempo | fp_gravity | fp_bass | fp_focus | quiet    | loud     | Normalized | Dummy || 17423 |  120606 | /Volumes/Content/Sound/FASTLab/Rock/Alternative/The White Stripes/Get Behind Me Satan/09 - Passive Manipulation.mp3 | 09 - Passive Manipulation | Passive Manipulation | The White Stripes | Get Behind Me Satan | 2005 |      192 |      44100 |       35 |         NULL | mp3    | Alternative | NULL   | 0.192291 | 0.116928 | 0.00000222394 | -0.000000776818 | 67.9935 | 6.36435 | 0.0269291 | -0.00303174 |  0.847879 |  0.059893 | 0.000519927 | -0.0000306582 |  0.876554 | 0.0486395 | 0.00043811 | -0.000000947992 |      1.43161 |     0.911636 | -0.0000000000783756 |             0 |   1.04191 | 0.0227366 | 0.000730619 | 0.0000300477 |      912.902 |       665.86 |     0.712529 |     0.0348412 |       1893.6 |      1693.18 |      1.10427 |    -0.0424718 |        55.8735 |         26.712 |      0.0607197 |      0.00351417 |      3.11733 |      1.00431 |   0.00180198 |  0.0000255831 |      551.413 |      931.738 |     0.459566 |     0.0366734 |     -0.192111 |      0.241438 |  -0.000423905 |  -0.0000153122 |     15.3483 |     13.9327 | 0.000269049 | -0.000202881 | 0.00405654 | 0.0115113 | 0.000000157337 | -0.0000000762126 | 0.0285801 | 0.0605365 | 0.000000825425 | -0.000000614326 | 0.0441162 | 0.0326995 | 0.000000136991 | -0.000000111565 | 0.0117488 | 0.0100603 | 0.0000000856726 | -0.0000000657855 | 0.00266336 | 0.00387538 | 0.0000000849702 | -0.0000000782795 | 0.00414807 | 0.0313553 | 0.000000114193 | -0.0000000977018 | 0.0121219 | 0.0315659 | 0.000000217175 | -0.000000337324 | 0.00498537 | 0.0101859 | 0.000000147585 | -0.000000335092 | 0.0442431 | 0.0385287 | 0.000000475968 | 0.00000021425 | 0.00850986 | 0.0160413 | 0.0000000855441 | -0.0000000690647 | 0.00792804 | 0.0138176 | 0.000000110215 | -0.0000000398989 | -158.182 |  19.9903 | -0.169205 | -0.00790593 | -16.6639 |  7.20077 | -0.0275972 | -0.00308902 |  45.3643 |  5.54171 | 0.0431115 | 0.00199847 | -29.8003 |  4.85354 | -0.0207538 | -0.000289898 |  15.0912 |  3.15155 | 0.0142022 | -0.000696169 | -2.28955 |  2.66135 | 0.000860066 | 0.00119418 | -9.26957 |  2.68688 | -0.004614 | -0.000324289 |  11.2376 |  2.63934 | 0.0111536 | -0.0000819382 | -14.6686 |   1.7228 | -0.0102186 | 0.0000827001 |  7.60839 |  1.70503 | 0.00517882 | -0.000946577 |   -2.2558 |   1.66157 | -0.0033257 | -0.000625911 |  -5.80585 |   1.46011 | -0.00633996 | -0.00139861 |   6.00967 |   1.36157 | 0.00554991 | -0.000205676 |     5.2906 |    2.99216 | 0.000657462 |           0 |    17.4494 |     9.4196 | 0.0000814388 | -0.000381717 |  15.9596 |  14.5038 |  13.9974 |  12.6361 |  12.4857 |  12.4006 |        4 |        5 |        3 |        4 |       1187.56 |       774.676 |          700.7 |            84 |           111 |         152.25 |        0.47378 |       0.525235 |     0.307083 |     0.284018 |       83 |    11.7904 | 1176.07 | 0.266031 | 0.188034 | 0.361604 |          0 |  NULL |'"!sqlAsTable4: sql	"turn SQL inserts into lists"	| inp line1 line2 |	inp := ReadStream on: sql.	line1 := ReadStream on: (inp upTo: Character cr).	line2 := ReadStream on: (inp upTo: Character cr).	Transcript clear.	[line1 atEnd] whileFalse:		[line1 skipSeparators.		line2 skipSeparators.		Transcript show: (line1 upTo: $|), '	', (line2 upTo: $|); cr]"SirenUtility sqlAsTable4: '| OID | Version | RMS     | Peak | LPRMS    | HPRMS    | ZeroCrossings | NumOnsets | DynamicRange | Tempo | TemporalCentroid | StereoWidth | STrackBirths | STrackDeaths | LogAttackTime | AttackSlope | TemporalDelta | DynamicRange2 | TemporalSkewness | TemporalKurtosis | SpectralCentroid | SpectralMCentroid | SpectralSlope | SpectralVariety | SpectralFlux | SpectralRolloff | SpectralBandwidth | SpectralSkewness | SpectralKurtosis | BassDynamicity | ChromaPeak | ChromaWeight | SpectralBand1 | SpectralBand2 | SpectralBand3 | SpectralBand4 | SpectralBandMax | DrumEnergyBand1 | DrumEnergyBand2 | DrumEnergyBand3 | DrumEnergyBand4 | DrumEnergyBand5 | DrumEnergyBand6 | VocalEnergyBand1 | VocalEnergyBand2 | VocalEnergyBand3 | MFCCCoeff1 | MFCCCoeff2 | MFCCCoeff3 | MFCCCoeff4 | MFCCCoeff5 | MFCCCoeff6 | MFCCCoeff7 | MFCCCoeff8 | MFCCCoeff9 | MFCCCoeff10 | MFCCCoeff11 | MFCCCoeff12 | DeltaMFCC1 | DeltaMFCC2 | DeltaMFCC3 | DeltaMFCC4 | DeltaMFCC5 | DeltaMFCC6  | DeltaMFCC7 | DeltaMFCC8 | DeltaMFCC9 | DeltaMFCC10 | DeltaMFCC11 | DeltaMFCC12 | Dummy | Name                                                                                    | Title              | Artist  | Album          | FYear | BitRate | FrameRate | Duration | AnalyzedOn          | FileFormat | genre | SubGenre | Genre1 | Genre2 | Genre1Weight | Genre2Weight | Instrument1 | Instrument2 | Instrument1Weight | Instrument2Weight | AvgFT | WeightedFT | TempoAvg | TempoWeight | TempoDistr | TrackerConf | SegmentConf | SegmentWeight | NumSegments | VerseLength | TypicalIndex | SoloIndex | FirstVerseStart | TypicalStart | SoloStart | FadeIn | FadeOut | QuietSections | LoudSections | SoloCentroid | SoloVariety | SoloDynRange | SoloTempo | SoloRMS | LowPeakAmp | LowPeakBPM | MidPeakAmp | MidPeakBPM | HighPeakAmp | HighPeakBPM | LowMidRatio | PeriodCentroid1 | PeriodSpread1 | PeriodCentroid2 | PeriodSpread2 | FP_gravity | FP_bass | FP_focus | IgnoreMe | Frame_id | RealDuration | RMSVar  | PeakVar | LPRMSVar  | HPRMSVar  | ZeroCrossingsVar | NumOnsetsVar | DynamicRangeVar | TempoVar | TemporalCentroidVar | StereoWidthVar | STrackBirthsVar | STrackDeathsVar | LogAttackTimeVar | AttackSlopeVar | TemporalDeltaVar | DynamicRange2Var | TemporalSkewnessVar | TemporalKurtosisVar | SpectralCentroidVar | SpectralMCentroidVar | SpectralSlopeVar | SpectralVarietyVar | SpectralFluxVar | SpectralRolloffVar | SpectralBandwidthVar | SpectralSkewnessVar | SpectralKurtosisVar | BassDynamicityVar | ChromaPeakVar | ChromaWeightVar | SpectralBand1Var | SpectralBand2Var | SpectralBand3Var | SpectralBand4Var | SpectralBandMaxVar | DrumEnergyBand1Var | DrumEnergyBand2Var | DrumEnergyBand3Var | DrumEnergyBand4Var | DrumEnergyBand5Var | DrumEnergyBand6Var | VocalEnergyBand1Var | VocalEnergyBand2Var | VocalEnergyBand3Var | MFCCCoeff1Var | MFCCCoeff2Var | MFCCCoeff3Var | MFCCCoeff4Var | MFCCCoeff5Var | MFCCCoeff6Var | MFCCCoeff7Var | MFCCCoeff8Var | MFCCCoeff9Var | MFCCCoeff10Var | MFCCCoeff11Var | MFCCCoeff12Var | DeltaMFCC1Var | DeltaMFCC2Var | DeltaMFCC3Var | DeltaMFCC4Var | DeltaMFCC5Var | DeltaMFCC6Var | DeltaMFCC7Var | DeltaMFCC8Var | DeltaMFCC9Var | DeltaMFCC10Var | DeltaMFCC11Var | DeltaMFCC12Var | Normalized | NameToken | NameHash ||   7 |     401 | 84.0758 |    1 | 0.985711 | 0.911627 |       35.2401 |      NULL |      1.44974 |  NULL |             NULL |   0.0275899 |         NULL |         NULL |          NULL |        NULL |          NULL |          NULL |             NULL |             NULL |          2543.71 |           36.2414 |      0.949313 |         41.1234 |      411.234 |          4411.1 |           2445.45 |          -1.0037 |          1.00933 |        0.77805 |    4.72762 |    0.0994907 |      0.460558 |      0.682761 |      0.560796 |      0.254011 |         1.68034 |       0.0125302 |       0.0234091 |       0.0429922 |        0.154923 |       0.0672378 |        0.274716 |         0.287072 |         0.361746 |         0.151492 |   -156.403 |    30.1007 |    -9.1536 |    4.26657 |    2.49706 |    1.54698 |     2.1409 |   -2.54895 |    5.28766 |    -3.90333 |     7.20927 |     -6.8558 |   -1.41547 |   -0.32091 |   0.162287 | -0.0371563 |   0.122429 | -0.0020153 |  0.0390949 | -0.0208084 | -0.0373697 |     0.14992 |   -0.252382 |   -0.869272 |     0 | /Volumes/Content/Imagine/likeZEBRA/00048a18cf612aa76a34d9586abd694a-192k.mp3 | A Gentleman Caller | Cursive | The Ugly Organ |  2003 |     192 |     44100 |  198.687 | 2012-02-06 11:48:22 | NULL       |       | NULL     |        |        |            0 |            0 |             |             |                 0 |                 0 |  NULL |       NULL |       75 |     4.82022 |          0 |        NULL |        NULL |           0.2 |           7 |     14.2791 |         NULL |      NULL |            NULL |      15.3721 |   29.6512 |    0.1 |       1 |      0.227273 |     0.459596 |      1.01222 |    0.978416 |     0.998257 |  0.999205 | 1.01675 |    2115.94 |         76 |    1879.54 |      101.5 |     2425.09 |       152.5 |    0.748768 |        0.509922 |      0.322213 |        0.561144 |      0.289624 |    12.9884 | 889.571 |  0.24823 |        0 |     NULL |         NULL | 4.71803 |       0 | 0.0189726 | 0.0462158 |          18.3732 |         NULL |        0.288789 |     NULL |                NULL |      0.0313974 |            NULL |            NULL |             NULL |           NULL |             NULL |             NULL |                NULL |                NULL |             916.158 |              5.04453 |         0.737833 |            37.6228 |         376.204 |            2156.71 |              884.775 |                   0 |          0.00276028 |                 0 |       2.78317 |       0.0826722 |         0.477139 |         0.638193 |         0.182613 |         0.133611 |           0.838511 |          0.0141522 |          0.0546544 |          0.0610459 |          0.0827348 |          0.0390911 |           0.084203 |            0.136754 |           0.0900187 |           0.0547591 |             0 |        5.4759 |         6.177 |       3.79211 |       3.72598 |       2.28716 |       2.22553 |       1.83518 |       1.52066 |        1.41427 |        1.40663 |              0 |       8.52226 |       3.55717 |       2.96468 |       2.75269 |        2.4559 |       2.05688 |       1.67187 |       1.35652 |        1.1467 |        1.08005 |        1.15847 |        1.25469 |          0 | NULL      |     NULL |'"!sqlAsTable5: str	"turn SQL inserts into lists" | inp line1 line2 |inp := ReadStream on: str.line1 := ReadStream on: (inp upTo: Character cr).line2 := ReadStream on: (inp upTo: Character cr).Transcript clear.[line1 atEnd] whileFalse:	[Transcript show: (line1 upTo: $|), '	', (line2 upTo: $|); cr.	line1 skipSeparators.	line2 skipSeparators]"SirenUtility sqlAsTable5: 'OID | Version | RMS      | Peak     | LPRMS    | HPRMS    | ZeroCrossings | NumOnsets | DynamicRange | Tempo | TemporalCentroid | StereoWidth | STrackBirths | STrackDeaths | LogAttackTime | AttackSlope | TemporalDelta | DynamicRange2 | TemporalSkewness | TemporalKurtosis | SpectralCentroid | SpectralMCentroid | SpectralSlope | SpectralVariety | SpectralFlux | SpectralRolloff | SpectralBandwidth | SpectralSkewness | SpectralKurtosis | BassDynamicity | ChromaPeak | ChromaWeight | SpectralBand1 | SpectralBand2 | SpectralBand3 | SpectralBand4 | SpectralBandMax | DrumEnergyBand1 | DrumEnergyBand2 | DrumEnergyBand3 | DrumEnergyBand4 | DrumEnergyBand5 | DrumEnergyBand6 | VocalEnergyBand1 | VocalEnergyBand2 | VocalEnergyBand3 | MFCCCoeff1 | MFCCCoeff2 | MFCCCoeff3 | MFCCCoeff4 | MFCCCoeff5 | MFCCCoeff6 | MFCCCoeff7 | MFCCCoeff8 | MFCCCoeff9 | MFCCCoeff10 | MFCCCoeff11 | MFCCCoeff12 | DeltaMFCC1 | DeltaMFCC2 | DeltaMFCC3 | DeltaMFCC4 | DeltaMFCC5 | DeltaMFCC6 | DeltaMFCC7 | DeltaMFCC8 | DeltaMFCC9 | DeltaMFCC10 | DeltaMFCC11 | DeltaMFCC12 | Dummy | Name                                                                         | Title                                                            | Artist                           | Album                          | FYear | BitRate | FrameRate | Duration | AnalyzedOn          | FileFormat | Genre                | SubGenre | Genre1 | Genre2 | Genre1Weight | Genre2Weight | Instrument1 | Instrument2 | Instrument1Weight | Instrument2Weight | AvgFT | WeightedFT | TempoAvg | TempoWeight | TempoDistr | TrackerConf | SegmentConf | SegmentWeight | NumSegments | VerseLength | TypicalIndex | SoloIndex | FirstVerseStart | TypicalStart | SoloStart | FadeIn  | FadeOut | QuietSections | LoudSections | SoloCentroid | SoloVariety | SoloDynRange | SoloTempo | SoloRMS  | LowPeakAmp | LowPeakBPM | MidPeakAmp | MidPeakBPM | HighPeakAmp | HighPeakBPM | LowMidRatio | PeriodCentroid1 | PeriodSpread1 | PeriodCentroid2 | PeriodSpread2 | FP_gravity | FP_bass  | FP_focus | IgnoreMe | Frame_id | RealDuration | RMSVar   | PeakVar | LPRMSVar | HPRMSVar | ZeroCrossingsVar | NumOnsetsVar | DynamicRangeVar | TempoVar | TemporalCentroidVar | StereoWidthVar | STrackBirthsVar | STrackDeathsVar | LogAttackTimeVar | AttackSlopeVar | TemporalDeltaVar | DynamicRange2Var | TemporalSkewnessVar | TemporalKurtosisVar | SpectralCentroidVar | SpectralMCentroidVar | SpectralSlopeVar | SpectralVarietyVar | SpectralFluxVar | SpectralRolloffVar | SpectralBandwidthVar | SpectralSkewnessVar | SpectralKurtosisVar | BassDynamicityVar | ChromaPeakVar | ChromaWeightVar | SpectralBand1Var | SpectralBand2Var | SpectralBand3Var | SpectralBand4Var | SpectralBandMaxVar | DrumEnergyBand1Var | DrumEnergyBand2Var | DrumEnergyBand3Var | DrumEnergyBand4Var | DrumEnergyBand5Var | DrumEnergyBand6Var | VocalEnergyBand1Var | VocalEnergyBand2Var | VocalEnergyBand3Var | MFCCCoeff1Var | MFCCCoeff2Var | MFCCCoeff3Var | MFCCCoeff4Var | MFCCCoeff5Var | MFCCCoeff6Var | MFCCCoeff7Var | MFCCCoeff8Var | MFCCCoeff9Var | MFCCCoeff10Var | MFCCCoeff11Var | MFCCCoeff12Var | DeltaMFCC1Var | DeltaMFCC2Var | DeltaMFCC3Var | DeltaMFCC4Var | DeltaMFCC5Var | DeltaMFCC6Var | DeltaMFCC7Var | DeltaMFCC8Var | DeltaMFCC9Var | DeltaMFCC10Var | DeltaMFCC11Var | DeltaMFCC12Var | Normalized | NameToken          | NameHash |117 |    NULL | -1.83717 | -3.90253 | -4.08645 | 0.785797 |     -0.793643 |      NULL |     -2.50231 |   142 |             NULL |    -1.11733 |         NULL |         NULL |          NULL |        NULL |          NULL |          NULL |             NULL |             NULL |         -2.80726 |          -1.97672 |      0.839651 |        -1.06561 |     -2.03585 |        -1.21814 |          -2.80614 |        0.0361157 |        0.0665514 |        2.51223 |    3.06326 |      1.23933 |     -0.405384 |     -0.152297 |     -0.156569 |     -0.187089 |        -2.23537 |       -0.889843 |        -2.08139 |        -3.79159 |       -0.460359 |         6.17459 |         3.19844 |         0.266324 |          1.76117 |         -3.23064 |   -2.24078 |    4.87082 |   -4.26584 |   -4.96812 |   0.917358 |   -4.30851 |    -2.8051 |   -4.95841 |   -1.28653 |    -2.29132 |    0.243058 |    -1.84485 |    2.93851 |  -0.734525 |  -0.615343 |    1.04836 |   -2.59857 |  -0.351315 |   0.756947 |   0.147634 |    2.03962 |    0.895794 |    -2.58086 |    0.330826 |     0 | /Volumes/APM_DataSet/Content/SON/SCD/wav/SON_SCD_0065/SON_SCD_0065_01501.wav | Emotion 15 - with great expression | Human EMOTIONS - ROMANCE | Sonoton Recorded Music Library |     0 |       0 |         0 |  2.24273 | 2011-08-13 15:45:04 | NULL       | ATMOSPHERES PEACEFUL | NULL     |        |        |            0 |            0 | Strings     |             |                 0 |                 0 |  NULL |       NULL |      142 |     1.67326 |          0 |        NULL |        NULL |      -2.19587 |           3 |   -0.938632 |         NULL |      NULL |            NULL |     -1.40177 |   -1.3122 | 7.41176 | 2.06976 |       2.70217 |       3.7466 |     -4.00987 |     7.25745 |     0.618955 |   2.53414 | -6.43671 |   -2.23654 |   -2.67692 |   -1.27333 |    3.68575 |    -1.70656 |     2.09562 |    -5.83788 |      -0.0403466 |    -0.0376683 |        0.288977 |      0.643274 |  -0.494681 | -3.11423 |  5.01688 |        0 |     NULL |          147 | -0.48327 |       0 | 0.467474 |  1.35661 |         -2.06447 |         NULL |        -3.51508 |     NULL |                NULL |      -0.518306 |            NULL |            NULL |             NULL |           NULL |             NULL |             NULL |                NULL |                NULL |            -2.96269 |              4.33998 |        0.0222154 |           -1.13263 |       -0.326599 |           0.092265 |             -2.95931 |             1.13189 |            0.370121 |                 0 |       4.25886 |         6.26155 |          0.26138 |        -0.234169 |        -0.254173 |        -0.265407 |          -0.112271 |           -1.15201 |           -2.15888 |            -3.7721 |            3.35442 |            6.45882 |            2.13194 |            0.810697 |             4.94452 |            -1.80374 |       -2.7001 |     -0.657421 |       2.87821 |      -1.49955 |      -2.54399 |       1.35592 |      0.969165 |      0.903667 |       1.22003 |         -1.952 |       -0.85463 |      -0.399615 |      -2.56504 |      -1.57809 |        -2.668 |      -3.65277 |     -0.802104 |     -0.445918 |      0.367635 |      -3.05127 |      -2.38813 |       -5.59726 |      -0.822447 |       -5.71447 |          1 | SON_SCD_0065_01501 |     NULL |'"!sqlAsTable: sql	"turn SQL inserts into lists"	| inp line1 line2 val |	inp := ReadStream on: sql.	line1 := ReadStream on: (inp upTo: Character cr).	line2 := ReadStream on: (inp upTo: Character cr).	Transcript clear.	[line1 atEnd] whileFalse:		[line1 skipSeparators.		line2 skipSeparators.		val := line2 upTo: $,.		((val first isDigit) and: [val size > 8]) ifTrue: [val := val copyFrom: 1 to: 8].		Transcript show: (line1 upTo: $,), '	', val; cr]" [ SirenUtility sqlAsTable: '' ] "!timingsTable: file 	"Read a list of timing summaries and summarize"	"SirenUtility timingsTable: '/Volumes/Content/Code/Python/SndsLike/Doc/timing2.txt'"	"Timing table (msec)	Start-up           0.0	Pre-proc          18.5	Load            6039.5	Setup              4.5	Analysis        1834.5	Stage2             0.0	Fl_Patt         2919.0	Bt_Hist         7079.8	Chroma             0.4	Stats              0.8	DB save          217.8	Clean-up           0.6	Total          18115.9"	| fil inp tok val dat count lin iCount inds nam tot |	fil := file asFilename readStream.	dat := Dictionary new.	inds := Dictionary new.	count := 0.	iCount := 1."Read file line-by-line"	[fil atEnd] whileFalse: 		[lin := fil upTo: Character cr.		(lin includes: Character tab)			" if it's a label line"			ifFalse: [count := count + 1. iCount := 1]			ifTrue: [inp := ReadStream on: lin.				inp skipSeparators.				tok := (inp upTo: Character space) asSymbol.				inp skipSeparators.				val := inp upToEnd asNumber.				inds at: iCount put: tok.				iCount := iCount + 1.				(dat includesKey: tok)					ifFalse: [dat at: tok put: val]					ifTrue: [dat at: tok put: (val + (dat at: tok))]]].	fil close.	tot := ((dat at: #Total)  / 1000.0)."self halt."	Transcript clear; cr; show: 'Timing Averages'; cr; cr.	inds keysDo: [ :k |		nam := inds at: k.		val := ((dat at: nam) asFloat / tot) asInteger.		Transcript show: nam asString, '		', val printString; cr].	Transcript cr; cr."	Transcript show: 'Sorted by %'; cr; cr.	inds := dat associations asSortedCollection: [ :a :b | a value > b value].	inds do:		[  :ass |		nam := ass key.		val := (((dat at: nam) / count) / tot) asInteger.		Transcript show: nam asString, '		', val printString; cr]"!weightsToScale: file 	"Translate a set of normalizer output messages to scales tables"	"SirenUtility weightsToScale: '/Volumes/Content/Code/FMAK4/MM_Explore/MM_Explore/weightsAPM.txt'"	"--                  RMS  min:        1.529  avg:       76.687  max:       87.629  var:       78.935  dev:        8.885"	| fil inp tok avg dev names avgCmd devCmd |	fil := file asFilename readStream.	names := self featureNameDictionary.	avgCmd := WriteStream on: (String new: 1024).	devCmd := WriteStream on: (String new: 1024).	avgCmd nextPutAll: 'AverageWeights {'; cr.	devCmd nextPutAll: 'StdDevWeights {'; cr."Read file line-by-line"	[fil atEnd] whileFalse: 		[inp := ReadStream on: (fil upTo: Character cr).		inp skip: 2.		inp skipSeparators.		tok := inp upTo: $ .		Transcript show: tok; cr.		inp throughAll: 'avg:'.		inp skipSeparators.		avg := inp upTo: $ .		inp throughAll: 'dev:'.		inp skipSeparators.		dev := inp upToEnd.		avgCmd tab; nextPutAll: ((names at: tok asSymbol) printString, ' ', avg); cr.		devCmd tab; nextPutAll: ((names at: tok asSymbol) printString, ' ', dev); cr.].	inp close.	avgCmd nextPutAll: '}'; cr.	devCmd nextPutAll: '}'; cr.	Transcript clear; show: avgCmd contents; cr; show: devCmd contents.! !!Siren.SirenUtility class methodsFor: 'utilities'!categoryList	"Answer the class categories for all of CSL"	^#( 'Music-Models-Representation'		'Music-Models-Implementation'		'Music-Events'		'Music-EventGenerators'		'Music-EventModifiers'		'Music-Functions'		'Music-PitchClasses'		'Music-PitchScales'		'Music-Sound'		'Music-Support'		'Music-DBase'		'MusicIO-Voices'		'MusicIO-MIDI'		'MusicIO-OSC'		'MusicIO-Sound'		'MusicIO-External'		'MusicUI-DisplayLists'		'MusicUI-DisplayListViews'		'MusicUI-Layout'		'MusicUI-Editors'		'MusicUI-Functions'		'MusicUI-Sound'"		'MusicApps-CSL'		'MusicApps-Loris'"		'MusicApps-LPC'		'MusicApps-SHARC'	)!fileoutCategories	"Create the source directory of old-fashioned ST80 file-outs (for Squeak users)"	"SirenUtility fileoutCategories"	| folder file |	folder := Dialog request: 'File out into' initialAnswer: 'Sources'.	folder isEmpty ifTrue: [^nil].	folder asFilename exists ifFalse: [folder asFilename makeDirectory].	folder := folder, Filename separatorString.	self categoryList do:		[ :cat |		file := SourceCodeStream write: (folder, cat, '.st') encoding: #Source.		[Siren organization fileOutCategorySource: cat on: file]			ensure: [file close]]!playSoundFile: nam	"Play a sound file using UNIX shell and libsndfile's play program"	"Edit this to your platform's method, which might use a SoundPort or a simple shell command"	"Sound playFile: 'a.snd' "	| fullName |	fullName := SirenUtility findFile: nam.	fullName ifNil: [self error: 'File not found'].	Transcript show: 'Playing snd file ', nam, '...'; cr.	UnixProcess cshOne: ('/usr/local/bin/sndfile-play ', fullName)!writeSirenManual	"Create the big book"	"SirenUtility writeSirenManual"	"Siren organization listAtCategoryNamed: #'Music-Events'""	| mw classes |	mw := ManualWriter new.	classes := OrderedCollection new: 512.	self categoryList do:		[ :cat |		classes addAll: (Siren organization superclassOrder: cat)].	mw classList: classes.	mw methodBody value: false.	mw doReport"!writeSirenManualToHTML: folder	"Create the doxygen-style manual in an HTML folder"	"SirenUtility writeSirenManualToHTML: 'Manual'"	| mw index classes fn book |	mw := nil. "ManualWriter new."	mw methodBody value: false.	index := WriteStream on: (String new: 2048).	book := TextStream on: (String new: 2048).	classes := OrderedCollection new: 512.	fn := Filename named: folder.	fn exists		ifTrue: [fn isDirectory			ifFalse: [self error: 'File exists']]		ifFalse: [fn makeDirectory].	index nextPutAll: '<HTML><HEAD><TITLE>The Siren 7.5 Reference Manual</TITLE></HEAD><BODY BGCOLOR="#ffffcc"><H2>The Siren 7.5 Reference Manual</H2><font size=+1><UL><a href=#cat><LI>Classes listed by category</A><a href=#alpha><LI>Classes listed alphabetically</A><a href="SirenReferenceManual.html"><LI>The entire manual in one file</A></UL></font><a name="cat">'; cr.	book emphasis: #(#large #bold); nextPutAll: 'The Siren 7.5 Reference Manual'; emphasis: nil; cr.	self categoryList do:		[ :cat | | catClasses |		index cr; nextPutAll: '<H4>', cat asString, '</H4><UL>'; cr.		book cr; nextPutAll: '<H2>', cat asString, '</H2><HR>'; cr.		catClasses := Siren organization superclassOrder: cat.		classes addAll: (catClasses collect: [ :each | each name]).		catClasses do:			[ :theClass | | text |			index cr; nextPutAll: '<LI><A HREF="', theClass name, '.html">', theClass name, '</A>'.			mw classList: (Array with: theClass).			text := mw reportText.			book cr; nextPutAllText: text, '<HR>'; cr.			"Smalltalk.Heeg.HtmlWriter write: text				into: (folder, Filename separatorString, theClass name, '.html')"].		index cr; nextPutAll: '</UL><P><HR>'; cr].	index cr; nextPutAll: '<a name="alpha"><H3>Classes Listed Alphabetically</H3><UL>'; cr.	classes asSortedCollection do:		[ :theClass |			index cr; nextPutAll: '<LI><A HREF="', theClass asString, '.html">', theClass asString, '</A>'].	index cr; nextPutAll: '</UL><HR><br></BODY></HTML>'; cr.	((Filename named: (folder, Filename separatorString, 'index.html')) writeStream) 			nextPutAll: index contents; close.	"Smalltalk.Heeg.HtmlWriter write: book contents				into: (folder, Filename separatorString, 'SirenReferenceManual.html')."! !!Siren.SirenUtility class methodsFor: 'class var accessing'!dataDir	"Answer the class's default data storage directory."	^DataDir!defaultMIDIIn	"Answer the class's default MIDI input device."	^DefaultMIDIIn!defaultMIDIIn: num	"Set the class's default MIDI input device."	DefaultMIDIIn :=  num!defaultMIDIOut	"Answer the class's default MIDI output device."	^DefaultMIDIOut!defaultMIDIOut: num	"Set the class's default MIDI output device."	DefaultMIDIOut := num!defaultOSCHost	"Answer the class's default OSC host IP."	^DefaultOSCHost!defaultOSCHost: ip	"Set the class's default OSC host IP."	DefaultOSCHost := ip!defaultOSCPort	"Answer the class's default OSC port #."	^DefaultOSCPort!defaultOSCPort: num	"Set the class's default OSC port #."	DefaultOSCPort := num!scoreDir	"Answer the class's default score storage directory."	^ScoreDir!soundDir	"Answer the class's default sound storage directory."	^SoundDir! !!Siren.SirenUtility class methodsFor: 'example access'!formNamed: key	"Answer the given item from the global music constants."	"(SirenUtility formNamed: #altoClef) display"	^(DisplayListView constants at: #forms) at: key!musicConstants	"Answer the global music constants (mostly icons)."	"SirenUtility musicConstants inspect"	^DisplayListView constants! !!Siren.SirenUtility class methodsFor: 'logging'!log: theMessage	"Log the given string to the Transcript (or otgher output stream) if the system verbosity is >= the given verbosity level"	"SirenUtility log: 'hello there' level: 2"	LoggingStream		ifNil: [Transcript show: theMessage; cr]		ifNotNil: [LoggingStream nextPutAll: theMessage; cr].!log: theMessage level: verbosityInt	"Log the given string to the Transcript (or otgher output stream) if the system verbosity is >= the given verbosity level"	"SirenUtility log: 'hello there' level: 2"	Verbosity > verbosityInt		ifTrue: [self log: theMessage]!verbosity	"Answer the class's default verbosity, 0/1/2."	"(SirenUtility verbosity > 0)"	"(SirenUtility verbosity > 1)"	^Verbosity!verbosity: aNum	"Set the class's default verbosity, 0/1/2."	Verbosity := aNum! !!Siren.SirenUtility class methodsFor: 'file support'!addDir: dir to: list	"Try to locate the requested directory and, if found, add it to the given list"	"SirenSession initialize"	| theDir sDir |	(dir includes: $*) 		ifTrue: [ | base |			base := dir copyUpTo: $*.			(base last == Filename separator) ifTrue: 				[base := base copyFrom: 1 to: base size - 1 ].			theDir := SirenUtility findDir: base tryHard: true.			theDir ifNotNil: [self addDir: theDir to: list.				((Filename named: theDir) filesMatching: '*') do: 					[ :newD | 					(Filename named: newD) isDirectory						ifTrue: [self addDir: newD to: list]]]]		ifFalse: [theDir := SirenUtility findDir: dir tryHard: true.			theDir ifNil: [^self].			sDir := theDir asSymbol.			(list includes: sDir)				ifFalse: [list add: sDir]]!createS7: aFullPathName	"Create an s7 folder and copy any files with the same name  into it"	"SirenUtility createS7: (SirenUtility dataDir first, Filename separatorString, 'testing')"	"SirenUtility nextName: 'testing' type: 'aiff' "	"| strm |	strm := (SirenUtility nextName: 'testing' type: 'aiff' ) asFilename writeStream.	strm nextPut: $..	strm close."	| froot fnam list |	froot := Filename named: aFullPathName.	fnam := Filename named: aFullPathName, '.s7'.	fnam exists ifTrue: [fnam isDirectory		ifTrue: [Transcript show: aFullPathName, ' exists.'; cr. ^nil]		ifFalse: [Transcript show: aFullPathName, ' exists as a regular file!!'; cr. ^nil]].	list := froot filesMatching: '*'.	fnam makeDirectory.	list do: [ :fil |		(Filename named: fil) renameTo: (aFullPathName, '.s7', Filename separatorString, 									(Filename named: fil) tail)]!findDir: dir	"Try to locate the requested directory either locally or globally"	"SirenUtility findDir: 'Data' tryHard: false"	"SirenUtility findDir: 'Frameworks' tryHard: true"	^self findDir: dir tryHard: false!findDir: dir tryHard: aggressive	"Try to locate the requested directory either locally or globally"	"SirenUtility findDir: 'Data' tryHard: false"	"SirenUtility findDir: 'Frameworks' tryHard: true"	"SirenUtility findDir: '3-Credo' tryHard: true"	| fsep home ddr |	dir asFilename existsSafely ifTrue: [^dir].								"if local"	fsep := Filename separatorString.	(fsep, dir) asFilename existsSafely ifTrue: [^(fsep, dir)].				"if at /X"	home := SystemUtils getEnvironmentVariable: 'HOME'.	(home, fsep, dir) asFilename existsSafely ifTrue: [^(home, fsep, dir)].	"if in $HOME"	(Filename filesMatching: '*')										"if in *"		do: [ :each | ((each, fsep, dir) asFilename existsSafely)				ifTrue: [^(each, fsep, dir)]].	ddr := DataDir.	ddr ifNil: [ddr := SystemUtils getEnvironmentVariable: 'VISUALWORKS'].	ddr do: [ :dDir | | fnd |		((dir findString: dDir asString startingAt: 1) = 0)			ifTrue: [fnd := self findFile: dir in: dDir.				fnd isEmpty ifFalse: [^fnd]]].	aggressive ifFalse: [^nil].	(Filename filesMatching: home, fsep, '*')								"if in ~/*"		do: [ :each | ((each, fsep, dir) asFilename existsSafely)				ifTrue: [^(each, fsep, dir)]].	(Filename filesMatching: fsep, 'Smalltalk', fsep, '*')					"if in /Smalltalk/*"		do: [ :each | ((each, fsep, dir) asFilename existsSafely)				ifTrue: [^(each, fsep, dir)]].	(Filename filesMatching: home, fsep, 'Smalltalk', fsep, '*')				"if in ~/Smalltalk/*"		do: [ :each | ((each, fsep, dir) asFilename existsSafely)				ifTrue: [^(each, fsep, dir)]].	^nil!findFile: fil	"Try to locate the requested file in the data directories, being smart about s7 files"	"SirenUtility findFile: 'b.snd'"	"SirenUtility findFile: '1.1a.aiff'"	| nam ans base s7 |	fil asFilename exists ifTrue: [^fil asFilename asAbsoluteFilename asString].	DataDir isString		ifTrue: [nam := (DataDir, Filename separatorString, fil).			nam asFilename exists ifTrue: [^nam]]		ifFalse: [DataDir do:			[ :dir |			ans := self findFile: fil in: dir.			ans isEmpty ifFalse: [^ans]]].	((fil findString: '.s7' startingAt: 1) = 0) ifFalse: [^nil].	(fil includes: $.) ifTrue:							"if not found, look for an s7 folder"		[base := fil asFilename base asString.		s7 := base, 's7'.		s7 := self findFile: s7.		s7 ifNotNil:			[nam := (s7, Filename separatorString, fil).			nam asFilename exists ifTrue: [^nam]].		base := base copyFrom: 1 to: base size - 1.		"try again removing the next-to-last suffix"		s7 := base asFilename base asString, 's7'.		s7 := self findFile: s7.		s7 ifNotNil:			[nam := (s7, Filename separatorString, fil).			nam asFilename exists ifTrue: [^nam]]].	^nil!findFile: fil in: theDir	"Try to locate the requested file in the given directory, being smart about s7 files"	"SirenUtility findFile: 'b.snd'"	"SirenUtility findFile: '1.1a.aiff'"	"SirenUtility findFile: '1.2a1.aiff'"	| nam ans |	(theDir includes: $*)		ifFalse: [nam := (theDir, Filename separatorString, fil).			nam asFilename exists				ifTrue: [^nam asFilename asAbsoluteFilename asString].			(Filename filesMatching: (theDir, Filename separatorString, '*.s7')) do:				[ :dir2 |				nam := (theDir, Filename separatorString, fil).				nam asFilename exists					ifTrue: [^nam asFilename asAbsoluteFilename asString]]]		ifTrue: [(Filename filesMatching: theDir) do:			[ :dir2 |			(dir2 asFilename tail = fil) ifTrue: [^dir2].			dir2 asFilename isDirectory				ifTrue: [ans := self findFile: fil in: dir2.						ans isEmpty ifFalse: [^ans]]]].	^''!findFiles: ext	"Answer all of the files in the user's data folders with the given filename extension"	"SirenUtility findFiles: 'au'"	"SirenUtility findFiles: 'mid'"	| coll |	coll := Set new.	DataDir do:		[ :dir | self findFiles: ext in: dir into: coll].	^coll asOrderedCollection!findFiles: ext in: theDir into: coll	"Add the files with the given name extension to the given collection"	"SirenUtility findFiles: 'au' into: OrderedCollection new"	"SirenUtility findFiles: 'mid' into: OrderedCollection new"	(theDir includes: $*)			ifFalse: [(Filename filesMatching: (theDir, Filename separatorString, '*')) do:				[ :dir2 | | dex |				dex := dir2 asFilename extension.				dex ifNotNil: [(('*', ext, '*') match: dex ignoreCase: true)						ifTrue: [coll add: dir2 asSymbol]]]]			ifTrue: [(Filename filesMatching: theDir) do:				[ :dir2 |				dir2 asFilename isDirectory					ifTrue: [self findFiles: ext in: dir2 into: coll]]].	^coll!listS7: aName	"List the contents of the requested s7 file"	"SirenUtility listS7: '1.2a1'"	| fobj fnam |	fnam := (SirenUtility findFile: (aName, '.s7')).	fnam isEmpty ifTrue: [^#()].	fobj := Filename named: fnam.	^fobj filesMatching: '*'!nextName: aName type: extension	"Answer the next free name with the given extension in the given s7 folder"	"SirenUtility createS7: (SirenUtility dataDir first, Filename separatorString, 'testing')"	"SirenUtility nextName: 'testing' type: 'aiff'"	| fnam base list ind |	fnam := (SirenUtility findFile: (aName, '.s7')).	fnam isEmpty ifTrue: [^nil].	ind := '_1.'.	base := Filename named: fnam.	list := (base filesMatching: ('*.', extension)).	list isEmpty		ifFalse: [list := list asSortedCollection last.			((list includes: $_) and: [list includes: $.])				ifTrue: [ind := (list copyFrom: (list lastIndexOf: $_) + 1 to: (list lastIndexOf: $.) - 1) asNumber.					ind := '_', (ind + 1) printString, '.']].	^(base asString, Filename separatorString, aName, ind, extension)! !Siren.SirenUtility comment:'The class SirenUtility represents the package-level state of the Siren Framework. Its class methods answer a variety of Siren system variables such as default file directories.Class Variables:	DataDir <String> the default sound/score directory.	ScoreDir <String> the score directory.	SoundDir <String> the sound directory.'!!Core.Character methodsFor: 'converting'!asString	"Answer the receiver converted into a string."	^String with: self! !!Siren.ClusterEditor class methodsFor: 'interface specs'!windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	<resource: #canvas>	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeAutoSave true #positionAutoSave true #sizeType #lastSavedSize #openType #advanced #positionType #lastSavedPosition ) 			#label: 'Cluster/Ostinato Editor' 			#min: #(#{Core.Point} 526 255 ) 			#max: #(#{Core.Point} 526 255 ) 			#bounds: #(#{Graphics.Rectangle} 867 583 1393 838 ) 			#colors: 			#(#{UI.LookPreferences} 				#setForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setBackgroundColor: #(#{Graphics.ColorValue} 6130 6974 7421 ) 				#setSelectionForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 6144 6144 5632 ) 				#setBorderColor: #(#{Graphics.ColorValue} #lightGray ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 29 0 50 0 125 0 71 0 ) 					#name: #voiceMenu 					#model: #defaultVoiceClass 					#label: 'MIDI' 					#menu: #voiceMenu ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 20 0 33 0 ) 					#name: #Label1 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} 0 4096 8191 ) ) 					#label: 'Voice' 					#style: #systemDefault ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 28 0 104 0 124 0 125 0 ) 					#name: #ActionButton1 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 6655 8191 5119 ) ) 					#model: #testMIDI 					#label: 'Test MIDI I/O' 					#style: #systemDefault 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 28 0 77 0 124 0 98 0 ) 					#name: #configMIDI 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 8191 6655 5119 ) ) 					#model: #configureMIDI 					#label: 'Configure MIDI' 					#style: #systemDefault 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 28 0 131 0 124 0 152 0 ) 					#name: #testOSC 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 7044 7044 7044 ) ) 					#model: #testOSCout 					#label: 'Test OSC' 					#style: #systemDefault 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 28 0 158 0 124 0 179 0 ) 					#name: #ActionButton3 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 5119 8191 8191 ) ) 					#model: #stopMIDI 					#label: 'Stop MIDI' 					#style: #systemDefault 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 200 0 53 0 242 0 73 0 ) 					#name: #minPitchField 					#model: #minPitch 					#style: #systemDefault 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 277 0 53 0 319 0 73 0 ) 					#name: #maxPitchField 					#model: #maxPitch 					#style: #systemDefault 					#type: #number ) 				#(#{UI.MenuButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 					#layout: #(#{Graphics.LayoutFrame} 171 0 100 0 318 0 121 0 ) 					#name: #scale 					#model: #scale 					#label: 'Pentatonic' 					#menu: #scaleMenu ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 11 0 7 0 ) 					#name: #Label7 					#label: 'Output' 					#style: #large ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 354 0 121 0 ) 					#name: #Label2 					#label: 'Thread' 					#style: #large ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 142 0 7 0 ) 					#name: #Label3 					#label: 'Contents' 					#style: #large ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 33 0 ) 					#name: #Label4 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} 0 4096 8191 ) ) 					#label: 'Pitches' 					#style: #systemDefault ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 169 0 57 0 ) 					#name: #Label5 					#label: 'Min' 					#style: #systemDefault ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 249 0 57 0 ) 					#name: #Label8 					#label: 'Max' 					#style: #systemDefault ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 170 0 75 0 319 0 95 0 ) 					#name: #pitchLidtField 					#model: #pitchList 					#style: #systemDefault 					#type: #string ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 414 0 118 0 516 0 139 0 ) 					#name: #startButton 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 5119 5119 8191 ) ) 					#model: #startStop 					#tabable: false 					#label: 'Start' 					#style: #large ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 380 0 145 0 ) 					#name: #clusterButton1 					#model: #mode 					#label: 'Cluster' 					#select: #cluster ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 380 0 168 0 ) 					#name: #ostButton 					#model: #mode 					#label: 'Ostinato' 					#select: #ostinato ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 155 0 127 0 ) 					#name: #Label6 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} 0 4096 8191 ) ) 					#label: 'Durations' 					#style: #systemDefault ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 164 0 149 0 ) 					#name: #Label9 					#label: 'Min' 					#style: #systemDefault ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 190 0 146 0 237 0 166 0 ) 					#name: #minDurField 					#model: #minDur 					#style: #systemDefault 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 244 0 149 0 ) 					#name: #Label10 					#label: 'Max' 					#style: #systemDefault ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 271 0 146 0 318 0 165 0 ) 					#name: #maxDurField 					#model: #maxDur 					#style: #systemDefault 					#type: #number ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 219 0 12 0 276 0 33 0 ) 					#name: #AddButton 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 5119 6655 8191 ) ) 					#model: #addPitch 					#label: 'Add' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 275 0 12 0 332 0 33 0 ) 					#name: #removeButton 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 5119 8191 5119 ) ) 					#model: #removePitch 					#label: 'Remove' 					#defaultable: true ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 380 0 189 0 ) 					#name: #cloudButton 					#model: #mode 					#label: 'Cloud' 					#select: #cloud ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 425 0 224 0 482 0 245 0 ) 					#name: #loadButton 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 8191 5119 5119 ) ) 					#model: #load 					#label: 'Load' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 369 0 224 0 426 0 245 0 ) 					#name: #saveButton 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 6655 5119 8191 ) ) 					#model: #save 					#label: 'Save' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 154 0 191 0 ) 					#name: #Label11 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} 0 4096 8191 ) ) 					#label: 'Amplitudes' 					#style: #systemDefault ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 163 0 213 0 ) 					#name: #Label12 					#label: 'Min' 					#style: #systemDefault ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 189 0 210 0 236 0 229 0 ) 					#name: #minAmplField 					#model: #minAmpl 					#style: #systemDefault 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 243 0 213 0 ) 					#name: #Label13 					#label: 'Max' 					#style: #systemDefault ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 270 0 210 0 317 0 229 0 ) 					#name: #maxAmplField 					#model: #maxAmpl 					#style: #systemDefault 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 355 0 33 0 ) 					#name: #Label14 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} 0 4096 8191 ) ) 					#label: 'Voices' 					#style: #systemDefault ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 364 0 55 0 ) 					#name: #Label15 					#label: 'Min' 					#style: #systemDefault ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 390 0 52 0 437 0 71 0 ) 					#name: #minVoiceField 					#model: #minVoice 					#style: #systemDefault 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 444 0 55 0 ) 					#name: #Label16 					#label: 'Max' 					#style: #systemDefault ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 471 0 52 0 518 0 71 0 ) 					#name: #maxVoiceField 					#model: #maxVoice 					#style: #systemDefault 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 169 0 167 0 318 0 186 0 ) 					#name: #durationListField 					#model: #durationList 					#style: #systemDefault 					#type: #string ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 168 0 231 0 317 0 250 0 ) 					#name: #amplListField 					#model: #amplList 					#style: #systemDefault 					#type: #string ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 369 0 73 0 518 0 92 0 ) 					#name: #voiceListField 					#model: #voiceList 					#style: #systemDefault 					#type: #string ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 436 0 14 0 471 0 35 0 ) 					#name: #ActionButton2 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 5119 6655 8191 ) ) 					#model: #addEvent 					#label: '+' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 470 0 14 0 505 0 35 0 ) 					#name: #ActionButton4 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 5119 8191 5119 ) ) 					#model: #removeEvent 					#label: '-' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 404 0 14 0 434 0 36 0 ) 					#name: #numEventsField 					#model: #numEvents 					#style: #systemDefault 					#type: #number ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 327 0 82 0 346 0 241 0 ) 					#name: #tempoSlider 					#model: #tempo 					#orientation: #vertical 					#start: 0.125 					#stop: 2 ) ) ) )!windowSpec1	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec1"	<resource: #canvas>	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #positionAutoSave true #sizeType #specifiedSize #openType #advanced #positionType #lastSavedPosition ) 			#label: 'Cluster/Ostinato Editor' 			#min: #(#{Core.Point} 572 190 ) 			#max: #(#{Core.Point} 572 190 ) 			#bounds: #(#{Graphics.Rectangle} 870 594 1442 774 ) 			#colors: 			#(#{UI.LookPreferences} 				#setForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setBackgroundColor: #(#{Graphics.ColorValue} 6130 6974 7421 ) 				#setSelectionForegroundColor: #(#{Graphics.ColorValue} #black ) 				#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 6144 6144 5632 ) 				#setBorderColor: #(#{Graphics.ColorValue} #lightGray ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 29 0 49 0 125 0 70 0 ) 					#name: #voiceMenu 					#model: #defaultVoiceClass 					#label: 'MIDI' 					#menu: #voiceMenu ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 20 0 33 0 ) 					#name: #Label1 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} 0 4096 8191 ) ) 					#label: 'Voice' 					#style: #systemDefault ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 28 0 100 0 124 0 121 0 ) 					#name: #ActionButton1 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 6655 8191 5119 ) ) 					#model: #testMIDI 					#label: 'Test MIDI I/O' 					#style: #systemDefault 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 28 0 74 0 124 0 95 0 ) 					#name: #configMIDI 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 8191 6655 5119 ) ) 					#model: #configureMIDI 					#label: 'Configure MIDI' 					#style: #systemDefault 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 28 0 126 0 124 0 147 0 ) 					#name: #testOSC 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 7044 7044 7044 ) ) 					#model: #testOSCout 					#label: 'Test OSC' 					#style: #systemDefault 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 28 0 151 0 124 0 172 0 ) 					#name: #ActionButton3 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 5119 8191 8191 ) ) 					#model: #stopMIDI 					#label: 'Stop MIDI' 					#style: #systemDefault 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 194 0 53 0 236 0 73 0 ) 					#name: #minPitchField 					#model: #minPitch 					#style: #systemDefault 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 271 0 53 0 313 0 73 0 ) 					#name: #maxPitchField 					#model: #maxPitch 					#style: #systemDefault 					#type: #number ) 				#(#{UI.MenuButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 					#layout: #(#{Graphics.LayoutFrame} 165 0 100 0 312 0 121 0 ) 					#name: #scaleMenu 					#model: #scale 					#label: 'Scale' 					#menu: #scaleMenu ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 11 0 7 0 ) 					#name: #Label7 					#label: 'Output' 					#style: #large ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 352 0 7 0 ) 					#name: #Label2 					#label: 'Thread' 					#style: #large ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 142 0 7 0 ) 					#name: #Label3 					#label: 'Contents' 					#style: #large ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 154 0 33 0 ) 					#name: #Label4 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} 0 4096 8191 ) ) 					#label: 'Pitches' 					#style: #systemDefault ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 163 0 57 0 ) 					#name: #Label5 					#label: 'Min' 					#style: #systemDefault ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 243 0 57 0 ) 					#name: #Label8 					#label: 'Max' 					#style: #systemDefault ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 164 0 76 0 313 0 95 0 ) 					#name: #pitchLidtField 					#model: #pitchList 					#style: #systemDefault 					#type: #string ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 416 0 18 0 516 0 39 0 ) 					#name: #startButton 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 5119 5119 8191 ) ) 					#model: #startStop 					#tabable: false 					#label: 'Start' 					#style: #large ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 380 0 52 0 ) 					#name: #clusterButton1 					#model: #mode 					#label: 'Cluster' 					#select: #cluster ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 380 0 75 0 ) 					#name: #ostButton 					#model: #mode 					#label: 'Ostinato' 					#select: #ostinato ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 155 0 129 0 ) 					#name: #Label6 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} 0 4096 8191 ) ) 					#label: 'Durations' 					#style: #systemDefault ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 164 0 153 0 ) 					#name: #Label9 					#label: 'Min' 					#style: #systemDefault ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 195 0 150 0 237 0 169 0 ) 					#name: #minDurField 					#model: #minDur 					#style: #systemDefault 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 244 0 153 0 ) 					#name: #Label10 					#label: 'Max' 					#style: #systemDefault ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 272 0 150 0 314 0 169 0 ) 					#name: #maxDurField 					#model: #maxDur 					#style: #systemDefault 					#type: #number ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 219 0 18 0 276 0 39 0 ) 					#name: #AddButton 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 5119 6655 8191 ) ) 					#model: #addPitch 					#label: 'Add' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 275 0 18 0 332 0 39 0 ) 					#name: #removeButton 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 5119 8191 5119 ) ) 					#model: #removePitch 					#label: 'Remove' 					#defaultable: true ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 380 0 96 0 ) 					#name: #cloudButton 					#model: #mode 					#label: 'Cloud' 					#select: #cloud ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 455 0 143 0 512 0 164 0 ) 					#name: #loadButton 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 8191 5119 5119 ) ) 					#model: #load 					#label: 'Load' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 399 0 143 0 456 0 164 0 ) 					#name: #saveButton 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 6655 5119 8191 ) ) 					#model: #save 					#label: 'Save' 					#defaultable: true ) ) ) )! !!Siren.ClusterEditor class methodsFor: 'resources'!scaleMenu	"Tools.MenuEditor new openOnClass: self andSelector: #scaleMenu"	<resource: #menu>	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Chromatic' 				#value: #ChromaticScale ) 			#(#{UI.MenuItem} 				#rawLabel: 'Major' 				#value: #MajorScale ) 			#(#{UI.MenuItem} 				#rawLabel: 'Minor' 				#value: #HarmonicMinorScale ) 			#(#{UI.MenuItem} 				#rawLabel: 'Pentatonic' 				#value: #PentatonicScale ) 			#(#{UI.MenuItem} 				#rawLabel: 'Hungarian' 				#value: #HungarianMinor ) 			#(#{UI.MenuItem} 				#rawLabel: 'Blues' 				#value: #PseudoMinorScale ) 			#(#{UI.MenuItem} 				#rawLabel: 'None' 				#value: #none ) ) #(6 ) nil ) decodeAsLiteralArray! !!Siren.ClusterEditor methodsFor: 'initialize-release'!initialize	"Set up the default values."	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	"self open"	minPitch := 72 asValue.	maxPitch := 84 asValue.	minDur := (1/2) asValue.	maxDur := (1/6) asValue.	minAmpl := 20 asValue.	maxAmpl := 34 asValue.	minVoice := 1 asValue.	maxVoice := 1 asValue.	pitchList := '84 85 86 87 88' asValue.	durationList := '1/1 1/1 1/1 1/2' asValue.	amplList := '20 20 24 24' asValue.	voiceList := '1' asValue.	mode := #cluster asValue.	scale := #Pentatonic asValue.	process := nil.	events := nil.	numEvents := 8 asValue.	running := false.	tempo := 1.0 asValue.	tScale := 1.0!initializeClus	"Set up the default values."	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	"self open"	minPitch := 72 asValue.	maxPitch := 84 asValue.	minDur := (1/4) asValue.	maxDur := (1/16) asValue.	minAmpl := 24 asValue.	maxAmpl := 64 asValue.	minVoice := 1 asValue.	maxVoice := 1 asValue.	pitchList := '72 74 77 79 81' asValue.	durationList := '1/4 1/6 1/6 1/3 1/3' asValue.	amplList := '34 44 54' asValue.	voiceList := '1' asValue.	mode := #cluster asValue.	scale := #Pentatonic asValue.	process := nil.	events := nil.	numEvents := 5 asValue.	running := false!initializePent	"Set up the default values."	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	"self open"	minPitch := 72 asValue.	maxPitch := 84 asValue.	minDur := (1/4) asValue.	maxDur := (1/16) asValue.	minAmpl := 24 asValue.	maxAmpl := 64 asValue.	minVoice := 1 asValue.	maxVoice := 1 asValue.	pitchList := '72 74 77 79 81' asValue.	durationList := '1/4 1/6 1/6 1/3 1/3' asValue.	amplList := '34 44 54' asValue.	voiceList := '1' asValue.	mode := #cluster asValue.	scale := #Pentatonic asValue.	process := nil.	events := nil.	numEvents := 5 asValue.	running := false! !!Siren.ClusterEditor methodsFor: 'interface opening'!postOpenWith: aBuilder 	"This message is sent by the builder after it has opened a completed window."	self scale onChangeSend: #newScale to: self.	self defaultVoiceClass onChangeSend: #chVoiceClass to: self.	self tempo onChangeSend: #newTempo to: self.! !!Siren.ClusterEditor methodsFor: 'aspects'!amplList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^amplList!defaultVoiceClass	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	defaultVoiceClass ifNil: [defaultVoiceClass := SirenSession someInstance defaultVoiceClass value asValue].	^defaultVoiceClass!durationList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^durationList!maxAmpl	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^maxAmpl!maxDur	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^maxDur!maxPitch	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^maxPitch!maxVoice	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^maxVoice!minAmpl	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^minAmpl!minDur	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^minDur!minPitch	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^minPitch!minVoice	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^minVoice!mode	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^mode!numEvents	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numEvents!pitchList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^pitchList!scale	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^scale!scaleMenu	"Tools.MenuEditor new openOnClass: self andSelector: #scaleMenu"	^self class scaleMenu!tempo	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^tempo!voiceList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^voiceList!voiceMenu	^SirenSession someInstance voiceMenu! !!Siren.ClusterEditor methodsFor: 'actions'!addEvent	"Add an event to the list"	| pits durs amps voxs |	pits := self stringToList: pitchList value.	durs := self stringToList: durationList value.	amps := self stringToList: amplList value.	voxs := self stringToList: voiceList value.	mode value == #cluster ifTrue:		[ | evt |		evt := MusicEvent dur: (durs atRandom)						pitch: (pits atRandom) 						ampl: (amps atRandom) 						voice: (voxs atRandom).		events add: evt at: 0.		events computeDuration.		numEvents value: events size]!addPitch	"This stub method was generated by UIDefiner"	^self halt!chVoiceClass	"Respond to a selection in the voice class menu"	Voice setDefault: self defaultVoiceClass value.	Transcript show: 'Default IO voice class set to ', self defaultVoiceClass value; cr.	defaultVoiceClass setValue: SirenSession someInstance defaultVoiceClass.	self halt."	(self builder componentAt: #voiceMenu) widget"!configureMIDI	"This stub method was generated by UIDefiner"	SirenSession someInstance configureMIDI!generateEvents	"Create the event list, a cluster, ostinato or cloud"	| pits durs amps voxs |	pits := self stringToList: pitchList value.	durs := self stringToList: durationList value.	amps := self stringToList: amplList value.	voxs := self stringToList: voiceList value.	mode value == #cluster ifTrue:		[events :=  EventList new.		0 to: numEvents value - 1 do:			[ :ind | | evt |			evt := MusicEvent dur: (durs at: (ind \\ durs size + 1))						pitch: (pits at: (ind \\ pits size + 1)) 						ampl: (amps at: (ind \\ amps size + 1)) 						voice: (voxs at: (ind \\ voxs size + 1)).			events add: evt at: 0].		events scaleStartTimesBy: tScale.		^self].	mode value == #ostinato ifTrue:		[ | t1 |		events :=  EventList new.		t1 := 0.0.		0 to: numEvents value - 1 do:			[ :ind | | evt |			evt := MusicEvent dur: (durs at: (ind \\ durs size + 1))						pitch: (pits at: (ind \\ pits size + 1)) 						ampl: (amps at: (ind \\ amps size + 1)) 						voice: (voxs at: (ind \\ voxs size + 1)).			events add: evt at: t1.			t1 := t1 + evt duration asSec value].		events scaleStartTimesBy: tScale.		^self].	mode value == #cloud ifTrue:		[ | cl |		cl := Cloud fromDictionary: ((#duration -> 10000), 			(#pitch -> (minPitch value to: maxPitch value)),			(#loudness -> (minAmpl value to: maxAmpl value)), 			(#voice -> (minVoice value to: maxVoice value))).		cl density: 2.		events := cl eventList.		events scaleStartTimesBy: tScale]!load	"This stub method was generated by UIDefiner"	^self halt!newScale	"Accept a new scale/mode selection"	| mnu |	Transcript show: 'Select ', scale value; cr.	mnu := (self builder componentAt: #scale) component component.	mnu setLabel: scale value.	mnu model changed.	scale changed!newTempo	"Accept a new tempo selection""	| te |	te := self tempo value.	Transcript show: 'Te: ', te printString, ' - ', tScale printString, ' - ', (te / tScale) printString; cr.	events ifNotNil:		[events scaleStartTimesBy: te / tScale]."	tScale := self tempo value!newVoice	"Accept a new output voice selection"	self halt.!removeEvent	"Remove an event from a playing cluster"	| evs ev |	numEvents value == 1 ifTrue: [^self].	evs := events events.	ev := evs atRandom.	events remove: ev.	events computeDuration.	numEvents value: events size!removePitch	"This stub method was generated by UIDefiner"	^self halt!save	"This stub method was generated by UIDefiner"	^self halt!startStop	"start/stop the event-generating process."	| t0 v0  |	running ifTrue:		[running := false.		Transcript show: 'Stop'; cr.		process terminate.		(self builder componentAt: #startButton) component component setLabelString: 'Start'.		events := nil.		^self].	Transcript show: 'Start'; cr.	(self builder componentAt: #startButton) component component setLabelString: 'Stop'.	self generateEvents.	running := true.	t0 := Time microsecondClock usec.	v0 := MIDIVoice default."Special thread for clusters"	mode value == #cluster ifTrue:		[ | durs |		durs := self stringToList: durationList value.		process := [[running] whileTrue: 			[ | t1 ev te |			te := self tempo value.			ev := events atRandom copy.			ev scaleDuration: 2.0 / te.			ev playOn: v0 at: t0.			t1 := durs atRandom sec asUsec value * te.			t0 := t0 + t1.			(Delay forMicroseconds: t1) wait]] fork.		Processor yield.  			"give proc a chance to run"		^self].	mode value == #cloud ifTrue:		[events scaleStartTimesBy: self tempo value.		events scaleDurationsBy: (2.0 / self tempo value).		events playOn: v0 at: t0.		(self builder componentAt: #startButton) component component setLabelString: 'Start'.		^self].	process := [[running] whileTrue: 		[ | t1 |		events copy playOn: v0 at: t0.		t1 := events duration asUsec value.		t0 := t0 + t1.		(Delay forMicroseconds: t1) wait]] fork "At: 5".	Processor yield!stop	"start/stop the event-generating process."	running := false.	Transcript show: 'Stop'; cr.	process terminate.	(self builder componentAt: #startButton) component component setLabelString: 'Start'.	events := nil.!stopMIDI	"Stop all playback"	ClusterEditor allInstances do: [ :in | in stop].	SirenSession someInstance stopMIDI!stringToList: string	"Parse the given string to a list of numbers"	| wfs lis |	wfs := string wordFragments.	lis := OrderedCollection new.	wfs do: [ :aWF | | str |		str := aWF asString.		(str includes: $/) 			ifTrue: [lis addLast: ((str copyUpTo: $/) asNumber / (str copyAfter: $/) asNumber)]			ifFalse: [lis addLast: aWF asString asNumber]].	^lis!testMIDI	"This stub method was generated by UIDefiner"	SirenSession someInstance testMIDI!testOSCout	"This stub method was generated by UIDefiner"	SirenSession someInstance testOSCout! !!UI.BorderDecorationPolicy methodsFor: 'private - regions'!dataRegionFor: aDecorator	"Answer a layout frame for aDecorator's data area"	| vdelta hdelta b |	b := aDecorator hasBorder.	hdelta := (b and: [aDecorator hasHorizontalScrollbar]) ifTrue: [1] ifFalse: [0].	vdelta := (b and: [aDecorator hasVerticalScrollbar]) ifTrue: [1] ifFalse: [0].	"^LayoutFrame new		leftOffset: (self leftOffsetFor: aDecorator);		rightFraction: 1 offset: (self rightOffsetFor: aDecorator) + vdelta;		bottomFraction: 1 offset: (self bottomOffsetFor: aDecorator) + hdelta;		topOffset: (self topOffsetFor: aDecorator)"				^LayoutFrame new			leftOffset: (self leftOffsetFor: aDecorator);			rightFraction: 1 offset: vdelta;			bottomFraction: 1 offset: (self bottomOffsetFor: aDecorator) + hdelta;			topOffset: (self topOffsetFor: aDecorator)!leftOffsetFor: aDecorator	"Compute the distance from the left of the container to the left of the 	data area"	^aDecorator hasVerticalScrollbar ifTrue: [(UI.Skins.SkinRegistry current scrollbarArtistForView: nil) width] ifFalse: [0]!verticalScrollRegionFor: aDecorator	"Answer a layout frame for aDecorator's vertical scrollbar."	"Compensate for the overlapping borders of the scroll bar and the data region."	| layout |"	layout := LayoutFrame new		topFraction: 0 offset: (self topOffsetFor: aDecorator);		bottomFraction: 1 offset: (self bottomOffsetFor: aDecorator);		leftFraction: 1 offset: (self rightOffsetFor: aDecorator);		rightFraction: 1 offset: 0."	layout := LayoutFrame new		topFraction: 0 offset: (self topOffsetFor: aDecorator);		bottomFraction: 1 offset: (self bottomOffsetFor: aDecorator);		leftFraction: 0 offset: 0;		rightFraction: 0 offset: (self rightOffsetFor: aDecorator) negated.	aDecorator hasHorizontalScrollbar		ifTrue: [ layout bottomOffset: layout bottomOffset + 1 ].	^layout! !!Core.LimitedPrecisionReal methodsFor: 'truncation and round off'!mod: aNum	"Answer the floating-point modulus of the receiver."	"0.75 mod: 0.2"	| val |	val :=  self.	[val > aNum]		whileTrue: [val := val - aNum].	^val.! !!Core.LimitedPrecisionReal methodsFor: 'converting'!toOSCBytes: aConvertor 	"Store a float in the proper byte-endian order"	| flt |	flt := self asFloat.	UninterpretedBytes isBigEndian		ifTrue: [aConvertor nextPut: (flt basicAt: 1).			aConvertor nextPut: (flt basicAt: 2).			aConvertor nextPut: (flt basicAt: 3).			aConvertor nextPut: (flt basicAt: 4)]		ifFalse: [aConvertor nextPut: (flt basicAt: 4).			aConvertor nextPut: (flt basicAt: 3).			aConvertor nextPut: (flt basicAt: 2).			aConvertor nextPut: (flt basicAt: 1)]!toOSCTypeOn: aConvertor 	aConvertor nextPutType: $f! !!Core.LimitedPrecisionReal methodsFor: 'printing'!printString: digits	"Answer a String whose characters are a description of the receiver."	| aStream |	aStream := WriteStream on: (String new: 16).	self printOn: aStream digits: digits.	^aStream contents! !!Siren.DurationEvent methodsFor: 'accessing'!scaleDuration: newValue	"Scale the receiver's duration."	duration := duration * newValue!scaleDurationBy: newValue	"Scale the receiver's duration."	duration := duration * newValue! !Siren.EventList class reorganizeFromString: '(''class initialization'' #flush #initialize #storeAll)(''instance creation'' #basicNew: #fromFile: #named:fromPitches: #named:fromSelectors:values: #named:fromStartTimes: #new #new: #newAnonymous)(''examples'' #creationExamples #randomExample #randomExample: #randomExample:from: #randomSWSSExample #randomSWSSExample2 #scaleExample2 #scaleFrom:to:in: #sentenceExample #serialExample:from: #wordExample)(''named constants'' #named: #named:ifAbsent: #namedLists #newNamed #newNamed: #nextName)'!!Siren.EventList methodsFor: 'accessing'!computeDuration	"Compute and answer the receiver's duration."	| du |	du := events first key + events first value duration.	events do:		[ :assoc | | eDu |			eDu := assoc key + assoc value duration.			du := du max: eDu].	self duration: du.	^self duration! !!Siren.EventList methodsFor: 'event accessing'!atRandom	"Answer a random event value"	^events atRandom value! !!Siren.EventList methodsFor: 'processing'!scaleDurationsBy: theValue	"Multiply the start times all events by theValue."	self events do: [ :assoc | assoc key: (assoc key * theValue) ].	self recomputeDuration! !!Siren.EventList methodsFor: 'event accessing'!remove: anEv	"Remove the given event or association from the receiver."	| which |	anEv isAssociation ifTrue: [^events remove: anEv].	which := events detect: [ :ev | ev event == anEv] ifNone: [nil].	which ifNotNil: [events remove: which].	self changed: #events! !!Siren.EventList methodsFor: 'processing'!scaleStartTimesBy: theValue	"Multiply the start times all events by theValue."	self events do: [ :assoc | assoc event scaleDurationBy: theValue]! !!Siren.EventList methodsFor: 'testing'!hasItems	"Answer whether or not the receiver has items or components (true)."	^true! !Siren.EventList reorganizeFromString: '(''initialize-release'' #empty #initializeAnonymous #initializeNamed: #release)(''accessing'' #addModifier: #code #code: #computeDuration #deepCopy #defaultEventClass #duration #name #name: #next #removeModifier: #shallowCopy #size #tempo: #voices)(''event accessing'' #, #add: #add:at: #addAll: #addAll:at: #addAllAtEnd: #atRandom #eventKeys #eventNear: #eventNearTime: #eventNearestTime: #eventValues #events #events: #recomputeDuration #remove:)(''code conversion'' #continueProperties #findNoteOff: #setDurations)(''processing'' #addValue:toProp: #applyBlock:toProp: #applyFunction:to: #applyFunction:to:startingAt: #chooseRange:toProp: #edit #scale:by: #scaleDurationsBy: #scaleStartTimesBy: #scaleValue:toProp: #setValue:toProp: #spreadValue:toProp:)(''collecting'' #collect: #collectAll: #do: #eventsDo: #excerptFrom:to: #expanded #expandedFrom:to: #group: #includes: #keysAndValuesDo: #select: #selectAll: #selectKey: #selectValue: #timesDo:)(''comparing'' #=)(''testing'' #hasItems #isEmpty #isEventList #species)(''scheduling'' #loop #nextTime: #nextTimeFor: #play #playOn: #playOn:at: #scheduleAt: #stop)(''printing'' #asExplorerString #asExplorerString: #printOn: #readDataFrom:size: #storeDataOn: #storeOn: #storeOnFile: #templateFields)(''private'' #map: #map:at:)'!!Siren.Duration class methodsFor: 'class constants'!initialize	"Set up the class inst var, a generality table."	"Duration initialize"	"Duration generalize: (100 msec) and: ((1/4) beat)"	"Duration generalize: (100 msec) and: (0.3 sec)"	"(0 msec) + (3767282984535741 usec)"	generalityTable :=		((SecondDuration -> 40),		(RatioDuration -> 60),		(USecondDuration -> 50),		(MSecondDuration -> 50),		(ConditionalDuration -> 0))! !!Tools.AbstractWorkspace methodsFor: 'actions'!toggleToolbar	| menuItem |	menuItem := self menuBar atNameKey: #toolbar.	menuItem ifNil: [^self].	self builder window toolbarVisible: menuItem isOn not.	menuItem indication: menuItem isOn not! !!Tools.AbstractWorkspace methodsFor: 'private'!buildMenuBar	| menu |	menu := self class menuBar."	(menu atNameKey: #toggleStatusBar) indicationSelector: #statusBarVisible.	(menu atNameKey: #editEncoding) submenu: [self buildEncodingSubmenu]."	^menu! !!Tools.Workbook class methodsFor: 'examples'!example3	"Here is how to open a workbook with pages containing text."	"self example3"	| book |	book := Workbook new.	book loadFromURL: 'http://www.create.ucsb.edu/Siren/Siren7.5_Workbook.bos'.	book open! !!Tools.Workbook class methodsFor: 'examples'!example1	"Here is how to open a workbook with pages containing text."	"self example1"	| book |	book := Workbook new.	book 		replaceAllTextPagesWith: "also get rid of the default 'Page 1'"			(WorkspacePage 				labeled: 'example1' 				with: (self class compiledMethodAt: #example1) getSource);		addAndSelectPage: "now add more pages"			(WorkspacePage				labeled: 'example2'				with: (self class compiledMethodAt: #example2) getSource).	book open!example2	"Here is how to open a workbook with pages containing text from files."	"self example2"	| book |	book := Workbook new.	book replaceAllTextPagesWith:		(WorkspacePage filename: 'visual.cha' asFilename).	book open! !!Tools.Workbook class methodsFor: 'instance creation'!on: aValueModel	"Create a new workbook with a single text page	that has aString as the label and aValueModel as the contents holder."	| book |	book := self new.	book replaceAllTextPagesWith: (WorkspacePage on: aValueModel).	^book!on: aValueModel labeled: aString	"Create a new workbook with a single text page	that has aString as the label and aValueModel as the contents holder."	| book |	book := self new.	book replaceAllTextPagesWith:		(WorkspacePage labeled: aString on: aValueModel).	^book!with: aText	"Create a new workbook with a single text page	that has aString as the label and aText as the contents."	| book |	book := self new.	book replaceAllTextPagesWith: (WorkspacePage with: aText).	^book!with: aText labeled: aString	"Create a new workbook with a single text page	that has aString as the label and aText as the contents."	| book |	book := self new.	book replaceAllTextPagesWith: 		(WorkspacePage labeled: aString with: aText).	^book!withFile: aFilenameOrString ifAbsent: aBlock	"Create a new workbook with text from the specified file.	If the file does not exist, create a workbook anyway with a	page associated with that non-existent file, and with the result	of evaluating aBlock (expected to be a String or a Text) as	the initial contents."	| book page |	book := self new.	page := [WorkspacePage filename: aFilenameOrString]		on: OsError		do: [:ex | ex return:			(WorkspacePage 				filename: aFilenameOrString 				contents: aBlock value)].	book replaceAllTextPagesWith: page.	^book! !!Tools.Workbook class methodsFor: 'system workbooks'!openIntroductionWorkbook	"Open a workbook with various getting started and introductions pages."	"self openIntroductionWorkbook"	| book |	book := self new.	book		replaceAllTextPagesWith: WorkspacePage gettingStarted;		addPage: WorkspacePage overview;		addPage: WorkspacePage features;		addPage: WorkspacePage introduction;		open.	book builder window label: 'Welcome to VisualWorks'!openSystemWorkbook	^self systemWorkbook open!systemWorkbook	^Workbook new		replaceAllTextPagesWith: WorkspacePage installationWorkspacePage;		addPage: WorkspacePage systemWorkspacePage;		yourself! !!Tools.Workbook class methodsFor: 'interface specs'!windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	<resource: #canvas>	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #Workspace 				#defaultString: 'Workspace' 				#catalogID: #labels ) 			#min: #(#{Core.Point} 250 100 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 474 368 1024 768 ) 			#flags: 4 			#menu: #menuBarHolder 			#toolBar: #toolBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TabControlSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -25 1 ) 					#name: #pages 					#model: #pageHolder 					#tabable: true 					#labels: #() ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -24 1 -41 1 0 1 )					#name: #pageExplanation 					#model: #pageExplanationHolder 					#tabable: false 					#helpText: #(#{Kernel.UserMessage} #key: #ExplainCurrentPage #defaultString: 'Explanation of the current page' #catalogID: #labels) 					#isReadOnly: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} -40 1 -24 1 0 1 0 1 ) 					#name: #importSummary 					#model: #importSummaryHolder 					#tabable: false 					#helpText: #(#{Kernel.UserMessage} #key: #NamespacesImportedHere #defaultString: 'Namespaces imported by this workspace' #catalogID: #labels) 					#isReadOnly: true ) ) ) )! !!Tools.Workbook class methodsFor: 'resources'!editMenu	"Tools.MenuEditor new openOnClass: self andSelector: #editMenu"	<resource: #menu>	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#commandID: #find 				#nameKey: #editFind 				#value: #find ) 			#(#{UI.MenuItem} 				#commandID: #replace 				#nameKey: #editReplace 				#value: #replace ) 			#(#{UI.MenuItem} 				#commandID: #findNext 				#value: #findNext 				#enablementSelector: #isFindOpen ) 			#(#{UI.MenuItem} 				#commandID: #findPrevious 				#value: #findPrevious 				#enablementSelector: #isFindOpen ) 			#(#{UI.MenuItem} 				#commandID: #undo 				#value: #undo 				#enablementSelector: #canUndo ) 			#(#{UI.MenuItem} 				#commandID: #redo 				#value: #redo 				#enablementSelector: #canRedo ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Encoding 					#defaultString: '&Encoding' 					#catalogID: #menus ) 				#nameKey: #editEncoding ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_FileItIn 					#defaultString: '&File it In' 					#catalogID: #menus ) 				#value: #smalltalkFileItIn ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_NamespacesDot 					#defaultString: '&Namespaces...' 					#catalogID: #menus ) 				#value: #editImports ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Boss_InDot 					#defaultString: 'Boss &In...' 					#catalogID: #menus ) 				#value: #bossIn 				#enablementSelector: #canBOSSObjects ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Boss_OutDot 					#defaultString: 'Boss &Out...' 					#catalogID: #menus ) 				#value: #bossOut 				#enablementSelector: #canBOSSObjects ) ) #(4 2 3 2 ) nil ) decodeAsLiteralArray!menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	<resource: #menu>	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Page 					#defaultString: '&Page' 					#catalogID: #menus ) 				#nameKey: #pageMenu 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#commandID: #new 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_New 								#defaultString: '&New' 								#catalogID: #menus ) 							#nameKey: #fileNew 							#value: #fileNew 							#labelImage: #(#{UI.ResourceRetriever} #{WorkspaceIcons} #workspaceNew ) ) 						#(#{UI.MenuItem} 							#commandID: #open 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_OpenDot 								#defaultString: '&Open...' 								#catalogID: #menus ) 							#nameKey: #fileOpen 							#value: #fileOpen 							#labelImage: #(#{UI.ResourceRetriever} #{WorkspaceIcons} #workspaceOpen ) ) 						#(#{UI.MenuItem} 							#commandID: #save 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Save 								#defaultString: '&Save' 								#catalogID: #menus ) 							#nameKey: #fileSave 							#value: #fileSave 							#enablementSelector: #isAtTextPage 							#labelImage: #(#{UI.ResourceRetriever} #{WorkspaceIcons} #workspaceSave ) ) 						#(#{UI.MenuItem} 							#commandID: #saveAs 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Save_AsDot 								#defaultString: 'Save &As...' 								#catalogID: #menus ) 							#nameKey: #fileSaveAs 							#value: #fileSaveAs 							#enablementSelector: #isAtTextPage ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_RenameDot 								#defaultString: '&Rename...' 								#catalogID: #menus ) 							#nameKey: #pageRename 							#value: #pageRename 							#enablementSelector: #canRenamePage ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_TearOff 								#defaultString: '&Tear Off' 								#catalogID: #menus ) 							#nameKey: #pageTearOff 							#value: #pageTearOff 							#enablementSelector: #isAtTextPage ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Re_move 								#defaultString: 'Re&move' 								#catalogID: #menus ) 							#nameKey: #pageClose 							#value: #pageClose 							#enablementSelector: #canClosePage ) ) #(1 3 3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Edit 					#defaultString: '&Edit' 					#catalogID: #menus ) 				#nameKey: #editMenu ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Options 					#defaultString: '&Options' 					#catalogID: #menus ) 				#nameKey: #optionsMenu 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Toolbar 								#defaultString: '&Toolbar' 								#catalogID: #menus ) 							#nameKey: #toolbar 							#value: #toggleToolbar 							#indication: true ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_StatusBar 								#defaultString: '&Status Bar' 								#catalogID: #menus ) 							#nameKey: #toggleStatusBar 							#value: #toggleStatusBar ) 						#(#{UI.MenuItem} 							#rawLabel: 'Style as Smalltalk' 							#value: #styleAsSmalltalk 							#indication: false 							#indicationSelector: #isStyledAsSmalltalk ) ) #(2 1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray!toolBar	"Tools.MenuEditor new openOnClass: self andSelector: #toolBar"	<resource: #menu>	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #New 					#defaultString: 'New' 					#catalogID: #menus ) 				#value: #fileNew 				#labelImage: #(#{UI.ResourceRetriever} #{WorkspaceIcons} #workspaceNew ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #New 					#defaultString: 'New' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Open 					#defaultString: 'Open' 					#catalogID: #menus ) 				#value: #fileOpen 				#labelImage: #(#{UI.ResourceRetriever} #{WorkspaceIcons} #workspaceOpen ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #Open 					#defaultString: 'Open' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Save 					#defaultString: 'Save' 					#catalogID: #menus ) 				#nameKey: #fileSave 				#value: #fileSave 				#labelImage: #(#{UI.ResourceRetriever} #{WorkspaceIcons} #workspaceSave ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #Save 					#defaultString: 'Save' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Cut 					#defaultString: 'Cut' 					#catalogID: #menus ) 				#nameKey: #cut 				#value: #cut 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #editCut ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #Cut 					#defaultString: 'Cut' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Copy 					#defaultString: 'Copy' 					#catalogID: #menus ) 				#nameKey: #copy 				#value: #copySelection 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #editCopy ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #Copy 					#defaultString: 'Copy' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Paste 					#defaultString: 'Paste' 					#catalogID: #menus ) 				#nameKey: #paste 				#value: #paste 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #editPaste ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #Paste 					#defaultString: 'Paste' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #DoIt 					#defaultString: 'Do it' 					#catalogID: #menus ) 				#value: #smalltalkDoIt 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #doIt ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #DoIt 					#defaultString: 'Do it' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #PrintIt 					#defaultString: 'Print it' 					#catalogID: #menus ) 				#value: #smalltalkPrintIt 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #printIt ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #PrintIt 					#defaultString: 'Print it' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #InspectIt 					#defaultString: 'Inspect it' 					#catalogID: #menus ) 				#value: #smalltalkInspectIt 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #inspectIt ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #InspectIt 					#defaultString: 'Inspect it' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #DebugIt 					#defaultString: 'Debug it' 					#catalogID: #menus ) 				#value: #smalltalkDebugIt 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #debugIt ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #DebugIt 					#defaultString: 'Debug it' 					#catalogID: #menus ) ) ) #(3 3 4 ) nil ) decodeAsLiteralArray! !Tools.Workbook comment:'This is the new-style (as of 5i.4) workspace.  It consists of a number of text pages selected using a tab control, as well as a separate page for workspace local variables.Instance Variables:	pageHolder	<SelectionInList>	Pages currently contained by this workspace. Pages are instances of either WorkspacePage (text pages) or WorkspaceInspectorPage (variable page). A workbook contains one or more text pages followed by one variable page.	lastInstalledPage	<WorkspacePage | WorkspaceInspectorPage>	The current page of the workspace. Preserved so the action triggered on a page change can refer to the previous page.'!!Tools.Workbook methodsFor: 'actions'!bossOutAll	"Boss out the page list"	| nameString boss stream coll |	nameString := Dialog 		requestFileNameWithMessage: (#BOSSOutToC << #dialogs >> 'BOSS Out To:') 		default: 'Workbook.bos'		version: #new		ifFail: ['']		for: nil.	nameString isEmpty ifTrue: [^self].	stream := nameString asFilename writeStream.	coll := self pages collection.	coll := coll copyFrom: 1 to: coll size - 1.	[boss := #{BinaryObjectStorage} value onNew: stream.		boss nextPut: coll] 			ensure: [stream close]!htmlOutAll	"Create a directory and save all the receiver's pages there as HTML files."	| nam folder toc list |	nam := Dialog 		requestNewFileName: 'Save the workbook to directory' 		default: 'Workbook'.	nam isEmpty ifTrue: [^self].	folder := Filename named: nam.	folder exists		ifTrue: [folder isDirectory			ifFalse: [Dialog warn: 'File exists and is not a directory.'.				^self]]		ifFalse: [folder makeDirectory].	toc := (folder asString, Filename separator asString, 'index.html') asFilename writeStream.	list := (folder asString, Filename separator asString, 'contents.txt') asFilename writeStream.	list nextPutAll: 'cat index.html '.	self writeHTMLHeaderTo: toc.	1 to: self pages size - 1 do:		[ :index | | pa ti fn text |		pa := self pages at: index."		Transcript show: 'Save: ', pa label; cr."		ti := pa label copyReplaceAll: ' ' with: '_'.		fn := folder asString, Filename separator asString, ti, '.html'.		text := pa getText.		Smalltalk.Heeg.HtmlWriter write: text into: fn.		toc nextPutAll: ('<LI><A HREF="./', ti, '.html">', pa label, '</a>'); cr.		list nextPutAll: ti, '.html '].	self writeHTMLTrailerTo: toc.	toc close.	list nextPutAll: '>> Workbook.html'; cr.	list close!loadAll	"Open a directory and read a set of pages from."	| nam fil toc |	nam := Dialog 		requestFileName: 'Load a workbook from a file or directory' 		default: 'Workbook.bos'.	nam isEmpty ifTrue: [^self].	fil := Filename named: nam.	fil exists		ifFalse: [Dialog warn: 'File/fil does not exist.'. ^self]."if it's a file -- try BOSS"	fil isDirectory		ifFalse: [^self loadFromBoss: fil]."Otherwise, assume it's a workbok folder"	toc := (fil asString, Filename separator asString, 'TableOfContents.txt') asFilename readStream.	[toc atEnd] whileFalse:		[ | lin fnam pg |		lin := toc upTo: Character cr.		('*.ws' match: lin)			ifTrue: [fnam := lin copyFrom: 1 to: lin size - 3]			ifFalse: [fnam := lin].		fnam := fnam copyReplaceAll: '_' with: ' '.		pg := WorkspacePage labeled:  fnam.		self addAndSelectPage: pg.		pg contents: (fil asString, Filename separator asString, lin) asFilename contentsOfEntireFile].	toc close.!loadFromBoss: nameString	"Load the outline from a BOSS file"	| boss stream list vars |	stream := nameString asFilename readStream.	list := self pageHolder list.	list removeFirst.			"remove the default page 1"	vars := list removeFirst.	"hold onto the variables page"	[ | arr |		boss := #{BinaryObjectStorage} value onOldNoScan: stream.		arr := boss next.		arr do: [ :item | | pg |		pg := WorkspacePage labeled:  item first.		self addAndSelectPage: pg.		pg contents: item last]]			ensure: [stream close].	list addLast: vars.	self selectPageNumber: 1!loadFromURL: nameString	"Load the outline from a BOSS file taken from the given URL"	"(ListWorkBook new 			loadFromURL: 'http://www.create.ucsb.edu/Siren/Siren7.5_Workbook.bos') open "	| nam stream ostrm |	nam := 'wb_tmp.bos'.	stream := (Net.HttpClient get: nameString) contents readStream binary.	stream reset.	ostrm := nam asFilename writeStream binary.	[stream atEnd] whileFalse: [ostrm nextPut: stream next asInteger].	ostrm close.	self loadFromBoss: nam.	nam asFilename delete.	self selectPageNumber: 1!saveAll	"Create a directory and save all the receiver's pages there."	| sel nam folder toc |	sel := (Menu labelArray: #('save as BOSS file' 'save as HTML pages' 'save as text files')) startUp.	(sel = 0) ifTrue: [^self].	(sel = 1) ifTrue: [^self bossOutAll].	(sel = 2) ifTrue: [^self htmlOutAll].	nam := Dialog 		requestNewFileName: 'Save the workbook to directory' 		default: 'Workbook'.	nam isEmpty ifTrue: [^self].	folder := Filename named: nam.	folder exists		ifTrue: [folder isDirectory			ifFalse: [Dialog warn: 'File exists and is not a directory.'.				^self]]		ifFalse: [folder makeDirectory].	toc := (folder asString, Filename separator asString, 'TableOfContents.txt') 			asFilename writeStream.	self pages do:		[ :pa | | fn |"		Transcript show: 'Save: ', pa label; cr."		(pa respondsTo: #setFilename:)			ifTrue: [ fn := pa label copyReplaceAll: ' ' with: '_'.				pa setFilename: (folder asString, Filename separator asString, 							fn, '.ws') asFilename.			self selectPage: pa.			pa acceptText.			toc nextPutAll: (fn, '.ws'); cr]].	toc close.! !!Tools.Workbook methodsFor: 'private'!writeHTMLHeaderTo: strm	strm nextPutAll: '<HTML><HEAD><TITLE>The Siren Workbook</TITLE></HEAD><BODY BGCOLOR="#ffffcc"><H2>The Siren Workbook</H2><H3>Outline</H3><UL>'!writeHTMLTrailerTo: strm	strm nextPutAll: '</UL><P><A HREF="http://FASTLabInc.com/Siren">Go to the Siren Home Page</A><P><HR><P></BODY></HTML>'! !!Tools.Workbook methodsFor: 'accessing'!selectPage: pa	self pageHolder selection: pa! !!Tools.Workbook methodsFor: 'actions'!fileNew	self addAndSelectPage: (WorkspacePage labeled: self pickUniquePageLabel)!fileOpen	| nameString |	nameString := Dialog requestFileName: (#OpenFileNamedColon << #dialogs >> 'Open file named: ') default: '*.ws'.	nameString isEmpty ifTrue: [^self].	self addAndSelectPage: (WorkspacePage filename: nameString asFilename)!pageClose	self canClosePage ifFalse: [self error: (#errCannotCloseThisPage << #dialogs >> 'cannot close this page')].	self currentTextPage changeRequest ifFalse: [^self].	self removePage: self currentTextPage!pageRename	| newLabel current |	self canRenamePage ifFalse: [self error: (#errCannotRenameThisPage << #dialogs >> 'cannot rename this page')].	current := self currentPage.	newLabel := Dialog 		request: (#RenameThisPageAsColon << #dialogs >> 'Rename this page as:') 		initialAnswer: current label.	newLabel isEmpty ifTrue: [^self].	current label: newLabel.	self pages changed: #at: with: self pageHolder selectionIndex!pageTearOff	"Remove the current text page from the workbook and open it	as a separate workspace (not a workbook). If this was the last text	page, close the current workbook. The new window should have	reasonable size and position--that is same size as the original workbook	and either same or cascaded position, depending on whether the	workbook stays or goes. With the MPUI introduction, if the original window	is closed, it should be done *after* opening the new one."	| thisPage workspace bounds wasLastPage |	bounds := self builder window displayBox.	thisPage := self currentTextPage.	thisPage deactivate.	workspace := Workspace new textPage: thisPage.	locals keysAndValuesDo:		[:key :value | workspace addLocal: key value: value].	wasLastPage := self textPageCount <= 1.	wasLastPage ifFalse:		[self removePage: thisPage.		bounds := Screen default makeRectangleVisible:			(bounds copy moveBy: 20@20)].	workspace 		allButOpenInterface: #windowSpec;		finallyOpenIn: bounds withType: #normal.	wasLastPage ifTrue:		[self builder window controller closeAndUnschedule]! !!Tools.Workbook methodsFor: 'private-pages'!currentPage	^lastInstalledPage!currentTextPage	self isAtTextPage ifFalse: [self error: (#errNotAtTextPage << #dialogs >> 'not at text page')].	^self currentPage!installPage: aWorkspacePage	lastInstalledPage := aWorkspacePage.	aWorkspacePage builder: nil.	self tabControl		client: aWorkspacePage		spec: #windowSpec		builder: builder newSubBuilder.	self updatePage.	aWorkspacePage refresh!isAtTextPage	"Text pages are all pages except the last."	^self pageHolder selectionIndex < self pageHolder list size!textPageCount	"One of the pages is the Variables page; all others are text."	^self pages size - 1! !!Tools.Workbook methodsFor: 'private'!buildMenuBar	| menu |	menu := super buildMenuBar.	(menu atNameKey: #editMenu) submenu: [self editMenu].	^menu!editMenu	| menu contextMenu |	menu := self class editMenu.	(menu atNameKey: #editEncoding) submenu: [self buildEncodingSubmenu].	self isAtTextPage ifFalse: [^menu].	self currentPage ifNil: [^menu].	self currentPage documentWidget ifNil: [^menu].	contextMenu := self currentPage documentMenu value copy.	contextMenu augmentFrom: self class to: AbstractWorkspace menuName: #editMenu for: self.	contextMenu menuItems do: 			[:each |			each actionPerformer: [self currentPage documentWidget].			each value: 					[self currentPage documentWidget handleEvent: (CommandEvent menuItem: each)]].	(contextMenu menuItemForCommandID: #selectAll)		ifNotNil: [:menuItem | menuItem visible: [true]].	^menu copy		addPart: contextMenu;		yourself!hibernate	self pageHolder selectionIndex: 0!pickUniquePageLabel	| labels suffix label |	labels := self pages collect: [:each | each displayString].	suffix := 1.	[label := ((#Page1s << #dialogs >> 'Page <1s>')			expandMacrosWith: suffix printString).	labels includes: label] 		whileTrue: [suffix := suffix + 1].	^label!suggestSaving: pageCollection	| messageStream wordsOnThisLine |	messageStream := (String new: 100) writeStream.	wordsOnThisLine := 1.	messageStream nextPutAll: (#SomePagesNeedSaved << #dialogs >> 'The following pages have unsaved changes:') asString; cr.	pageCollection 		do: [:each | 			wordsOnThisLine > 5 ifTrue:				[messageStream cr.				wordsOnThisLine := 0].			wordsOnThisLine := wordsOnThisLine + 1.			messageStream 				nextPut: $"; 				nextPutAll: each displayString;				nextPut: $"]		separatedBy: [messageStream nextPutAll: ', '].	messageStream nextPutAll: '.'; cr; nextPutAll: (#SaveChangesBeforeClosing << #dialogs >> 'Save changes before closing the window?') asString.	^Dialog 		choose: messageStream contents		labels: (Array with: (#Yes << #dialogs >> 'Yes') with: (#No << #dialogs >> 'No') with: (#Cancel << #dialogs >> 'Cancel'))		values: #(yes no cancel)		default: #yes!tabControl	^(builder componentAt: #pages) widget!updatePage: aPage	"Page-related things such as labels may have changed for the current page."	| pages reselect dummy |	reselect := self currentPage == aPage.	pages := self pages.	pages replaceAll: aPage with: (dummy := WorkspacePage new).	pages replaceAll: dummy with: aPage.	reselect ifTrue: [self pageHolder selection: aPage].	self updatePage! !!Tools.Workbook methodsFor: 'initialize-release'!initialize	super initialize.	self pageHolder		list: (List 			with: ((WorkspacePage labeled: (#Page1 << #dialogs >> 'Page 1')) workspace: self)			with: (WorkspaceInspectorPage withInspectorOn: locals))!postBuildWith: aBuilder	| offset |		super postBuildWith: aBuilder.	"- 1 to make the borders collapse"	offset := self statusBarHeight - 1.		(builder componentAt: #pages) component layout bottomOffset: [		statusBarVisible ifTrue: [ offset negated ] ifFalse: [ 0 ].	].	"Because of the way layout works, the status items are fixed height, relative to the bottom offset."	(builder componentAt: #pageExplanation) component layout topOffset: [		statusBarVisible ifTrue: [ offset negated ] ifFalse: [ 0 ].	].	(builder componentAt: #pageExplanation) component layout bottomOffset: [		statusBarVisible ifTrue: [ 0 ] ifFalse: [ offset ].	].	(builder componentAt: #importSummary) component layout topOffset: [		statusBarVisible ifTrue: [ offset negated ] ifFalse: [ 0 ].	].	(builder componentAt: #importSummary) component layout bottomOffset: [		statusBarVisible ifTrue: [ 0 ] ifFalse: [ offset ].	].	self pageHolder selectionIndexHolder onChangeSend: #pageChanged to: self!postOpenWith: aBuilder	super postOpenWith: aBuilder.	self pageHolder selection: self pageHolder list first! !!Tools.Workbook methodsFor: 'aspects'!pageHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^pageHolder isNil		ifTrue:			[pageHolder := SelectionInList new]		ifFalse:			[pageHolder]! !!Tools.Workbook methodsFor: 'accessing'!addAndSelectPage: aWorkspacePage	self addPage: aWorkspacePage.	self pageHolder selection: aWorkspacePage!addPage: aWorkspacePage	"The Variables page always remains the last, so any new page	always ends up being one before the last."	| otherPage |	otherPage := self currentPage.	aWorkspacePage workspace: self.	otherPage isNil		ifTrue: [self pages addLast: aWorkspacePage]		ifFalse: [self pages add: aWorkspacePage after: otherPage]!changeRequest	| unsaved choice |	unsaved := self pages reject: [:some | some isAccepted].	unsaved isEmpty ifTrue: [^true].	choice := self suggestSaving: unsaved.	choice = #no ifTrue: [^true].	choice = #cancel ifTrue: [^false].	"The choice is #yes, i.e. save all"	unsaved do: [:each | each saveIntoFile ifFalse: [^false]].	^true!pageChanged	| selection |	selection := self pageHolder selection.	lastInstalledPage notNil ifTrue:		[lastInstalledPage deactivate.		lastInstalledPage := nil].	selection isNil ifTrue: [^self].	self installPage: selection!pages	^self pageHolder list!removePage: aWorkspacePage	self pages remove: aWorkspacePage!replaceAllTextPagesWith: aPage	| inspectorPage removed |	inspectorPage := self pages last.	aPage workspace: self.	removed := self pages removeAllSuchThat: [:page | page ~~ inspectorPage].	removed do: [:each | each release].	self pages addFirst: aPage!selectPageLabeled: userMessageOrString	self pageHolder selection: 		(self pages 			detect: [:aPage | aPage label asString = userMessageOrString asString]			ifNone: [^self])!selectPageNumber: index	self pageHolder selectionIndex: index! !!Tools.Workbook methodsFor: 'private-testing'!canClosePage	^self isAtTextPage and: [self textPageCount > 1]!canRedo	^self isAtTextPage and: [self currentPage canRedo]!canRenamePage	^self isAtTextPage!canUndo	^self isAtTextPage and: [self currentPage canUndo]!isFindOpen	^self isAtTextPage and: [self currentPage isFindOpen]! !!Tools.Workbook methodsFor: 'privileged'!statusBarHeight	^(builder componentAt: #pageExplanation) intrinsicHeight! !!Graphics.ColorValue class methodsFor: 'instance creation'!random: rand	"Answer a ColorValue with a random HSV intensity (between 0 and 1)."	^self hue: rand next saturation: rand next brightness: rand next! !!Tools.ToolbarIconLibrary class methodsFor: 'resources'!siren20x20	"Tools.UIMaskEditor new openOnClass: self andSelector: #siren20x20"	<resource: #image>	^CachedImage on: (Image extent: 20@20 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 5460 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 8191)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: 'DQDQDQDQDQDQDP@@DQDQDQDQDQDQDP@@DQL3DQDQDPDQDP@@DQLCDQDQD@DQDP@@DQLCDQDQ@ EQDP@@DQLCDQDPH DUDP@@DQLCD@@BH TQTP@@DQLCDD@"H EQTP@@DQLCDD@"H EQTP@@DQLCDD@"H EQTP@@D3LCDD@"H EQTP@@L0@CDD@"H EQTP@@L@@CDD@"H EQTP@@L@@CH@@BH TQTP@@D0@2@"H H DUDP@@D3L2@"HQ@ EQDP@@DQDQH@H!!D@DQDP@@DQDQD"@!!DPDQDP@@DQDRH"@!!DQDQDP@@DQDR@@H!!DQDQDP@@'))!siren20x20mask	"Tools.UIMaskEditor new openOnClass: self andSelector: #siren20x20mask"	<resource: #image>	^CachedImage on: (Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 28 2 0 0 28 6 0 0 28 15 128 0 28 31 192 0 29 255 224 0 29 255 224 0 29 255 224 0 29 255 224 0 125 255 224 0 253 255 224 0 253 255 224 0 255 255 224 0 127 255 224 0 127 207 128 0 3 230 0 0 1 226 0 0 7 224 0 0 7 224 0 0])! !!Siren.DeviceModel methodsFor: 'accessing'!debug	^(SirenUtility verbosity > 1)!debug: aValueself halt."	debug := aValue"! !!Siren.MIDIDevice class methodsFor: 'class initialization'!initialize	"Set up the one class variable"	"MIDIDevice initialize"	MStream := Transcript."	MStream := WriteStream on: (String new: 4096).	MStream := nil"! !!Siren.MIDIDevice methodsFor: 'note events'!play: anEvent at: aTime	"Play the given event on my port as a default MIDI noteOn/noteOff pair."	| now del p d a v strm ch |	now := Time microsecondClock.	del := aTime - now.	del > 0		ifTrue: [Transcript show: 'Wait for ', del printString, ' usec'; cr.			(Delay forMicroseconds: aTime - now) wait].	self checkPort.	strm := stream.	strm ifNil: [strm := SirenUtility defaultMIDIOut].	v := self mapVoice: anEvent voice.	anEvent pitch isNil"Map the event properties"		ifFalse: [p := self mapPitch: anEvent pitch.			d := self mapDuration: anEvent dur.			a := self mapAmplitude: anEvent ampl.			self debug ifTrue: [MStream nextPutAll: 					aTime value printString, ' ', p printString, ' ', 					d printString,' ', a printString,' ', v printString; cr]."Play the note"			port play: strm pitch: p value dur: d amp: a voice: v]"if it's a control change"		ifTrue: [a := anEvent value rounded.					ch := anEvent controller.			ch ifNotNil: [port controlChange: v controller: ch to: a]]! !!Siren.MIDIDevice methodsFor: 'parameter mapping'!mapDuration: aVal	"Map a numerical or symbolic duration value to a duration in usec."	^(aVal species == Duration		ifTrue: [aVal asUsec value]		"if duration type, answer msec"		ifFalse: [aVal class == SmallInteger			ifTrue: [aVal * 1000]		"if Int, assume mec"								"else assume a symbolic or float dur"			ifFalse: [aVal isNil				ifTrue: [nil]				ifFalse: [Duration value: aVal asUsec]]])!mapVoice: aVal	"Map a numerical or symbolic pitch to a MIDI-compatible note number."	^(aVal isInteger		ifTrue: [(aVal truncated min: 15) max: 0]		ifFalse: [aVal species == Voice			ifTrue: [aVal number]			ifFalse: [1]])! !!Core.Association methodsFor: 'testing'!isAssociation	"Return true if the receiver is an association."	^true! !!Core.Association methodsFor: 'copying'!, anAssociation 	"Answer a Dictionary with of the receiver and the argument as its elements."	"(#a -> 1), (#b -> 2)"	| dict |	dict := Dictionary new.	dict add: self.	dict add: anAssociation.	^dict! !!Core.Random methodsFor: 'accessing'!nextFrom: low to: high	"Answer the next random number as a float in the given range."	| value |	value := self next.	^(value * (high - low) + low)!nextIntFrom: low to: high	"Answer the next random number as a float in the given range."	| value |	value := self next.	^(value * (high + 1 - low) + low) truncated! !!Core.Collection methodsFor: 'testing'!hasItems	"Answer whether or not the receiver has items or components (true)."	^true! !!Core.SequenceableCollection methodsFor: 'accessing'!atRandom	"Answer a random element taken from the receiver."	"10 timesRepeat: [Transcript show: (String with: ('abcdefghijk' atRandom)); cr] "	| rand |	rand := Random new.	rand next.	rand next.	^self at: (rand nextIntFrom: 1 to: self size)!atRandom: rand	"Answer a random element taken from the receiver."	"| r | r := Random new.	10 timesRepeat: [Transcript show: (String with: ('abcdefghijk' atRandom: r)); cr] "	^self at: (rand nextIntFrom: 1 to: self size)! !!Core.SequenceableCollection methodsFor: 'copying'!copyAfter: anObject	"Answer a copy of the receiver after the last occurrence of anObject, non-inclusive."	| index |	index := self lastIndexOf: anObject ifAbsent: [^self copy].	^self copyFrom: index + 1 to: self size! !!Core.SequenceableCollection methodsFor: 'processing'!scrambled	"Answer a collection of the elements of the receiver in random order."	" 'abcdefg' scrambled "	| rand old new |	new := self species new: self size.	old := OrderedCollection new: self size.	1 to: self size do: [ :in | old add: in].	rand := Random new.	1 to: self size do: 		[ :index | | pos |		pos := old atRandom: rand.		old remove: pos.		new at: index put: (self at: pos)].	^new! !!Core.SequenceableCollection methodsFor: 'printing'!toOSCBytes: aConvertor 	self do: [:each | each toOSCBytes: aConvertor]!toOSCTypeOn: aConvertor 	aConvertor nextPut: $[.	self do: [:each | each toOSCTypeOn: aConvertor].	aConvertor nextPut: $]! !!Core.String class methodsFor: 'instance creation'!cr	"Answer a string with a carriage return character"	^self with: Character cr! !!Core.String methodsFor: 'printing'!toOSCBytes: aConvertor 	self isEmpty ifTrue: [^self].	aConvertor nextPutAll: self asByteArray.	"Align to 4 byte boundry"	4 - (self size \\ 4) timesRepeat: [aConvertor nextPut: 0]!toOSCTypeOn: aConvertor 	aConvertor nextPutType: $s! !!Core.Symbol methodsFor: 'printing'!toOSCTypeOn: aConvertor 	aConvertor nextPutType: $s! !!Tools.BrowserHelper methodsFor: 'menus accessing'!augmentMenuBarMenu: menu	menu menuItems do: 		[ :item |  | aModule action |		aModule := self  menuHeader."		item actionBlock: [ :cont | cont performer truePerformerFor: aModule ]."		item submenu == nil			ifFalse: [ self augmentMenuBarMenu: item submenu ].		action := item value.		action isSymbol			ifTrue: 				[ item value:	[:cont | cont performer browser module: aModule action: action ] ]		]! !!Tools.SelectorBrowserHelper methodsFor: 'list accessing'!updateListFull	| protocolList target newList |	protocolList := self protocols.	target := self targetClassOrNameSpace.	(target isNil or: [protocolList isNil])		ifTrue: [^module setNewList: List new].	 protocolList isEmpty		ifTrue: [protocolList := target organization categories].	newList := (target organization listAtCategoriesNamed: protocolList) asSortedCollection.	target isForNameSpace		ifTrue: [ newList := newList select: [ :key | ( target bindingFor: key ) isForGeneral ] ].	module setNewList: newList asList! !!Siren.OSCVoice class methodsFor: 'parameter maps'!pMapForCSLVSOS	"Answer the default parameterMap for use with the CSL vector SOS example instrument."	"CSL vector SOS Instrument has args: dur, ampl, frq, pos"	^[ :e | | arr |	arr := Array new: 4.				"set up the parameter map"	arr at: 1 put: e duration asSec value.	arr at: 2 put: e ampl asRatio value.	arr at: 3 put: e pitch asHz value.	arr at: 4 put: e pos."	Transcript show: arr printString; cr."	TypedOSCMessage for: e inst with: arr]! !!Siren.OSCVoice class methodsFor: 'examples'!stringExample: oct1 to: oct2	"Play a long merged list of random notes on the CSL plucked string instrument"	"OSCVoice stringExample2"	"Startup up the CSL OSC demo (or dumpOSC) and run these"	"CSL StringInstrument has args: ampl, c_fr, pos"	| scale evList voice  pitches |	scale := OrderedCollection new.						"create a list of freqs of a 3-octave pentatonic scale on D"	pitches := ((PentatonicScale root: N re) notes) collect: [ : ea | ea name asLowercase].	oct1 to: oct2 do: [ :oct |		1 to: pitches size do: [ :ind |			scale add: (Pitch value: (pitches at: ind), oct printString) asHertz]].	evList := (EventList randomExample: 20 					"create the event list"		from: ((#duration: -> (1.0 to: 2.5)), 			(#ampl: -> (0.1 to: 0.5)), 			(#pitch: -> scale), 			(#pos: -> (-1.0 to: 1.0)))).	evList addAll: (EventList randomExample: 200 			"add in the 2nd event list"		from: ((#duration: -> (1.0 to: 2.5)), 			(#ampl: -> (0.1 to: 0.5)), 			(#pitch: -> scale), 			(#pos: -> (-1.0 to: 1.0)))).	evList addAll: (EventList randomExample: 200 			"add in the 3rd event list"		from: ((#duration: -> (1.0 to: 2.5)), 			(#ampl: -> (0.1 to: 0.5)), 			(#pitch: -> scale), 			(#pos: -> (-1.0 to: 1.0)))).	1 to: evList events size do: 							"plug in instruments 1-16"		[ :ind | | ev |					ev := (evList events at: ind) event.		ev inst: ('/i', (ind - 1 \\ 16 + 1) printString, '/pn')].	voice := self default.	voice parameterMap: self pMapForCSLString.			"plug in the parameter map"	evList voice: voice.	evList play.											"play"!vxFadeExample1: num	"Play a long merged list of random notes on the CSL vector SOS instrument"	"OSCVoice vxFadeExample1"	"Startup up the CSL OSC demo (or dumpOSC) and run these"	"CSL VSOS Instrument has args: dur, ampl, frq, pos"	| scale evList voice  pitches |	scale := OrderedCollection new.						"create a list of freqs of a 3-octave pentatonic scale on D"	pitches := ((PentatonicScale root: N do) notes) collect: [ : ea | ea name asLowercase].	1 to: pitches size do: [ :ind |		scale add: (Pitch value: (pitches at: ind), '0') asHertz]. 	evList := (EventList randomExample: num 				"create the event list"		from: ((#duration: -> (4.0 to: 8.5)), 			(#ampl: -> (0.06 to: 0.2)), 			(#pitch: -> scale), 			(#pos: -> (-1.0 to: 1.0)))).	1 to: evList events size do: 							"plug in instruments 1-16"		[ :ind | | ev |					ev := (evList events at: ind) event.		ev inst: ('/i', (ind - 1 \\ 8 + 41) printString, '/pn')].	voice := self default.	voice parameterMap: self pMapForCSLVSOS.			"plug in the parameter map"	evList voice: voice.	evList play.											"play"! !!Siren.OSCVoice class methodsFor: 'instance creation'!default	"Answer an OSC voice for use with OSC-to-MIDI by default."	^self onPort: OSCPort default!localhost	"Answer an instance on the local host"	^self onPort: OSCPort localhost!map: mapSelector	"Answer a default instance that uses the given parameter map name"	"OSCVoice map: #pMapForCSLSimpleFM"	| inst |	inst := self default.	inst parameterMap: (self perform: mapSelector).	^inst!onPort: pt	"Answer an instance on the given port"	| me |	(me := self new initialize) port: pt.	^me!scHost	"Answer the default voice for SC over OSC"	^self onPort: OSCPort scHost! !!Siren.OSCVoice class methodsFor: 'parameter maps'!defaultPMap	"Answer the default parameterMap for use with OSC."	^[ :e |  | arr |	arr := Array			with: e duration asSec value			with: e pitch asHz value			with: e ampl asRatio value.	TypedOSCMessage for: '/note' with: arr]!pMapForCSLAdditive	"Answer the default parameterMap for use with the CSL sum-of-sines instrument.		This creates an OSC bundle with a 'ps' message for the spectrum followed		by a 'pn' message to play a note.		CSL SOSInstrument args: dur, ampl, freq, pos, [att, dec, sus, rel] "	"OSCVoice sosExample1"		"EventScheduler flush"	^[ :e | | arr spect |	spect := e at: #spectrum.	spect := spect copyFrom: 1 to: 10.			"just the first 5 partials for now"	arr := Array new: 4.	arr at: 1 put: e duration asSec value.			"required fields"	arr at: 2 put: e ampl value.	arr at: 3 put: e pitch asHz value.	arr at: 4 put: e pos.													"optional fields""	arr at: 5 put: e att.	arr at: 6 put: e dec.	arr at: 7 put: e sus.	arr at: 8 put: e rel.""	Transcript show: arr printString; cr."	OSCBundle 		with: (Array 								"spectrum set message"			with: (TypedOSCMessage for: '/i1/ps' with: spect)													"note-on message"			with: (TypedOSCMessage for: '/i1/pn' with: arr))]!pMapForCSLFM	"Answer the default parameterMap for use with the CSL FM example instrument."	"CSL FMInstrument has args: dur, ampl, c_fr, m_fr, ind, pos, att, dec, sus, rel, i_att, i_dec, i_sus, i_rel"	| inst cnt |	cnt := 33.	^[ :e | | arr |	arr := Array new: 14.				"set up the parameter map"	arr at: 1 put: e duration asSec value.	arr at: 2 put: e ampl value.	arr at: 3 put: e pitch asHz value.	arr at: 4 put: e pitch asHz value * e ratio.	arr at: 5 put: e modIndex.	arr at: 6 put: e pos.	arr at: 7 put: e att.	arr at: 8 put: e dec.	arr at: 9 put: e sus.	arr at: 10 put: e rel.	arr at: 11 put: e iatt.	arr at: 12 put: e idec.	arr at: 13 put: e isus.	arr at: 14 put: e irel."	Transcript show: arr printString; cr."	inst := '/i', cnt printString, '/pn'.	cnt := cnt +1.	cnt > 39 ifTrue: [cnt := 33].	TypedOSCMessage for: inst with: arr]!pMapForCSLSimpleFM	"Answer the default parameterMap for use with the CSL FM example instrument."	"CSL FMInstrument has args: dur, ampl, c_fr, m_fr, ind, pos"	^[ :e | | arr |	arr := Array new: 6.				"set up the parameter map"	arr at: 1 put: e duration asSec value.	arr at: 2 put: e ampl asRatio value.	arr at: 3 put: e pitch asHz value.	arr at: 4 put: e pitch asHz value * e ratio.	arr at: 5 put: e modIndex.	arr at: 6 put: e pos."	Transcript show: arr printString; cr."	TypedOSCMessage for: e inst with: arr]!pMapForCSLSnd	"Answer the default parameterMap for use with the CSL FM example instrument."	"CSL SndFileInstrument has args: ampl, pos, start, stop"	^[ :e | | arr |	arr := Array new: 4.				"set up the parameter map"	arr at: 1 put: e ampl value.	arr at: 2 put: e pos.	arr at: 3 put: e start.	arr at: 4 put: e stop."	Transcript show: arr printString; cr."	TypedOSCMessage for: e inst with: arr]!pMapForCSLSndSimple	"Answer the default parameterMap for use with the CSL FM example instrument."	"CSL SndFileInstrument has args: ampl, pos"	^[ :e | | arr |	arr := Array new: 2.				"set up the parameter map"	arr at: 1 put: e ampl value.	arr at: 2 put: e pos."	Transcript show: arr printString; cr."	TypedOSCMessage for: e inst with: arr]!pMapForCSLString	"Answer the default parameterMap for use with the CSL plucked string example instrument."	"CSL StringInstrument has args: ampl, c_fr, pos"	| inst cnt |	cnt := 1.	^[ :e | | arr |	arr := Array new: 3.				"set up the parameter map"	arr at: 1 put: e ampl value.	arr at: 2 put: e pitch asHz value.	arr at: 3 put: e pos."	Transcript show: arr printString; cr."	inst := '/i', cnt printString, '/pn'.	cnt := cnt +1.	cnt > 16 ifTrue: [cnt := 1].	TypedOSCMessage for: inst with: arr]!pMapForMIDI	"Answer the default parameterMap for use with OSC-to-MIDI. 	In this class, we create and return a OSCMessage with data taken from the given event."	^[ :e | 	| arr timestamp |	arr := Array			with: (e voice isInteger ifTrue: [e voice] ifFalse: [1])			with: e pitch asMIDI value			with: e ampl asMIDI value.	timestamp := Timestamp now.	OSCBundle with: (Array 			with: (TypedOSCMessage for: '/osc/midi/out/noteOn' with: arr)			with: (OSCBundle 				with: (Array with: (TypedOSCMessage for: '/osc/midi/out/noteOff' with: arr))				at: (timestamp addMilliseconds: e duration asMsec value)))		at: timestamp]!pMapForMIDItoFM	"Answer the default parameterMap for use with the CSL FM example instrument."	"CSL FMInstrument has args: dur, ampl, pch, index, pos"	^[ :e | | arr |	arr := Array new: 6.				"set up the parameter map"	arr at: 1 put: e duration asSec value.	arr at: 2 put: e ampl asRatio value.	arr at: 3 put: e pitch asHz value.	arr at: 5 put: e modIndex.	arr at: 6 put: e pos."	Transcript show: arr printString; cr."	TypedOSCMessage for: e inst with: arr]!pMapWithBundle	"Answer the default parameterMap for use with OSC-to-MIDI. In this class, we create and return a TypedOSCMessage with data taken from the given event. This allows us to have other versions that create OSC bundles."	^[ :e | | arr |	arr := Array with: 1			with: e pitch asMIDI value			with: e ampl asMIDI value.	OSCBundle 		with: (Array with: (TypedOSCMessage for: '/osc/midi/out/noteOn' with: arr)				with: (OSCBundle 						with: (TypedOSCMessage for: '/osc/midi/out/noteOff' with: arr)						at: (Timestamp now addMilliseconds: e duration asMsec value)))]! !!Siren.OSCVoice class methodsFor: 'examples'!fmExample1	"Play a few random notes on the CSL FM instrument"	"OSCVoice fmExample1"	"Startup up the CSL OSC demo (or dumpOSC) and run these"	"CSL FMInstrument has args: dur, ampl, c_fr, m_fr, ind, pos, att, dec, sus, rel, i_att, i_dec, i_sus, i_rel"	| events voice  |	events := (EventList randomExample: 15 					"create the event list"		from: ((#duration: -> (0.2 to: 0.5)), 			(#pitch: -> (110.1 to: 220.1)), 			(#ratio: -> (0.8 to: 5.0)),			(#ampl: -> (0.2 to: 0.8)), 			(#modIndex: -> (0.0 to: 8.0)), 			(#pos: -> (-0.7 to: 0.7)),			(#att: -> (0.01 to: 0.05)),			(#dec: -> (0.03 to: 0.05)),			(#sus: -> (0.3 to: 0.7)),			(#rel: -> (0.1 to: 0.15)),			(#iatt: -> (0.05 to: 0.1)),			(#idec: -> 0.005),			(#isus: -> 1.0),			(#irel: -> 0.1))).	voice := self default.	voice  instrument: '/i1/pn'.										"default instrument"	voice parameterMap: self pMapForCSLFM.					"plug in the parameter map"	events voice: voice.	events play.!fmExample2	"Play molto legato notes on 4 CSL FM instruments and loop until interrupted "	"OSCVoice fmExample2"		"EventScheduler flush"	"Startup up the CSL OSC demo and run these"	"CSL FMInstrument has args: dur, ampl, c_fr, m_fr, ind, pos"	| evList voice |						"create the event list"	evList := (EventList randomExample: 20 		from: ((#duration: -> 1.0),				(#pitch: -> (40.1 to: 100.1)),				(#ratio: -> (0.8 to: 1.5)),				(#ampl: -> (0.1 to: 0.25)), 				(#modIndex: -> (1.0 to: 4.0)),				(#pos: -> (-1.0 to: 1.0)))).	1 to: evList events size do: 		[ :ind | | ev |			"plug in instruments and expand durations (molto legato)"		ev := (evList events at: ind) event.		ev inst: ('/i', (ind - 1 \\ 4 + 1) printString, '/pn').		ev duration: ev duration * 4].	voice := self onPort: (OSCPort to: #[127 0 0 1] port: 54321).	"edit this to taste."	voice parameterMap: self pMapForCSLSimpleFM.	"plug in the parameter map"	evList voice: voice.	evList loop										"loop until you stop the scheduler"!fmExample3	"Play a long CSL FM note and apply some real-time control functions to it"	"OSCVoice fmExample3"	"Startup up the CSL OSC demo and run these"	"CSL FMInstrument has args: dur, ampl, c_fr, m_fr, ind, pos"	| evList voice voice2 gliss map2 pan map3 voice3 |	evList := ((EventList newNamed: #LongNote) add:		(10.0 sec, 66.0 Hz, -3 dB, (#pos -> -1.0), (#ratio -> 1.17), 				(#modIndex -> 2.64), (#inst -> '/i1/pn'))).	voice := self default.	voice parameterMap: self pMapForCSLSimpleFM.	"plug in the parameter map"	evList voice: voice.	evList play.										"start the note"	2 wait.			"pause 2 sec""Now make a glissando down"	gliss := FunctionEvent new function: (LinearFunction from: #((0 66.0) (8 30.0))).	gliss interval: 0.1 sec.						"10 per sec"	map2 :=  [ :e | TypedOSCMessage for: '/i1/cf' with: (Array with: e value)].	voice2 := self default.	voice2 parameterMap: map2.					"plug in the parameter map"	gliss voice: voice2.	gliss play."and pan it"	pan := FunctionEvent new function: (LinearFunction from: #((0 -1.0) (8 1.0))).	pan interval: 0.1 sec.						"10 per sec"	map3 :=  [ :e | TypedOSCMessage for: '/i1/po' with: (Array with: e value)].	voice3 := self default.	voice3 parameterMap: map3.					"plug in the parameter map"	pan voice: voice3.	pan play.!fmExample4	"Play an FM bell using CSL; fork a block that plays a note and waits a bit; 		stop the scheduler to stop the block."	"OSCVoice fmExample4"	| evList voice rand |	rand := Random new.	EventScheduler run.	[[EventScheduler isRunning] whileTrue:		"repeat block to play a bell sound"		[evList := ((EventList newNamed: #Bell) add:		(3.0 sec, (rand nextFrom: 1000.0 to: 1200.0) Hz , -18 dB, 				(#pos -> (rand nextFrom: -1.0 to: 1.0)), 				(#ratio -> 1.414), 				(#modIndex -> 2.0), 				(#inst -> '/i9/pn'))).		voice := OSCVoice onPort: (OSCPort to: #[127 0 0 1] port: 54321).		voice parameterMap: self pMapForCSLSimpleFM.	"plug in p-map"		evList voice: voice.		evList play.		(rand nextFrom: 5 to: 10) wait]] forkAt: (Processor userBackgroundPriority - 1)!fmExample5	"Play a few random notes on the CSL FM instrument"	"OSCVoice fmExample5"	"Startup up the CSL OSC demo (or dumpOSC) and run these"	"CSL FMInstrument has args: dur, ampl, c_fr, m_fr, ind, pos, att, dec, sus, rel, i_att, i_dec, i_sus, i_rel"	| events voice  |	events := (EventList randomExample: 2	 					"create the event list"		from: ((#duration: -> (5.0 to: 8.0)), 			(#pitch: -> (30.1 to: 70.1)), 			(#ratio: -> (1.8 to: 4.0)),			(#ampl: -> (0.4 to: 0.8)), 			(#modIndex: -> (3.0 to: 8.0)), 			(#pos: -> (-0.7 to: 0.7)),			(#att: -> (0.2 to: 2.0)),			(#dec: -> (0.5 to: 1.0)),			(#sus: -> (0.7 to: 1.0)),			(#rel: -> (0.1 to: 0.5)),			(#iatt: -> (1.5 to: 3.5)),			(#idec: -> (0.1 to: 0.5)),			(#isus: -> (0.1 to: 1.0)),			(#irel: -> (0.1 to: 0.5)))).	voice := self default.	voice  instrument: '/i33/pn'.									"default instrument"	voice parameterMap: self pMapForCSLFM.					"plug in the parameter map"	events voice: voice.	events play.!functionExample	"Play a function out to OSC"	"OSCVoice functionExample"	| event voice map |							"create the function and event"	event := FunctionEvent new function: (LinearFunction default scaleBy: 5@1).	event interval: 0.25 sec.						"4 per sec"	map :=  [ :e | TypedOSCMessage for: '/osc/1/ampl' with: (Array with: e value)].	voice := self default.	voice parameterMap: map.					"plug in the parameter map"	event voice: voice.	event play!midiScaleExample	"OSCVoice midiScaleExample"	 | list voice |	list := EventList scaleFrom: 48 to: 60 in: 2.5.	voice := self default.	list voice: voice.	list play.!sndExample1	"Play random notes on the CSL sound file instruments"	"OSCVoice snd_Example1"	"Startup up the CSL OSC demo and run these"	"CSL SndFileInstrument has args: ampl, pos, start, stop"	| events voice rand |	rand := Random new.	events := EventList named: EventList nextName.	25 timesRepeat:		[ | in |		in := rand nextIntFrom: 5 to: 8.		events add: (MusicEvent new duration: (rand nextFrom: 0.1 to: 0.2); 				inst: ('/i', in printString, '/pn');				ampl: (rand nextFrom: 0.05 to: 0.5); 				pos: (rand nextFrom: -1.0 to: 1.0) ; 				start: (rand nextFrom: 0.0 to: 0.5); 				stop: (rand nextFrom: 0.5 to: 1.0))].	voice := self default.	voice parameterMap: self pMapForCSLSnd.	"plug in the parameter map"													"load 4 sound files"	voice send: '/i5/fi' args: (Array with: (SirenUtility findFile: 'moon.snd')).	voice send: '/i6/fi' args: (Array with: (SirenUtility findFile: 'wet.snd')).	voice send: '/i7/fi' args: (Array with: (SirenUtility findFile: 'round.snd')).	voice send: '/i8/fi' args: (Array with: (SirenUtility findFile: 'shine.snd')).	events voice: voice.	events play!sndExample2	"Play random notes on the CSL sound file instruments; loop until interrupted"	"OSCVoice sndExample2"		"EventScheduler flush"	"Startup up the CSL OSC demo and run these"	"CSL SndFileInstrument has args: ampl, pos, start, stop"	| events voice rand |	rand := Random new.	events := EventList named: EventList nextName.	25 timesRepeat:		[ | in |		in := rand nextIntFrom: 5 to: 8.		events add: (MusicEvent new duration: (rand nextFrom: 0.1 to: 0.2); 				inst: ('/i', in printString, '/pn');				ampl: (rand nextFrom: 0.01 to: 0.3); 				pos: (rand nextFrom: -1.0 to: 1.0) ; 				start: (rand nextFrom: 0.0 to: 0.5); 				stop: (rand nextFrom: 0.5 to: 1.0)).		(rand next > 0.5) 							"add 50% rests"			ifTrue: [events add: (DurationEvent new duration: rand next sec)]].	voice := self default.	voice parameterMap: self pMapForCSLSnd.	"plug in the parameter map"													"load voice files into instruments 5-8"	voice send: '/i5/fi' args: (Array with: (SirenUtility findFile: 'moon.snd')).	voice send: '/i6/fi' args: (Array with: (SirenUtility findFile: 'wet.snd')).	voice send: '/i7/fi' args: (Array with: (SirenUtility findFile: 'round.snd')).	voice send: '/i8/fi' args: (Array with: (SirenUtility findFile: 'shine.snd')).	events voice: voice.							"set-up and loop list"	events loop!sndExample3	"Play random notes on the CSL sound file instruments"	"OSCVoice sndExample3"	"Startup up the CSL OSC demo and run these"	"CSL SndFileInstrument has args: ampl, pos, start, stop"	| events voice rand |	voice := self default.	voice parameterMap: self pMapForCSLSndSimple.	"plug in the parameter map"													"load 4 sound files""	sndDir := '/Content/Code/CSL6/Data/'.	voice send: '/i17/fi' args: (Array with: (sndDir, 'moon.snd')).	voice send: '/i18/fi' args: (Array with: (sndDir, 'wet.snd')).	voice send: '/i19/fi' args: (Array with: (sndDir, 'round.snd')).	voice send: '/i20/fi' args: (Array with: (sndDir, 'shine.snd'))."	rand := Random new.								"create an event list that plays the sound files with long pauses"	events := EventList new.	200 timesRepeat:		[ | in |		in := rand nextIntFrom: 17 to: 20.		events add: (MusicEvent new duration: (rand nextFrom: 1.0 to: 5.0); 				inst: ('/i', in printString, '/pn');				ampl: (rand nextFrom: 0.5 to: 1.5); 				pos: (rand nextFrom: -1.0 to: 1.0))].	events voice: voice.								"plug in the OSC voice"	events play										"play it"!sosExample1	"Play random notes on the CSL sum-of-sines instruments; loop until interrupted"	"OSCVoice sosExample1"		"EventScheduler flush"	"Startup up the CSL/OSC additive and run these"	"CSL AdditiveInstrument has args: dur, ampl, freq, pos, att, dec, sus, rel"	| events voice rand instr notes pitches freq0 key spect |	rand := Random new.	instr := SHARCInstrument fromDir: 'tuba'.			"load a tuba sample"	notes := Dictionary new.	instr samples associationsDo:						"make a dict of sample freq -> SOS-array"		[ :ass |		notes at: (ass key pitch asHz value) put: (ass value asSumOfSines)].	pitches := notes keys asSortedCollection. "get the pitches in Hz"	freq0 := pitches removeFirst.	pitches := (pitches collect: [ :pt | | int | 				"make a list of freq-interval -> base-freq"			int := freq0 to: pt. 			freq0 := pt. 			int]) asSortedCollection: [ :x :y | x first <= y first ].	events := EventList EventList newNamed.		"temp event list"	1 to: 25 do:										"add 25 notes + some rests"		[ :counter | | pch |		pch := rand nextFrom: 80.0 to: 440.0.			key := pitches detect: [ :pt | pt includes: pch] ifNone: [nil].			key ifNil: [pch < pitches first first				ifTrue: [spect := notes at: pitches first first]				ifFalse: [pch > pitches last last					 ifTrue: [spect := notes at: pitches last last]]]			ifNotNil: [spect := notes at: key first].		events add: (MusicEvent new 				duration: (rand nextFrom: 0.1 to: 0.2); 				inst: ('/i', (counter \\ 16 + 1) printString);				ampl: (rand nextFrom: 0.01 to: 0.3); 				pitch: pch; 				pos: (rand nextFrom: -1.0 to: 1.0);				spectrum: spect).		(rand next > 0.8) 							"add 20% rests"			ifTrue: [events add: (DurationEvent new duration: (rand next / 4) sec)]].	voice := self default.	voice parameterMap: self pMapForCSLAdditive.	"plug in the parameter map"													"load voice files into instruments 5-8"	events voice: voice.							"set-up and loop list"	events play!stringExample1	"Play a few random notes on the CSL plucked string instrument"	"Start up the CSL OSC demo (or dumpOSC) and run these"	"CSL StringInstrument has args: ampl, c_fr, pos"	"OSCVoice stringExample1"	| evList voice  |	evList := EventList randomExample: 100 				"create the event list"		from: ((#duration: -> (0.5 to: 2.5)), 			(#ampl: -> (0.25 to: 0.8)), 			(#pitch: -> (80.0 to: 220.0)), 			(#pos: -> (-1.0 to: 1.0))).	1 to: evList events size do: 		[ :ind | | ev |										"plug in instruments"		ev := (evList events at: ind) event.		ev inst: ('/i', (ind - 1 \\ 4 + 1) printString, '/pn')].	voice := self default.	voice parameterMap: self pMapForCSLString.			"plug in the parameter map"	evList voice: voice.	evList play.!stringExample2	"Play a long merged list of random notes on the CSL plucked string instrument"	"OSCVoice stringExample2"	"Startup up the CSL OSC demo (or dumpOSC) and run these"	"CSL StringInstrument has args: ampl, c_fr, pos"	| scale evList voice  pitches |	scale := OrderedCollection new.						"create a list of freqs of a 3-octave pentatonic scale on D"	pitches := ((PentatonicScale root: N re) notes) collect: [ : ea | ea name asLowercase].	2 to: 4 do: [ :oct |		1 to: pitches size do: [ :ind |			scale add: (Pitch value: (pitches at: ind), oct printString) asHertz]].	evList := (EventList randomExample: 20 					"create the event list"		from: ((#duration: -> (1.0 to: 2.5)), 			(#ampl: -> (0.1 to: 0.5)), 			(#pitch: -> scale), 			(#pos: -> (-1.0 to: 1.0)))).	evList addAll: (EventList randomExample: 200 			"add in the 2nd event list"		from: ((#duration: -> (1.0 to: 2.5)), 			(#ampl: -> (0.1 to: 0.5)), 			(#pitch: -> scale), 			(#pos: -> (-1.0 to: 1.0)))).	evList addAll: (EventList randomExample: 200 			"add in the 3rd event list"		from: ((#duration: -> (1.0 to: 2.5)), 			(#ampl: -> (0.1 to: 0.5)), 			(#pitch: -> scale), 			(#pos: -> (-1.0 to: 1.0)))).	1 to: evList events size do: 							"plug in instruments 1-16"		[ :ind | | ev |					ev := (evList events at: ind) event.		ev inst: ('/i', (ind - 1 \\ 16 + 1) printString, '/pn')].	voice := self default.	voice parameterMap: self pMapForCSLString.			"plug in the parameter map"	evList voice: voice.	evList play.											"play"! !Siren.OSCVoice comment:'An OSCVoice can play events out to an OSC server using a predefined parameter mapping block to generate the OSC message.Instance Variables:	port	<Siren.OSCPort>  my output port'!!Siren.OSCVoice methodsFor: 'events'!oscMessageFrom: event 	"Answer a message for the given event by passing it to my parameter-mapper block"	^parameterMap value: event!play: anEL 	"Expand the list and play it now."	self play: anEL at: Time microsecondClock!playAssociation: ass in: list 	"Play the association..."	| realTime |	realTime := ass key asMsec value.	self waitTill: realTime.	port send: (parameterMap value: ass value).	^self"	stream := OrderedCollection new.	parameterMap do: [ :item | self			mapProperty: item			of: ass			within: list].	stream size = 0 ifTrue: [^self].	stream size = 1 ifTrue: [^port send: (stream at: 1)]."!playEvent: event at: start 	"Expand the list and play it at the given time."	start ifNotNil:		[self waitTill: start].	event hasItems ifTrue: [^self play: event at: start].	port send: (self oscMessageFrom: event)!waitTill: time	| now |	time ifNotNil: 			[now := Time microsecondClock.			time > now				ifTrue: [(Delay forMicroseconds: time - now) wait]				ifFalse: [nil]].	^self! !!Siren.OSCVoice methodsFor: 'accessing'!port	"Return the OSCPort"	^port!port: aPort 	"Set the OSCPort"	port := aPort.	^self! !!Siren.OSCVoice methodsFor: 'utilities'!send: command args: args	"Send an OSC command with the given arguments"	port send: (TypedOSCMessage for: command with: args)! !!Siren.CmusicVoice class methodsFor: 'examples'!randomExampleToFileAndEdit	"CmusicVoice randomExampleToFileAndEdit"	self randomExampleToFileNamed: 'rand.sc'.	^self!randomExampleToFileNamed: fnam 	"Store the given score to a file"	| ev strm list rand vox |	strm := (Filename named: fnam) writeStream.	rand := Random new."Create the event list and add a few additional properties"	(list := EventList randomExample: 64)		do: 			[ :ass | 			(ev := ass event) at: #pos put: rand next.			ev at: #prop1 put: (rand nextFrom: 320 to: 480).			ev at: #prop2 put: (rand nextIntFrom: 12000 to: 23000)]."Create a cmusic voice and customize its parameter map."	(vox := CmusicVoice newNamed: 'violin' onStream: strm) parameterMap at: 3 			put: [ :t8 | #(#in1 #in2 #in3 #in4) at: t8 voice \\ 4 + 1].	vox addMap: [ :t9 | (t9 pitch asHz value printString: 5), 'Hz'].	vox addMap: #pos.	vox addMap: [ :it | ((it at: #prop1) / 10) truncated printString].	vox addMap: #prop2."Play the list on the voice."	vox play: list.	strm close.	(Filename named: fnam) edit.	^self!randomExampleToTranscript	"CmusicVoice randomExampleToTranscript"	(CmusicVoice newNamed: 'violin' onStream: Transcript)		play: (EventList randomExample: 8).	^self! !!Siren.CmusicVoice class methodsFor: 'instance creation'!defaultPMap	"Answer the default cmusic p-map"	| map |	map := OrderedCollection new: 8.	map add: 'note '.	map add: #start.	map add: 'ins'.	map add: [ :t2 | t2 duration asSec value printString ].	map add: [ :t3 | (t3 loudness asDB value printString ), 'dB'].	^map! !Siren.CmusicVoice comment:'A CmusicVoice can write an event list to a sc format file for use by Cmusic.'!!Siren.CmusicVoice methodsFor: 'events'!endLine	stream nextPut: $;; cr.	^self!writeFooter	stream cr; nextPutAll: 'ter;'; cr; cr.	^self!writeHeader	"Write the cmusic score file header."	stream nextPutAll: '/* cmusic score file created ', Date today printString , ' */'; cr.	stream cr; nextPutAll: '#include <carl/cmusic.h>'; cr.	stream nextPutAll: '#include "instruments.sc"'; cr.	stream cr; nextPutAll: 'SINE(f1);'; cr; cr.	^self! !!Siren.OSCBundle class methodsFor: 'examples'!example1	"Simple example"	^self 		with: (Array with: OSCMessage scRun with: OSCMessage scIncreaseVolume)!example2	^self with: (Array with: self example1 with: OSCMessage scDecreaseVolume)! !!Siren.OSCBundle class methodsFor: 'class initialization'!initialize	"Initialize the values of the shared variables."	"OSCBundle initialize"	MillisecScale = 4295000.	MillisecToNTP:= ((2 raisedTo: 32) / 1000).	SecsInAYear:= 60 * 60 * 24 * 365! !!Siren.OSCBundle class methodsFor: 'support'!asNTPMilliseconds: aTimestamp 	"Convert aTimestamp to the OSC representation of the same"	| msec |	msec := aTimestamp millisecond * MillisecToNTP. "((2 raisedTo: 32) / 1000)"	^msec asInteger!asSecondsSince1900: aTimestamp 	"Convert aTimestamp to seconds since 1900"	| sec |	"Gets us the number of seconds since Jan 1. 1901"	sec := aTimestamp asSeconds.	"sec := sec + SecsInAYear."	"Convert that to be GMT-based"	sec := TimeZone default convertLocalSecondsToGMT: sec.	"Add one year worth of seconds"	^sec + SecsInAYear. "(60 * 60 * 24 * 365)"!timestampToOSC: aTimestamp 	"Convert aTimestamp to the OSC representation of the same"	| sec msec |	sec := self asSecondsSince1900: aTimestamp.	msec := self asNTPMilliseconds: aTimestamp.	^(sec bitShift: 32) bitOr: msec! !!Siren.OSCBundle class methodsFor: 'instance creation'!with: aCollection	^self with: aCollection at: Timestamp now!with: aCollection at: aTimestamp	^self new init: aCollection time: aTimestamp! !Siren.OSCBundle comment:'OSCBundle represents a bundle of OSC messagesInstance Variables:	messages	<OrderedCollection of OSCMessage>  my contents	time	<Integer>  my action timeShared Variables:	MillisecScale	<Integer>  msec/year (?)	MillisecToNTP	<Fraction>  msec scale for NTP	SecsInAYear	<Integer>  sec/year'!!Siren.OSCBundle methodsFor: 'initialize-release'!init: aCollection 	self init: aCollection time: Timestamp now!init: aCollection time: aTime 	"Initialize the receiver."	messages := aCollection.	time := aTime.	self init! !!Siren.OSCBundle methodsFor: 'osc'!timeTagToOSCBytes: aConvertor 	"Store a time thingy into the given convertor"	time isNil 		ifTrue: 			[8 timesRepeat: [aConvertor nextPut: 0].			^self].	(self class asSecondsSince1900: time) toOSCBytes: aConvertor.	(self class asNTPMilliseconds: time) toOSCBytes: aConvertor!toOSCBytes: aConvertor 	"^self"	'#bundle' toOSCBytes: aConvertor.	self timeTagToOSCBytes: aConvertor.	messages		do: 			[:aMessage | 			aMessage oscSize toOSCBytes: aConvertor.			aConvertor nextPutAll: aMessage oscBytes]! !!Tools.VisualLauncher class methodsFor: 'generated resources'!doTestIcon	^ToolbarIconLibrary visualFor: #doIt!openSirenIcon	^ToolbarIconLibrary visualFor: #siren! !!Tools.VisualLauncher methodsFor: 'actions'!doTestMessage	"Perform the user's selected test message; edit the message if shift-down."	<menuItem: #(#fileBrowser #menus 'File Browser' )		icon: #doTestIcon		nameKey: #doTest		menu: #(#launcherToolBar)		position: 90.01		helpText: #(#OpenAFileBrowser #menus 'Perform (or edit) the test message')>	| answer |	self builder window controller sensor shiftDown		ifTrue: [answer := Dialog				request: 'What''s the test message'				initialAnswer: testMessage				onCancel: ['']				windowLabel: 'Test Message Dialog'				for: Dialog defaultParentWindow.		answer isEmpty ifTrue: [^self].		testMessage := answer.		^self].	Compiler new		evaluate: testMessage		in: nil		allowReceiver: false		receiver: nil		environment: Smalltalk		notifying: nil		ifFail: [^self]!openFullBrowser	<menuItem: #(#fileBrowser #menus 'File Browser' )		icon: #allClassesIcon		nameKey: #openFullBrowser		menu: #(#launcherToolBar)		position: 80.01		helpText: #(#OpenAFileBrowser #menus 'Open a Full System Browser')>	^FullSystemBrowser openOnNameSpace: Siren!openSirenUtility	<menuItem: #(#fileBrowser #menus 'File Browser' )		icon: #openSirenIcon		nameKey: #openSiren		menu: #(#launcherToolBar)		position: 100.01		helpText: #(#OpenAFileBrowser #menus 'Open the Siren utility panel')>	<menuItem: 'Siren Utility'		nameKey: nil		menu: #(#menuBar #tools)		position: 40.00>	Siren.SirenSession openUtility! !!Tools.VisualLauncher methodsFor: 'initialize-release'!initialize	super initialize.	toolBar := nil asValue.	testMessage := 'Transcript cr; show: 100 factorial printString; cr'.!release"	statusBar == nil ifFalse: [statusBar release].	transcriptView == nil ifFalse: [transcriptView release]."	super release.! !!Tools.VisualLauncher methodsFor: 'menus'!rebuildMenu	"The VisualLauncher menuBar is generated entirely with pragmas."	| menu |	menu := UI.Menu new.	menu		augmentFrom: self class		to: VisualLauncher		menuName: #menuBar		for: self.	(menuBar isKindOf: UI.Menu) ifTrue: [ menuBar := nil asValue ].	menuBar isNil ifTrue: [ menuBar := nil asValue ].	menuBar value: menu! !!Siren.CmixVoice class methodsFor: 'examples'!randomExampleToFileAndEdit	"CmixVoice randomExampleToFileAndEdit"	self randomExampleToFileNamed: 'rand.m'.	^self!randomExampleToFileNamed: fnam 	"Create a random event list and store it on a file."	| evt strm list rand vox |	strm := (Filename named: fnam) writeStream.	rand := Random new."Create the event list and add a few additional properties"	(list := EventList randomExample: 64)		do: 			[ :ass | 			(evt := ass event) at: #pos put: rand next.			evt at: #prop1 put: (rand nextFrom: 320 to: 480).			evt at: #prop2 put: (rand nextIntFrom: 12000 to: 23000)]."Create a cmix voice and customize its parameter map."	(vox := CmixVoice newNamed: 'file:=two' onStream: strm) addMap: #pos.	vox addMap: [ :item | ((item at: #prop1) / 1000) printString].	vox addMap: #prop2."Play the list on the voice."	vox play: list.	strm close.	(Filename named: fnam) edit.	^self! !!Siren.CmixVoice class methodsFor: 'instance creation'!default	CmixVoice newNamed: 'fm' onStream: 'tmp.m' asFilename writeStream.	^self!defaultPMap	"CmixVoice randomExampleToFileAndEdit"	| map |	map := OrderedCollection new: 8.	map add: [ :ass :list | 'ins(', (ass key asSec value asFloat printString: 4)].	map add: [ :t2 | t2 duration asSec value asFloat printString: 4 ].	map add: [ :t3 | t3 loudness asDB positiveDB truncated printString].	^map! !Siren.CmixVoice comment:'A CmixVoice can write an event list to a MINC format file for use by cmix.'!!Siren.CmixVoice methodsFor: 'events'!endLine	stream nextPutAll: ');'; cr.	^self!playEvent: evt at: start 	"Play the given event"	| param newEv siz |	stream == nil ifTrue: [^self].	stream nextPutAll: parameterMap first.	newEv := 2.	siz := parameterMap size.	[newEv <= siz]		whileTrue: 			[(param := parameterMap at: newEv) isSymbol				ifTrue: [param == #start						ifTrue: [stream nextPutAll: start printString]						ifFalse: [stream nextPutAll: (evt perform: param) printString]]				ifFalse: [param isString						ifTrue: [stream nextPutAll: param]						ifFalse: [(param isMemberOf: BlockContext)								ifTrue: [stream nextPutAll: (param value: evt)]								ifFalse: [self error: 'unknown voice map item type.']]].			self space.			newEv := newEv + 1].	self endLine.	^self!space	stream nextPut: $,; space; tab.	^self!writeHeader	"Write out a CMix score file header."	stream nextPutAll: '/* cmix MINC data file created ' , Date today printString , ' */'; cr.	stream cr; nextPutAll: 'system("sfcreate -r 44100 -c 1 -i out.snd");'; cr.	stream nextPutAll: 'output("out.snd");			/* output sound file */'; cr.	stream nextPutAll: 'makegen(1, 10, 1024, 1)		/* f1 = sine wave */'; cr; cr.	^self! !!Siren.MIDIVoice class methodsFor: 'examples'!randomWalk: num pitch: pitch1 dur: dur amp: am chan: ch	"Play a random walk on a voice on a device on a port."	"MIDIVoice randomWalk: 100 pitch: 96 dur: 0.12 amp: #ppp"	| eLis voice pit steps du ampl |	eLis := EventList new.	pit := pitch1.	steps := #(0 0 0 0 1 -1).	du := dur sec.	ampl := am ampl.	num timesRepeat: 		[eLis add: (du, pit pitch, ampl).		pit := pit + steps atRandom].	voice := MIDIVoice default.	voice channel: ch.	eLis playOn: voice! !!Siren.MIDIVoice methodsFor: 'accessing'!channel	^channel!channel: aNum	channel := aNum! !!Siren.MIDIVoice methodsFor: 'initialize-release'!initialize	"Set up a MIDIVoice's time counter."	super initialize.	currentTime := nil.	channel := 1! !!Siren.MIDIVoice methodsFor: 'accessing'!number	"Answer my channel or icon number"	^channel"	| n |	n := Number readFrom: (ReadStream on: name).	n := Number readFrom: (ReadStream on: stream).	n = 0 ifTrue: [^1].	^n"! !!Siren.MIDIVoice methodsFor: 'events'!playEvent: anEvent at: aTime	"Send the given Event to the instrument."	aTime isNil		ifTrue: [instrument play: anEvent at: 0]		ifFalse: [instrument play: anEvent at: aTime usec value]! !Siren.MIDIVoice reorganizeFromString: '(''initialize-release'' #close #initialize #reset)(''accessing'' #channel #channel: #number)(''events'' #play: #playEvent:at:)'!!Siren.SirenSession class methodsFor: 'interface specs'!utilWindowSpec	"Tools.UIPainter new openOnClass: self andSelector: #utilWindowSpec"	<resource: #canvas>	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #positionAutoSave true #sizeType #specifiedSize #openType #advanced #positionType #lastSavedPosition ) 			#label: 'Siren Configuration' 			#min: #(#{Core.Point} 572 190 ) 			#max: #(#{Core.Point} 572 190 ) 			#bounds: #(#{Graphics.Rectangle} 870 594 1442 774 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 120 0 32 0 216 0 60 0 ) 					#name: #voiceMenu 					#model: #defaultVoiceClass 					#menu: #voiceMenu ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 28 0 30 0 ) 					#name: #Label1 					#label: 'Default voice' 					#style: #large ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 424 0 90 0 544 0 120 0 ) 					#name: #ActionButton5 					#model: #loadAll 					#label: 'Load all' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 424 0 150 0 544 0 180 0 ) 					#name: #ActionButton6 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 8191 5119 6655 ) ) 					#model: #freeLists 					#label: 'Flush data' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 20 0 4 0 ) 					#name: #Label8 					#label: 'Score IO and Voices' 					#style: #large ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 420 0 4 0 ) 					#name: #Label9 					#label: 'OpenSoundControl' 					#style: #large ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 280 0 4 0 ) 					#name: #Label10 					#label: 'Sound IO' 					#style: #large ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 120 0 92 0 216 0 116 0 ) 					#name: #ActionButton2 					#model: #testSoundIn 					#label: 'Test sound in' 					#style: #systemDefault 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 120 0 120 0 216 0 144 0 ) 					#name: #ActionButton7 					#model: #testSndFileIn 					#label: 'Test sound file' 					#style: #systemDefault 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 16 0 92 0 112 0 116 0 ) 					#name: #ActionButton1 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 6655 8191 5119 ) ) 					#model: #testMIDI 					#label: 'Test MIDI I/O' 					#style: #systemDefault 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 16 0 64 0 112 0 88 0 ) 					#name: #configMIDI 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 8191 6655 5119 ) ) 					#model: #configureMIDI 					#label: 'Configure MIDI' 					#style: #systemDefault 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 16 0 120 0 112 0 144 0 ) 					#name: #testOSC 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 7044 7044 7044 ) ) 					#model: #testOSCout 					#label: 'Test OSC' 					#style: #systemDefault 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 120 0 64 0 216 0 88 0 ) 					#name: #testSoundOut 					#model: #testSoundOut 					#label: 'Test sound out' 					#style: #systemDefault 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 16 0 148 0 112 0 172 0 ) 					#name: #ActionButton3 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 5119 8191 8191 ) ) 					#model: #stopMIDI 					#label: 'Stop MIDI' 					#style: #systemDefault 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 120 0 148 0 216 0 172 0 ) 					#name: #ActionButton8 					#model: #stopSound 					#label: 'Stop sound' 					#style: #systemDefault 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 280 0 148 0 380 0 172 0 ) 					#name: #ActionButton9 					#model: #resetSound 					#label: 'Reset Sound' 					#style: #systemDefault 					#defaultable: true ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.MenuButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 80 0 84 0 148 0 112 0 ) 							#name: #MenuButton4 							#model: #blockSize 							#menu: #blocksizeMenu ) 						#(#{UI.MenuButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 80 0 0 0 148 0 28 0 ) 							#name: #MenuButton1 							#model: #sampleRate 							#menu: #rateMenu ) 						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 6 0 4 0 ) 							#name: #Label2 							#label: 'Sample rate' 							#style: #systemDefault ) 						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 10 0 32 0 ) 							#name: #Label4 							#label: 'In channels' 							#style: #systemDefault ) 						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 0 0 60 0 ) 							#name: #Label3 							#label: 'Out channels' 							#style: #systemDefault ) 						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 18 0 88 0 ) 							#name: #Label5 							#label: 'BlockSize' 							#style: #systemDefault ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 232 0 32 0 380 0 144 0 ) 						#name: #Composite1 ) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 424 0 120 0 544 0 150 0 ) 					#name: #ActionButton4 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 5119 5119 8191 ) ) 					#model: #cleanUp 					#label: 'Clean up' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 318 0 64 0 360 0 84 0 ) 					#name: #inChannelsField 					#model: #inChannels 					#style: #systemDefault 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 318 0 92 0 360 0 112 0 ) 					#name: #OutputField1 					#model: #outChannels 					#style: #systemDefault 					#type: #number ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 170 0 0 0 260 0 32 0 ) 					#name: #ActionButton10 					#model: #openTransport 					#label: 'Transport' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 454 0 32 0 564 0 56 0 ) 					#name: #oscAddressField 					#model: #oscAddress 					#style: #systemDefault 					#type: #string ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 420 0 36 0 ) 					#name: #Label6 					#label: 'Host' 					#style: #systemDefault ) 				#(#{UI.MenuButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 					#layout: #(#{Graphics.LayoutFrame} 424 0 60 0 544 0 90 0 ) 					#name: #verbosityMenu 					#model: #verbosity 					#label: '  Verbosity' 					#menu: #verbosityMenu ) ) ) )! !!Siren.SirenSession methodsFor: 'actions--change'!newVoice	"Respond to a selection in the sound port menu"self halt.	Transcript show: 'Voice set to ', voice value printString; cr.! !!Siren.SirenSession methodsFor: 'initialize release'!initialize	"Set up the default values."	"self open"	interfaceParams := SoundPort concreteClass properties.	interfaceParams isEmpty ifTrue: [interfaceParams := #(0 0 0 0)].	inChannels := interfaceParams first asValue.	outChannels := (interfaceParams at: 2) asValue.	sampleRate := (interfaceParams at: 3) asValue.	blockSize := SoundPort concreteClass blockSize asValue.	defaultVoiceClass := #MIDIVoice asValue.	transport := nil asValue.	scheduleList := SelectionInList new.	scheduleListText := SelectionInList new.	clock := String new asValue.	loadedSounds := OrderedCollection new.	loadedLists := OrderedCollection new.	verbosity := SirenUtility verbosity asValue.	oscAddress := (SirenUtility defaultOSCHost printIP, ':', SirenUtility defaultOSCPort printString) asValue.	(EventScheduler instance dependents includes: self)		ifFalse: [EventScheduler instance addDependent: self]! !!Siren.SirenSession methodsFor: 'actions'!configureMIDI	| men menI menO sel devI devO dev group |	MIDIPort concreteClass devices isEmpty		ifTrue: [MIDIPort concreteClass new].	devI := MIDIPort concreteClass devices select: [ :item | item out = 1].	devO := MIDIPort concreteClass devices select: [ :item | item out = 0].	(devI isEmpty and: [devO isEmpty])		ifTrue: [^Dialog warn: 'No MIDI devices registered.'].	men := Menu labelArray: #('pick input port' 'pick output port').	menI := Menu labelArray: (devI collect: [ :item | item name]) values: (1 to: devI size).	menO := Menu labelArray: (devO collect: [ :item | item name]) values: (devI size + 1 to: devI size + devO size).	group := OrderedCollection new		 add: ((MenuItem labeled: 'pick input port') submenu: menI);		 add: ((MenuItem labeled: 'pick output port') submenu: menO);		asArray.	men := Menu new.	men addItemGroup: group.	sel := men startUp.	sel = 0 ifTrue: [^self].	sel <= devI size		ifTrue: [Transcript show: 'Default MIDI input device set to ', ((devI at: sel) name); cr.			dev := (devI at: sel) port.			SirenUtility defaultMIDIIn: dev.			^MIDIPort concreteClass in: dev]		ifFalse: [Transcript show: 'Default MIDI output device set to ', ((devO at: sel - devI size) name); cr.			dev := (devO at: sel - devI size) port.			SirenUtility defaultMIDIOut: dev.			MIDIPort concreteClass out: dev]! !!Siren.OSCMessage class methodsFor: 'instance-creation'!for: addr	^self new initAddress: addr arguments: #()!for: addr with: args 	"Answer a TOM with the given address and arguments"	^self new initAddress: addr arguments: args! !!Siren.OSCMessage class methodsFor: 'examples'!example1	"OSCMessage example1"	^self for: '/example1' with: #(100)!example2	"OSCMessage example2"	^self for: '/example2' with: #('tester' 10.4)!example3	"OSCMessage example3"	^self for: '/example3' with: #(20 30 'blah')! !Siren.OSCMessage comment:'OSCMessages are concrete old-format (untyped) OSC messagesInstance Variables:	address	<String>  my OSC cmomand address	arguments	<Collection>  the arguments'!!Siren.OSCMessage methodsFor: 'printing'!printOn: aStream	aStream nextPutAll: 'OSC: ', address, '  ', arguments printString.! !!Siren.OSCMessage methodsFor: 'osc'!addressToOSCBytes: convertor 	"Convert the address to the OSC format"	address toOSCBytes: convertor.	^self!argumentsToOSCBytes: convertor 	"Add the type tags, then the arguments"	arguments do: [:each | each toOSCBytes: convertor].	^self!toOSCBytes: converter 	"Convert myself to OSC format"	self addressToOSCBytes: converter.	arguments notEmpty ifTrue: [self argumentsToOSCBytes: converter].	^self!typesToOSC: converter	| index numPad |	arguments isEmpty ifTrue: [^self].	arguments do: [:each | each toOSCTypeOn: converter].	index := 1.	numPad := 4 - (converter position \\ 4).	"This isn't very ST -- should be numPad do:[converter nextPut: 0]"	[index <= numPad]		whileTrue: 			[converter nextPut: 0.			index := index + 1].	^self! !!Siren.OSCMessage methodsFor: 'initialize-release'!initAddress: t1 arguments: t2 	address := t1.	arguments := t2.	self init.	^self! !!Siren.TypedOSCMessage class methodsFor: 'examples'!changeFreq	"TypedOSCMessage changeFreq"	^self for: '/freq' with: #(440)!scDecreaseVolume	"TypedOSCMessage scDecreaseVolume"	^self for: '/sc/mixer/volume' with: #(1 0.2)!scIncreaseVolume	"TypedOSCMessage scIncreaseVolume"	^self for: '/sc/mixer/volume' with: #(1 1.0)!scRun	"TypedOSCMessage scRun"	^self for: '/sc/run'!scStop	"TypedOSCMessage scStop"	^self for: '/sc/stop'!start	"TypedOSCMessage start"	^self for: '/start'! !Siren.TypedOSCMessage comment:'A TypedOSCMessage represents the new form of (typed) OSC messages'!!Siren.TypedOSCMessage methodsFor: 'osc'!argumentsToOSCBytes: convertor 	"Convert the args and type string to OSC format"	convertor nextPut: $, asInteger.	self typesToOSC: convertor.	super argumentsToOSCBytes: convertor.	^self!typesToOSC: converter 	"Convert the arguments to an OSC type string."	| t2 t3 |	arguments isEmpty ifTrue: [^self].	arguments do: [:t4 | t4 toOSCTypeOn: converter].	t2 := 1.	t3 := 4 - (converter position \\ 4).	[t2 <= t3]		whileTrue: 			[converter nextPut: 0.			t2 := t2 + 1].	^self! !!Siren.PortMidiInterface methodsFor: 'procedures'!pm_write_data3: which with: d1 with: d2 with: d3	<C: int pm_write_data3(unsigned int which, unsigned char d1, unsigned char d2, unsigned char d3)>	^self externalAccessFailedWith: _errorCode! !Siren.Peal reorganizeFromString: '(''accessing'' #at: #at:put: #currentChange #finished #setBase: #size)(''changing'' #change)(''playing'' #eventList #play #playOn0:durations:meter:at: #playOn: #playOn:durations:meter:at:)(''private'' #changeOrder:bounds: #indexOfElement: #swap:with:)'!!Siren.OSCByteConvertor class methodsFor: 'instance creation'!new	^super new init! !Siren.OSCByteConvertor comment:'Instances of OSCByteConvertor translate between different OSC formats.Instance Variables:	packetData	<PositionableStream>  my contents'!!Siren.OSCByteConvertor methodsFor: 'initialize-release'!init	packetData := ByteArray new writeStream.	^self! !!Siren.OSCByteConvertor methodsFor: 'stream'!contents	^packetData contents!next: t1 put: t2 	^packetData next: t1 put: t2!nextPut: t1 	^packetData nextPut: t1!nextPutAll: t1 	^packetData nextPutAll: t1!nextPutType: char"	Transcript show: (String with: char); space."	^self nextPut: char asInteger!position	^packetData position! !!Core.List methodsFor: 'accessing'!collection	"Answer the receiver's base collection."	^collection copyFrom: 1 to: limit! !!Core.Dictionary methodsFor: 'enumerating'!case: aKey	"Execute one of the values of the receiver or the otherwise block."	"((#a -> [Transcript cr; show: 'a'; cr]), 		(#b -> [Transcript cr; show: 'b'; cr]), 		(#c -> [Transcript cr; show: 'c'; cr]))	case: #b"	^self case: aKey otherwise: []!case: aKey otherwise: otherwiseBlock	"Execute one of the values of the receiver or the otherwise block."	"((#a -> [Transcript cr; show: 'a'; cr]), 		(#b -> [Transcript cr; show: 'b'; cr]), 		(#c -> [Transcript cr; show: 'c'; cr]))	case: #b otherwise: [Transcript cr; show: 'other'; cr]"	^(self at: aKey ifAbsent: otherwiseBlock) value! !!Core.Dictionary methodsFor: 'copying'!, anAssociation 	"Add the argument to the receiver."	"(#a -> 1), (#b -> 2), (#c -> 3)"	self add: anAssociation.	^self! !!OS.Filename class methodsFor: 'constants'!separatorString	"Answer the platform's filename component separator."	^String with: self separator! !!OS.Filename methodsFor: 'parsing'!base	"Answer the filename prefix as a String."	"'/Users/stp/Code/Smalltalk/Siren7.5/Data/Ritardando.ev' asFilename base"	| nm periodIndex sepIndex |	nm := self asString.	sepIndex := self lastSeparatorIndex.	sepIndex ifNil: [sepIndex := 0].	periodIndex := nm lastIndexOf: $..	^periodIndex > 1		ifTrue: [nm copyFrom: sepIndex + 1 to: periodIndex - 1]		ifFalse: [nm copy]! !!OS.Filename methodsFor: 'testing'!existsSafely	"Answer true if the named file exists."	^[self primitiveExists]		on: Error		do: [:ex | ex return: false]! !!Core.Behavior methodsFor: 'accessing class hierarchy'!sortedSubclasses	"Answer the receiver's subclasses in a sorted collection by name with abstract classes first."	 | coll coll2 coll3 allClasses |	subclasses == nil		ifTrue: [^Set new].	coll := subclasses collect: [ :e | e name ].	coll := coll asSortedCollection.	allClasses := OrderedCollection new: 1024.	SystemUtils allClassesDo: [ :cls | allClasses add: cls].	coll := coll collect: [ :e | allClasses detect: [ :cls | cls name == e]].	coll2 := coll select: [ :e | e subclasses isEmpty].	coll3 := coll select: [ :e | e subclasses isEmpty not].	coll2 isEmpty ifTrue: [^coll3].	coll3 isEmpty ifTrue: [^coll2].	coll := OrderedCollection withAll: coll2.	coll addAll: coll3.	^coll! !!Siren.SoundVoice class methodsFor: 'constant access'!default	^self on: SoundPort default! !Siren.SoundVoice comment:'SoundVoice is unfinished; it is intended for putting sound objects in scores.'!!Siren.SoundVoice methodsFor: 'events'!playEvent: t1 at: t2 	stream play: t1.	^self! !!Siren.SuperColliderVoice class methodsFor: 'examples'!randomExampleToFileAndEdit	"SuperColliderVoice randomExampleToFileAndEdit"	self randomExampleToFileNamed: 'rand.sc'.	^self!randomExampleToFileNamed: fnam 	"Create a random event list and store it on a file."	"SuperColliderVoice randomExampleToFileAndEdit"	| evt strm list rand vox |	strm := (Filename named: fnam) writeStream.	rand := Random new."Create the event list and add a few additional properties"	(list := EventList randomExample: 64)		do: [ :ass | 			evt := ass event.			evt at: #attack put: (rand nextFrom: 0.001 to: 0.03).			evt at: #decay put: (rand nextFrom: 0.2 to: 0.3).			evt at: #index put: (rand nextFrom: 0.2 to: 2.3).			evt at: #decay put: (rand nextFrom: 0.2 to: 0.3)]."Create a SuperCollider voice and customize its parameter map."	vox := SuperColliderVoice newNamed: '1' onStream: strm."Play the list on the voice."	vox play: list.	strm close.	(Filename named: fnam) edit.	^self! !!Siren.SuperColliderVoice class methodsFor: 'instance creation'!defaultPMap	"Answer up the parameter map for the default instance."	"Instrument format		[ delT, 'fm', fname, dur, att, dec, ampl, index ] "	| map |	map := OrderedCollection new: 8.	map add: [ :ass :li | '	[ ', ((li nextTimeFor: ass) asSec value asFloat printString: 6)].	map add: '\fm'.	map add: [ :e | e duration asSec value asFloat printString: 4].	map add: [ :e | e attack value printString: 4].	map add: [ :e | e decay value printString: 4].	map add: [ :e | e ampl value asFloat printString: 4].	map add: [ :e | e index printString: 4].	^map!pMapForPanner	"Answer up the parameter map for the default instance."	"Instrument format		[ delT, 'panner', fname, dur, att, dec, ampl, angVel ] "	| map |	map := OrderedCollection new: 8.	map add: [ :ass :li | '	[ ', (li nextTimeFor: ass) asSec value 										printString: 5].	map add: '\panner'.	map add: [ :e | '\', e partial].	map add: [ :e | e duration asSec value printString].	map add: [ :e | e attack value printString].	map add: [ :e | e decay value printString].	map add: [ :e | e ampl value printString truncateTo: 6].	map add: [ :e | e angularVelocity printString truncateTo: 6].	^map! !Siren.SuperColliderVoice comment:'A SuperColliderVoice can write an event list to a sc format file for use by SuperCollider.'!!Siren.SuperColliderVoice methodsFor: 'events'!endLine	"Put the proper command terminator on the receiver's stream."	stream nextPutAll: ' ],'; cr!space	"Put the proper field separator on the receiver's stream."	stream space; nextPut: $,; space; tab!writeFooter	"Write a notelist file footer on the receiver's stream.""	stream skip: -2."	stream nextPutAll: '];'; cr!writeHeader	"Write a SuperCollider notelist file header on the receiver's stream."	header ifNotNil: 		[^stream nextPutAll: header].	stream nextPutAll: '// SC2 Score for rotating bell clusters; generated on ',		Date today printString, ' at ',  Time now printString, '// Instrument format [ delT, \panner, \fname, dur, att, dec, ampl, angVel ]score = #['! !!Tools.ListWorkBook class methodsFor: 'interface specs'!listMenu	"MenuEditor new openOnClass: self andSelector: #listMenu"	<resource: #menu>	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&Page' 				#nameKey: #fileMenu 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&New' 							#nameKey: #fileNew 							#value: #fileNew 							#shortcutKeyCharacter: $N 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #fileNew ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&Open...' 							#nameKey: #fileOpen 							#value: #fileOpen 							#shortcutKeyCharacter: $O 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #fileOpen ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&Save' 							#nameKey: #fileSave 							#value: #fileSave 							#enablementSelector: #isAtTextPage 							#shortcutKeyCharacter: $S 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Save &As...' 							#nameKey: #fileSaveAs 							#value: #fileSaveAs 							#enablementSelector: #isAtTextPage ) 						#(#{UI.MenuItem} 							#rawLabel: 'Load All...' 							#nameKey: #loadAll 							#value: #loadAll ) 						#(#{UI.MenuItem} 							#rawLabel: 'Save All...' 							#nameKey: #saveAll 							#value: #saveAll ) 						#(#{UI.MenuItem} 							#rawLabel: '&Rename...' 							#nameKey: #pageRename 							#value: #pageRename 							#enablementSelector: #canRenamePage ) 						#(#{UI.MenuItem} 							#rawLabel: '&Tear Off' 							#nameKey: #pageTearOff 							#value: #pageTearOff 							#enablementSelector: #isAtTextPage ) 						#(#{UI.MenuItem} 							#rawLabel: 'Re&move' 							#nameKey: #pageClose 							#value: #pageClose 							#enablementSelector: #canClosePage ) ) #(1 5 3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&Edit' 				#nameKey: #editMenu 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&Undo' 							#nameKey: #editUndo 							#value: #undo 							#enablementSelector: #canUndo 							#shortcutKeyCharacter: $Z 							#shortcutModifiers: 2 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Cu&t' 							#nameKey: #editCut 							#value: #cut 							#enablementSelector: #isAtTextPage 							#shortcutKeyCharacter: $X 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #cut ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&Copy' 							#nameKey: #editCopy 							#value: #copySelection 							#shortcutKeyCharacter: $C 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #copy ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&Paste' 							#nameKey: #editPaste 							#value: #paste 							#shortcutKeyCharacter: $V 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #paste ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Select &All' 							#nameKey: #editSelectAll 							#value: #selectAll 							#shortcutKeyCharacter: $A 							#shortcutModifiers: 2 ) 						#(#{UI.MenuItem} 							#rawLabel: '&Encoding' 							#nameKey: #editEncoding ) ) #(1 3 1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&Smalltalk' 				#nameKey: #smalltalkSubmenu 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&Do it' 							#value: #smalltalkDoIt 							#shortcutKeyCharacter: $D 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #doIt ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&Print it' 							#value: #smalltalkPrintIt 							#shortcutKeyCharacter: $P 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #printIt ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&Inspect it' 							#value: #smalltalkInspectIt 							#shortcutKeyCharacter: $I 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #inspectIt ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'De&bug it' 							#value: #smalltalkDebugIt 							#shortcutKeyCharacter: $B 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #debugIt ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&File it In' 							#value: #smalltalkFileItIn ) 						#(#{UI.MenuItem} 							#rawLabel: '&Namespaces...' 							#value: #editImports 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #namespaces ) ) ) #(4 1 1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray!menuBar	"MenuEditor new openOnClass: self andSelector: #menuBar"	<resource: #menu>	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&Page' 				#nameKey: #fileMenu 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&New' 							#nameKey: #fileNew 							#value: #fileNew 							#shortcutKeyCharacter: $N 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #fileNew ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&Open...' 							#nameKey: #fileOpen 							#value: #fileOpen 							#shortcutKeyCharacter: $O 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #fileOpen ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&Save' 							#nameKey: #fileSave 							#value: #fileSave 							#enablementSelector: #isAtTextPage 							#shortcutKeyCharacter: $S 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Save &As...' 							#nameKey: #fileSaveAs 							#value: #fileSaveAs 							#enablementSelector: #isAtTextPage ) 						#(#{UI.MenuItem} 							#rawLabel: 'Load All...' 							#nameKey: #loadAll 							#value: #loadAll ) 						#(#{UI.MenuItem} 							#rawLabel: 'Save All...' 							#nameKey: #saveAll 							#value: #saveAll ) 						#(#{UI.MenuItem} 							#rawLabel: '&Rename...' 							#nameKey: #pageRename 							#value: #pageRename 							#enablementSelector: #canRenamePage ) 						#(#{UI.MenuItem} 							#rawLabel: '&Tear Off' 							#nameKey: #pageTearOff 							#value: #pageTearOff 							#enablementSelector: #isAtTextPage ) 						#(#{UI.MenuItem} 							#rawLabel: 'Re&move' 							#nameKey: #pageClose 							#value: #pageClose 							#enablementSelector: #canClosePage ) ) #(1 5 3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&Edit' 				#nameKey: #editMenu 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&Undo' 							#nameKey: #editUndo 							#value: #undo 							#enablementSelector: #canUndo 							#shortcutKeyCharacter: $Z 							#shortcutModifiers: 2 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Cu&t' 							#nameKey: #editCut 							#value: #cut 							#enablementSelector: #isAtTextPage 							#shortcutKeyCharacter: $X 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #cut ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&Copy' 							#nameKey: #editCopy 							#value: #copySelection 							#shortcutKeyCharacter: $C 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #copy ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&Paste' 							#nameKey: #editPaste 							#value: #paste 							#shortcutKeyCharacter: $V 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #paste ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Select &All' 							#nameKey: #editSelectAll 							#value: #selectAll 							#shortcutKeyCharacter: $A 							#shortcutModifiers: 2 ) 						#(#{UI.MenuItem} 							#rawLabel: '&Encoding' 							#nameKey: #editEncoding ) ) #(1 3 1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&Smalltalk' 				#nameKey: #smalltalkSubmenu 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&Do it' 							#value: #smalltalkDoIt 							#shortcutKeyCharacter: $D 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #doIt ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&Print it' 							#value: #smalltalkPrintIt 							#shortcutKeyCharacter: $P 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #printIt ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&Inspect it' 							#value: #smalltalkInspectIt 							#shortcutKeyCharacter: $I 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #inspectIt ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'De&bug it' 							#value: #smalltalkDebugIt 							#shortcutKeyCharacter: $B 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #debugIt ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&File it In' 							#value: #smalltalkFileItIn ) 						#(#{UI.MenuItem} 							#rawLabel: '&Namespaces...' 							#value: #editImports 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #namespaces ) ) ) #(4 1 1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray!topicMenu	"MenuEditor new openOnClass: self andSelector: #menuBar"	<resource: #menu>	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&Page' 				#nameKey: #fileMenu 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&New' 							#nameKey: #fileNew 							#value: #fileNew 							#shortcutKeyCharacter: $N 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #fileNew ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&Open...' 							#nameKey: #fileOpen 							#value: #fileOpen 							#shortcutKeyCharacter: $O 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #fileOpen ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&Save' 							#nameKey: #fileSave 							#value: #fileSave 							#enablementSelector: #isAtTextPage 							#shortcutKeyCharacter: $S 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Save &As...' 							#nameKey: #fileSaveAs 							#value: #fileSaveAs 							#enablementSelector: #isAtTextPage ) 						#(#{UI.MenuItem} 							#rawLabel: 'Load All...' 							#nameKey: #loadAll 							#value: #loadAll ) 						#(#{UI.MenuItem} 							#rawLabel: 'Save All...' 							#nameKey: #saveAll 							#value: #saveAll ) 						#(#{UI.MenuItem} 							#rawLabel: '&Rename...' 							#nameKey: #pageRename 							#value: #pageRename 							#enablementSelector: #canRenamePage ) 						#(#{UI.MenuItem} 							#rawLabel: '&Tear Off' 							#nameKey: #pageTearOff 							#value: #pageTearOff 							#enablementSelector: #isAtTextPage ) 						#(#{UI.MenuItem} 							#rawLabel: 'Re&move' 							#nameKey: #pageClose 							#value: #pageClose 							#enablementSelector: #canClosePage ) ) #(1 5 3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&Edit' 				#nameKey: #editMenu 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&Undo' 							#nameKey: #editUndo 							#value: #undo 							#enablementSelector: #canUndo 							#shortcutKeyCharacter: $Z 							#shortcutModifiers: 2 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Cu&t' 							#nameKey: #editCut 							#value: #cut 							#enablementSelector: #isAtTextPage 							#shortcutKeyCharacter: $X 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #cut ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&Copy' 							#nameKey: #editCopy 							#value: #copySelection 							#shortcutKeyCharacter: $C 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #copy ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&Paste' 							#nameKey: #editPaste 							#value: #paste 							#shortcutKeyCharacter: $V 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #paste ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Select &All' 							#nameKey: #editSelectAll 							#value: #selectAll 							#shortcutKeyCharacter: $A 							#shortcutModifiers: 2 ) 						#(#{UI.MenuItem} 							#rawLabel: '&Encoding' 							#nameKey: #editEncoding ) ) #(1 3 1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&Smalltalk' 				#nameKey: #smalltalkSubmenu 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&Do it' 							#value: #smalltalkDoIt 							#shortcutKeyCharacter: $D 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #doIt ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&Print it' 							#value: #smalltalkPrintIt 							#shortcutKeyCharacter: $P 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #printIt ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&Inspect it' 							#value: #smalltalkInspectIt 							#shortcutKeyCharacter: $I 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #inspectIt ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'De&bug it' 							#value: #smalltalkDebugIt 							#shortcutKeyCharacter: $B 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #debugIt ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&File it In' 							#value: #smalltalkFileItIn ) 						#(#{UI.MenuItem} 							#rawLabel: '&Namespaces...' 							#value: #editImports 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #namespaces ) ) ) #(4 1 1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray!windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	<resource: #canvas>	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Workspace Outline' 			#min: #(#{Core.Point} 128 156 ) 			#max: #(#{Core.Point} 1600 1600 ) 			#bounds: #(#{Graphics.Rectangle} 636 281 1099 790 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -4 0.333333 ) 					#name: #pageList 					#model: #pageList 					#menu: #listMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.333333 0 1 0 1 ) 					#name: #textView 					#flags: 0 					#clientKey: #textView ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -4 0.333333 0 1 0 0.333333 ) 					#name: #ResizingSplitter1 					#flags: 8 					#horizontal: true 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'pageList' 					#belowWidgets: 'textView' ) ) ) )! !!Tools.ListWorkBook class methodsFor: 'utilities'!catAllToWebPage	"Take the directory of single web pages produced by the HTML output and concatenate them all onto 1 large web page (for printing)."	"ListWorkBook catAllToWebPage"	| dir in out toc hr string stream |	dir := './Siren7.5/Workbook/'.	toc := (dir, 'contents.txt') asFilename readStream.	out := (dir, 'Siren7.5_Workbook.html') asFilename writeStream.	in := (dir, 'index.html') asFilename.	hr := '<br><HR><br><br>'.	string := in contentsOfEntireFile.	string := string copyReplaceAll: '"./' with: '"#'.	string := string copyReplaceAll: '.html"'with: '"'.	out nextPutAll: string.	[toc atEnd] whileFalse:		[ | fil |		fil := toc upTo: Character cr.		stream := (dir, fil, '.html') asFilename readStream.		Transcript show: 'Processing ', (dir, fil, '.html'); cr.		stream upToAll: '<!!-- START -->'.		out nextPutAll: hr.		out nextPutAll: '<A NAME="', fil, '">'; cr.		out nextPutAll: (stream upToAll: '<!!-- END -->').		stream close.		].	out nextPutAll: hr.	out nextPutAll: '</BODY></HTML>'.	toc close.	out close.! !!Tools.ListWorkBook methodsFor: 'aspects'!pageChanged	| selection |	selection := self pageHolder selection.	lastInstalledPage notNil ifTrue:		[lastInstalledPage deactivate.		lastInstalledPage := nil].	selection isNil ifTrue: [textView value: String new. ^self].	self installPage: selection!pageList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^self pageHolder!tabControl	^(builder componentAt: #textView) widget!textView	^textView isNil		ifTrue:			[textView := String new asValue]		ifFalse:			[textView]! !!Tools.ListWorkBook methodsFor: 'interface closing'!requestForWindowClose	"The ApplicationWindow's controller is checking to see if the 	application is in a state such that it can be closed."	(Dialog confirm: 'Are you certain you want to close this workbook?')		ifFalse: [self open].	^super requestForWindowClose! !!Tools.ListWorkBook methodsFor: 'initialize-release'!postBuildWith: aBuilder	self pageHolder selectionIndexHolder		onChangeSend: #pageChanged to: self! !!Siren.DisplayList methodsFor: 'testing'!hasItems	"Answer whether or not the receiver has items or components."	^true! !!Siren.OSCPort class methodsFor: 'examples'!demo	"OSCPort demo"	self sendStart.	self sendFreq.	self sendStop.	^self!demo2	"OSCPort demo2"	self scHost send: TypedOSCMessage start.	self scHost send: TypedOSCMessage changeFreq.	self scHost send: TypedOSCMessage scStop.	^self!sendFreq	"PSCPort sendFreq"	self localhost send: TypedOSCMessage changeFreq.	^self!sendStart	"OSCPort sendstop"	self localhost send: TypedOSCMessage start.	^self!sendStop	"Send a stop message"	self localhost send: TypedOSCMessage scStop.	^self! !!Siren.OSCPort class methodsFor: 'instance-creation'!cslHost	"Answer the default port for CSL"	^self to: (IPSocketAddress hostName: 'localhost' port: 54321)!default	"Answer the default instance"	^self to: (IPSocketAddress hostAddress: self defaultIP port: self defaultPort)!localhost	"Answer an OSC port on the local host"	^self to: (IPSocketAddress hostAddress: (ByteArray				with: 127				with: 0				with: 0				with: 1)			port: self defaultPort)!scHost	"Answer the default OSC server reference"	^self to: (IPSocketAddress hostAddress: (ByteArray				with: 192				with: 168				with: 61				with: 1)			port: self defaultSCOSCPort)!to: t1 	"Open a port on the given device"	^self new init: t1!to: ip port: port	"^an OSCPort with the given attributes"	"OSCPort to: #[127 0 0 1] port: 54321"	^self to: (IPSocketAddress hostAddress: ip port: port)!toHostName: t1 	"Answer an instance on the given host"	^self to: (IPSocketAddress hostName: t1 port: self defaultPort)!toHostName: aHostName portNumber: aPort 	"^an OSCPort 	Convenience method"	^self to: (IPSocketAddress hostName: aHostName port: aPort)!toLocalhostPortNumber: aPort 	"^an OSCPort 	Convenience method"	^self toHostName: 'localhost' port: aPort! !!Siren.OSCPort class methodsFor: 'defaults'!defaultIP	"Answer the class var default"	^SirenUtility defaultOSCHost!defaultIP: value	"Set the class var default"	SirenUtility defaultOSCHost: value!defaultPort	"Answer the class var default"	^SirenUtility defaultOSCPort!defaultPort: value	"Set the class var default"	SirenUtility defaultOSCPort: value!defaultSCOSCPort	"Answer the default port for OSC"	^54321! !Siren.OSCPort comment:'An OSCPort represents a connection to an OSC client.Instance Variables:	socket <SocketAccessor>  how am I connected?	address <IPSocketAddress>  where do I go?Shared Variables:	DefaultIP <ByteArray>  where''s my default server?	DefaultPort	 <Integer>  where''s my default server?'!!Siren.OSCPort methodsFor: 'accessing'!portNumber: newPortNum 	"Reset the receiver's UDP socket port number"	address port: newPortNum! !!Siren.OSCPort methodsFor: 'actions'!send: aMessage 	"Send something"	SirenUtility log: aMessage printString level: 1.	self critical: [socket sendTo: address buffer: aMessage oscBytes]! !!Siren.OSCPort methodsFor: 'initialize-release'!init: t1 	"Set up"	socket := SocketAccessor newUDP.	address := t1.	^self! !!Siren.USecondDuration class methodsFor: 'coercion'!ddMsgName	"Answer the selector to be used in coercing double-dispatching messages."	^#asUsec! !Siren.USecondDuration class reorganizeFromString: '(''coercion'' #ddMsgName)'!!Tools.WorkspacePage methodsFor: 'accessing'!setFilename: aFilename	filename := aFilename.	self rememberFileTimestamp! !!Tools.WorkspacePage methodsFor: 'private-file access'!getText	"Answer the receiver page's text"	| tex |	tex := documentModel value. "(builder componentAt: #text) widget displayContents text."	tex isEmpty 		ifTrue: [tex := (builder componentAt: #text) widget getContents].	tex isEmpty ifTrue: [self halt].	^tex!representBinaryOn: binWriter	"Represent a workspace by its name and text. "	| tex |	tex := documentModel value. "(builder componentAt: #text) widget displayContents text."	tex isEmpty 		ifTrue: [tex := (builder componentAt: #text) widget getContents].	tex isEmpty ifTrue: [self halt].	^MessageSend			receiver: Array			selector: #with:with:			arguments: (Array with: label with: tex)!writeText: aText	| stream |	stream := self filenameWithEncoding writeStream.	[stream nextPutAll: aText] ensure: [stream close].	self rememberFileTimestamp."	textModelOverride := aText"! !!Core.Interval methodsFor: 'accessing'!stop	"Answer the last element of the arithmetic progression."	^stop! !!Core.Interval methodsFor: 'accessing'!size	"Answer how many elements the receiver contains."	"E.g. what is the distance between start and stop measured in step units."	"In the case of floating-point intervals, simply answer stop - start"	^step < 0		ifTrue: [start < stop			ifTrue: [0]			ifFalse: [stop - start // step + 1]]		ifFalse: [(start isInteger and: [stop isInteger])			ifTrue: [stop < start				ifTrue: [0]				ifFalse: [stop - start // step + 1]]			ifFalse: [stop - start]]! !!Core.Interval methodsFor: 'testing'!includes: aNumber 	"Answer whether aNumber is within the receiver's bounds."	^((aNumber > self first) and: [aNumber <= self stop])! !!Siren.Ostinato class methodsFor: 'examples'!trillExample	"Create and edit some ostinati."	"Ostinato trillExample"	| el os tm |	tm := 1/2.	el := (0 beat => (#c5 pitch, #pp ampl, tm beat)),		(tm beat =>(#d5 pitch, #pp ampl, tm beat)).	os := Ostinato onList: el.	os playOn: MIDIVoice default at: Time microsecondClock usec."	(Delay forSeconds: 5) wait.	el events first event pitch: #e5 pitch."	(Delay forSeconds: 4) wait.	os stop! !!Siren.Ostinato methodsFor: 'playing'!playOn: aVoice at: firstTime	"Play an ostinato until turned off."	"Ostinato trillExample"	| startTime del | 	startTime := firstTime."	self halt.	list playOn: aVoice at: startTime."	playing := true.	process := [[playing] whileTrue: 			[Transcript show: 'Starting EL at ', startTime printString; cr.			list playOn: aVoice at: startTime.			del := list duration asUsec value.			startTime := startTime + del.			(startTime > (firstTime + 5000000))				ifTrue: [Transcript show: 'Ost done'; cr.					playing := false].			(Delay forMicroseconds: del) wait]] fork "At: 5".	Processor yield.  					"give proc a chance to run"! !!Core.Boolean methodsFor: 'printing'!toOSCBytes: aConvertor	^self! !!Core.False methodsFor: 'printing'!printOSCTypeOn: aStream	aStream nextPut: $F!toOSCTypeOn: aConvertor	aConvertor nextPutType: $F! !!External.CPointer methodsFor: 'testing'!isCPointer	"Coerces CPointers to true and everything else to false."	^true! !!Core.True methodsFor: 'printing'!toOSCTypeOn: aConvertor 	aConvertor nextPutType: $T! !!Core.ByteArray methodsFor: 'printing'!printIP	| printSize stream |	stream := WriteStream on: (String new: 32).	printSize := self size.	printSize > self maxPrintElements		ifTrue: [printSize := self maxPrintElements].	(1 to: printSize)		do: [ :index | (self at: index) printOn: stream]		separatedBy: [stream nextPut: $.].	^stream contents! !#{Siren.Voice} initialize!#{Siren.SirenUtility} initialize!#{Siren.Duration} initialize!#{Siren.MIDIDevice} initialize!#{Siren.OSCBundle} initialize!#{Siren.OSCBundle.MillisecToNTP} initialize!#{Siren.OSCBundle.SecsInAYear} initialize!#{Siren.OSCBundle.MillisecScale} initialize!